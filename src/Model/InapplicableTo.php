<?php
/**
 * InapplicableTo
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InapplicableTo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InapplicableTo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InapplicableTo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'object' => 'string',
        'id' => 'string',
        'sourceId' => 'string',
        'productId' => 'string',
        'productSourceId' => 'string',
        'strict' => 'bool',
        'price' => 'float',
        'priceFormula' => 'float',
        'effect' => 'string',
        'quantityLimit' => 'int',
        'aggregatedQuantityLimit' => 'int',
        'amountLimit' => 'int',
        'aggregatedAmountLimit' => 'int',
        'orderItemIndices' => 'int[]',
        'repeat' => 'int',
        'skipInitially' => 'int',
        'target' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'object' => null,
        'id' => null,
        'sourceId' => null,
        'productId' => null,
        'productSourceId' => null,
        'strict' => null,
        'price' => null,
        'priceFormula' => null,
        'effect' => null,
        'quantityLimit' => null,
        'aggregatedQuantityLimit' => null,
        'amountLimit' => null,
        'aggregatedAmountLimit' => null,
        'orderItemIndices' => null,
        'repeat' => null,
        'skipInitially' => null,
        'target' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'object' => true,
		'id' => true,
		'sourceId' => true,
		'productId' => true,
		'productSourceId' => true,
		'strict' => true,
		'price' => true,
		'priceFormula' => true,
		'effect' => true,
		'quantityLimit' => true,
		'aggregatedQuantityLimit' => true,
		'amountLimit' => true,
		'aggregatedAmountLimit' => true,
		'orderItemIndices' => true,
		'repeat' => true,
		'skipInitially' => true,
		'target' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'object' => 'object',
        'id' => 'id',
        'sourceId' => 'source_id',
        'productId' => 'product_id',
        'productSourceId' => 'product_source_id',
        'strict' => 'strict',
        'price' => 'price',
        'priceFormula' => 'price_formula',
        'effect' => 'effect',
        'quantityLimit' => 'quantity_limit',
        'aggregatedQuantityLimit' => 'aggregated_quantity_limit',
        'amountLimit' => 'amount_limit',
        'aggregatedAmountLimit' => 'aggregated_amount_limit',
        'orderItemIndices' => 'order_item_indices',
        'repeat' => 'repeat',
        'skipInitially' => 'skip_initially',
        'target' => 'target'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'object' => 'setObject',
        'id' => 'setId',
        'sourceId' => 'setSourceId',
        'productId' => 'setProductId',
        'productSourceId' => 'setProductSourceId',
        'strict' => 'setStrict',
        'price' => 'setPrice',
        'priceFormula' => 'setPriceFormula',
        'effect' => 'setEffect',
        'quantityLimit' => 'setQuantityLimit',
        'aggregatedQuantityLimit' => 'setAggregatedQuantityLimit',
        'amountLimit' => 'setAmountLimit',
        'aggregatedAmountLimit' => 'setAggregatedAmountLimit',
        'orderItemIndices' => 'setOrderItemIndices',
        'repeat' => 'setRepeat',
        'skipInitially' => 'setSkipInitially',
        'target' => 'setTarget'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'object' => 'getObject',
        'id' => 'getId',
        'sourceId' => 'getSourceId',
        'productId' => 'getProductId',
        'productSourceId' => 'getProductSourceId',
        'strict' => 'getStrict',
        'price' => 'getPrice',
        'priceFormula' => 'getPriceFormula',
        'effect' => 'getEffect',
        'quantityLimit' => 'getQuantityLimit',
        'aggregatedQuantityLimit' => 'getAggregatedQuantityLimit',
        'amountLimit' => 'getAmountLimit',
        'aggregatedAmountLimit' => 'getAggregatedAmountLimit',
        'orderItemIndices' => 'getOrderItemIndices',
        'repeat' => 'getRepeat',
        'skipInitially' => 'getSkipInitially',
        'target' => 'getTarget'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OBJECT_PRODUCT = 'product';
    public const OBJECT_SKU = 'sku';
    public const OBJECT_PRODUCTS_COLLECTION = 'products_collection';
    public const EFFECT_TO_EVERY = 'APPLY_TO_EVERY';
    public const EFFECT_TO_CHEAPEST = 'APPLY_TO_CHEAPEST';
    public const EFFECT_FROM_CHEAPEST = 'APPLY_FROM_CHEAPEST';
    public const EFFECT_TO_MOST_EXPENSIVE = 'APPLY_TO_MOST_EXPENSIVE';
    public const EFFECT_FROM_MOST_EXPENSIVE = 'APPLY_FROM_MOST_EXPENSIVE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_PRODUCT,
            self::OBJECT_SKU,
            self::OBJECT_PRODUCTS_COLLECTION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEffectAllowableValues()
    {
        return [
            self::EFFECT_TO_EVERY,
            self::EFFECT_TO_CHEAPEST,
            self::EFFECT_FROM_CHEAPEST,
            self::EFFECT_TO_MOST_EXPENSIVE,
            self::EFFECT_FROM_MOST_EXPENSIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('productSourceId', $data ?? [], null);
        $this->setIfExists('strict', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('priceFormula', $data ?? [], null);
        $this->setIfExists('effect', $data ?? [], null);
        $this->setIfExists('quantityLimit', $data ?? [], null);
        $this->setIfExists('aggregatedQuantityLimit', $data ?? [], null);
        $this->setIfExists('amountLimit', $data ?? [], null);
        $this->setIfExists('aggregatedAmountLimit', $data ?? [], null);
        $this->setIfExists('orderItemIndices', $data ?? [], null);
        $this->setIfExists('repeat', $data ?? [], null);
        $this->setIfExists('skipInitially', $data ?? [], null);
        $this->setIfExists('target', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEffectAllowableValues();
        if (!is_null($this->container['effect']) && !in_array($this->container['effect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'effect', must be one of '%s'",
                $this->container['effect'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object This object stores information about the resource to which the discount is applicable.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            array_push($this->openAPINullablesSetToNull, 'object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($object) && !in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique product collection, product, or SKU identifier assigned by Voucherify.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId The source identifier from your inventory system.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string|null $productId Parent product's unique ID assigned by Voucherify.
     *
     * @return self
     */
    public function setProductId($productId)
    {
        if (is_null($productId)) {
            array_push($this->openAPINullablesSetToNull, 'productId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productSourceId
     *
     * @return string|null
     */
    public function getProductSourceId()
    {
        return $this->container['productSourceId'];
    }

    /**
     * Sets productSourceId
     *
     * @param string|null $productSourceId Parent product's source ID from your inventory system.
     *
     * @return self
     */
    public function setProductSourceId($productSourceId)
    {
        if (is_null($productSourceId)) {
            array_push($this->openAPINullablesSetToNull, 'productSourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productSourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productSourceId'] = $productSourceId;

        return $this;
    }

    /**
     * Gets strict
     *
     * @return bool|null
     */
    public function getStrict()
    {
        return $this->container['strict'];
    }

    /**
     * Sets strict
     *
     * @param bool|null $strict strict
     *
     * @return self
     */
    public function setStrict($strict)
    {
        if (is_null($strict)) {
            array_push($this->openAPINullablesSetToNull, 'strict');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('strict', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['strict'] = $strict;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price New fixed price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 price is written as 1000. In case of the fixed price being calculated by the formula, i.e. the price_formula parameter is present in the fixed price definition, this value becomes the fallback value. Such that in a case where the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed price.
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets priceFormula
     *
     * @return float|null
     */
    public function getPriceFormula()
    {
        return $this->container['priceFormula'];
    }

    /**
     * Sets priceFormula
     *
     * @param float|null $priceFormula Formula used to calculate the discounted price of an item.
     *
     * @return self
     */
    public function setPriceFormula($priceFormula)
    {
        if (is_null($priceFormula)) {
            array_push($this->openAPINullablesSetToNull, 'priceFormula');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('priceFormula', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['priceFormula'] = $priceFormula;

        return $this;
    }

    /**
     * Gets effect
     *
     * @return string|null
     */
    public function getEffect()
    {
        return $this->container['effect'];
    }

    /**
     * Sets effect
     *
     * @param string|null $effect effect
     *
     * @return self
     */
    public function setEffect($effect)
    {
        if (is_null($effect)) {
            array_push($this->openAPINullablesSetToNull, 'effect');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getEffectAllowableValues();
        if (!is_null($effect) && !in_array($effect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'effect', must be one of '%s'",
                    $effect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['effect'] = $effect;

        return $this;
    }

    /**
     * Gets quantityLimit
     *
     * @return int|null
     */
    public function getQuantityLimit()
    {
        return $this->container['quantityLimit'];
    }

    /**
     * Sets quantityLimit
     *
     * @param int|null $quantityLimit The maximum number of units allowed to be discounted per order line item.
     *
     * @return self
     */
    public function setQuantityLimit($quantityLimit)
    {
        if (is_null($quantityLimit)) {
            array_push($this->openAPINullablesSetToNull, 'quantityLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantityLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantityLimit'] = $quantityLimit;

        return $this;
    }

    /**
     * Gets aggregatedQuantityLimit
     *
     * @return int|null
     */
    public function getAggregatedQuantityLimit()
    {
        return $this->container['aggregatedQuantityLimit'];
    }

    /**
     * Sets aggregatedQuantityLimit
     *
     * @param int|null $aggregatedQuantityLimit The maximum number of units allowed to be discounted combined across all matched order line items.
     *
     * @return self
     */
    public function setAggregatedQuantityLimit($aggregatedQuantityLimit)
    {
        if (is_null($aggregatedQuantityLimit)) {
            array_push($this->openAPINullablesSetToNull, 'aggregatedQuantityLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregatedQuantityLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregatedQuantityLimit'] = $aggregatedQuantityLimit;

        return $this;
    }

    /**
     * Gets amountLimit
     *
     * @return int|null
     */
    public function getAmountLimit()
    {
        return $this->container['amountLimit'];
    }

    /**
     * Sets amountLimit
     *
     * @param int|null $amountLimit Upper limit allowed to be applied as a discount per order line item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600.
     *
     * @return self
     */
    public function setAmountLimit($amountLimit)
    {
        if (is_null($amountLimit)) {
            array_push($this->openAPINullablesSetToNull, 'amountLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amountLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amountLimit'] = $amountLimit;

        return $this;
    }

    /**
     * Gets aggregatedAmountLimit
     *
     * @return int|null
     */
    public function getAggregatedAmountLimit()
    {
        return $this->container['aggregatedAmountLimit'];
    }

    /**
     * Sets aggregatedAmountLimit
     *
     * @param int|null $aggregatedAmountLimit Maximum discount amount per order. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount on the entire order is written as 600. This value is definable for the following discount effects: - `APPLY_TO_ITEMS` (each item subtotal is discounted equally) - `APPLY_TO_ITEMS_BY_QUANTITY` (each unit of matched products has the same discount value)
     *
     * @return self
     */
    public function setAggregatedAmountLimit($aggregatedAmountLimit)
    {
        if (is_null($aggregatedAmountLimit)) {
            array_push($this->openAPINullablesSetToNull, 'aggregatedAmountLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregatedAmountLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregatedAmountLimit'] = $aggregatedAmountLimit;

        return $this;
    }

    /**
     * Gets orderItemIndices
     *
     * @return int[]|null
     */
    public function getOrderItemIndices()
    {
        return $this->container['orderItemIndices'];
    }

    /**
     * Sets orderItemIndices
     *
     * @param int[]|null $orderItemIndices Determines the order in which the discount is applied to the products or SKUs sent in the `order` object in the request. The counting begins from `0`.
     *
     * @return self
     */
    public function setOrderItemIndices($orderItemIndices)
    {
        if (is_null($orderItemIndices)) {
            array_push($this->openAPINullablesSetToNull, 'orderItemIndices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orderItemIndices', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['orderItemIndices'] = $orderItemIndices;

        return $this;
    }

    /**
     * Gets repeat
     *
     * @return int|null
     */
    public function getRepeat()
    {
        return $this->container['repeat'];
    }

    /**
     * Sets repeat
     *
     * @param int|null $repeat Determines the recurrence of the discount, e.g. `\"repeat\": 3` means that the discount is applied to every third item.
     *
     * @return self
     */
    public function setRepeat($repeat)
    {
        if (is_null($repeat)) {
            array_push($this->openAPINullablesSetToNull, 'repeat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repeat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repeat'] = $repeat;

        return $this;
    }

    /**
     * Gets skipInitially
     *
     * @return int|null
     */
    public function getSkipInitially()
    {
        return $this->container['skipInitially'];
    }

    /**
     * Sets skipInitially
     *
     * @param int|null $skipInitially Determines how many items are skipped before the discount is applied.
     *
     * @return self
     */
    public function setSkipInitially($skipInitially)
    {
        if (is_null($skipInitially)) {
            array_push($this->openAPINullablesSetToNull, 'skipInitially');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skipInitially', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skipInitially'] = $skipInitially;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string|null
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string|null $target Determines to which kinds of objects the discount is applicable. `\"ITEM\"` includes products and SKUs.
     *
     * @return self
     */
    public function setTarget($target)
    {
        if (is_null($target)) {
            array_push($this->openAPINullablesSetToNull, 'target');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['target'] = $target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


