<?php
/**
 * ParameterFiltersListPublications
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ParameterFiltersListPublications Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ParameterFiltersListPublications implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ParameterFiltersListPublications';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'junction' => 'string',
        'failureCode' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsFailureCode',
        'result' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsResult',
        'customerId' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsCustomerId',
        'campaignName' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsCampaignName',
        'voucherType' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsVoucherType',
        'isReferralCode' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsIsReferralCode',
        'parentObjectId' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsParentObjectId',
        'relatedObjectId' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsRelatedObjectId',
        'sourceId' => '\OpenAPI\Client\Model\ParameterFiltersListPublicationsSourceId'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'junction' => null,
        'failureCode' => null,
        'result' => null,
        'customerId' => null,
        'campaignName' => null,
        'voucherType' => null,
        'isReferralCode' => null,
        'parentObjectId' => null,
        'relatedObjectId' => null,
        'sourceId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'junction' => true,
		'failureCode' => true,
		'result' => true,
		'customerId' => true,
		'campaignName' => true,
		'voucherType' => true,
		'isReferralCode' => true,
		'parentObjectId' => true,
		'relatedObjectId' => true,
		'sourceId' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'junction' => 'junction',
        'failureCode' => 'failure_code',
        'result' => 'result',
        'customerId' => 'customer_id',
        'campaignName' => 'campaign_name',
        'voucherType' => 'voucher_type',
        'isReferralCode' => 'is_referral_code',
        'parentObjectId' => 'parent_object_id',
        'relatedObjectId' => 'related_object_id',
        'sourceId' => 'source_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'junction' => 'setJunction',
        'failureCode' => 'setFailureCode',
        'result' => 'setResult',
        'customerId' => 'setCustomerId',
        'campaignName' => 'setCampaignName',
        'voucherType' => 'setVoucherType',
        'isReferralCode' => 'setIsReferralCode',
        'parentObjectId' => 'setParentObjectId',
        'relatedObjectId' => 'setRelatedObjectId',
        'sourceId' => 'setSourceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'junction' => 'getJunction',
        'failureCode' => 'getFailureCode',
        'result' => 'getResult',
        'customerId' => 'getCustomerId',
        'campaignName' => 'getCampaignName',
        'voucherType' => 'getVoucherType',
        'isReferralCode' => 'getIsReferralCode',
        'parentObjectId' => 'getParentObjectId',
        'relatedObjectId' => 'getRelatedObjectId',
        'sourceId' => 'getSourceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const JUNCTION__AND = 'and';
    public const JUNCTION__OR = 'or';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJunctionAllowableValues()
    {
        return [
            self::JUNCTION__AND,
            self::JUNCTION__OR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('junction', $data ?? [], null);
        $this->setIfExists('failureCode', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('campaignName', $data ?? [], null);
        $this->setIfExists('voucherType', $data ?? [], null);
        $this->setIfExists('isReferralCode', $data ?? [], null);
        $this->setIfExists('parentObjectId', $data ?? [], null);
        $this->setIfExists('relatedObjectId', $data ?? [], null);
        $this->setIfExists('sourceId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getJunctionAllowableValues();
        if (!is_null($this->container['junction']) && !in_array($this->container['junction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'junction', must be one of '%s'",
                $this->container['junction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets junction
     *
     * @return string|null
     */
    public function getJunction()
    {
        return $this->container['junction'];
    }

    /**
     * Sets junction
     *
     * @param string|null $junction Logical Operator Between Filters. Filter by conditions set on the `junction` parameter indicating how the `conditions` should be accounted for in the query. An `AND` is an all-inclusive logical operator, meaning the `AND` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an `OR` operator displays a record if **ANY** of the conditions separated by OR is TRUE.
     *
     * @return self
     */
    public function setJunction($junction)
    {
        if (is_null($junction)) {
            array_push($this->openAPINullablesSetToNull, 'junction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('junction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getJunctionAllowableValues();
        if (!is_null($junction) && !in_array($junction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'junction', must be one of '%s'",
                    $junction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['junction'] = $junction;

        return $this;
    }

    /**
     * Gets failureCode
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsFailureCode|null
     */
    public function getFailureCode()
    {
        return $this->container['failureCode'];
    }

    /**
     * Sets failureCode
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsFailureCode|null $failureCode failureCode
     *
     * @return self
     */
    public function setFailureCode($failureCode)
    {
        if (is_null($failureCode)) {
            array_push($this->openAPINullablesSetToNull, 'failureCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failureCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failureCode'] = $failureCode;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsResult|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsResult|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            array_push($this->openAPINullablesSetToNull, 'result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsCustomerId|null
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsCustomerId|null $customerId customerId
     *
     * @return self
     */
    public function setCustomerId($customerId)
    {
        if (is_null($customerId)) {
            array_push($this->openAPINullablesSetToNull, 'customerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets campaignName
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsCampaignName|null
     */
    public function getCampaignName()
    {
        return $this->container['campaignName'];
    }

    /**
     * Sets campaignName
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsCampaignName|null $campaignName campaignName
     *
     * @return self
     */
    public function setCampaignName($campaignName)
    {
        if (is_null($campaignName)) {
            array_push($this->openAPINullablesSetToNull, 'campaignName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaignName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaignName'] = $campaignName;

        return $this;
    }

    /**
     * Gets voucherType
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsVoucherType|null
     */
    public function getVoucherType()
    {
        return $this->container['voucherType'];
    }

    /**
     * Sets voucherType
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsVoucherType|null $voucherType voucherType
     *
     * @return self
     */
    public function setVoucherType($voucherType)
    {
        if (is_null($voucherType)) {
            array_push($this->openAPINullablesSetToNull, 'voucherType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucherType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucherType'] = $voucherType;

        return $this;
    }

    /**
     * Gets isReferralCode
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsIsReferralCode|null
     */
    public function getIsReferralCode()
    {
        return $this->container['isReferralCode'];
    }

    /**
     * Sets isReferralCode
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsIsReferralCode|null $isReferralCode isReferralCode
     *
     * @return self
     */
    public function setIsReferralCode($isReferralCode)
    {
        if (is_null($isReferralCode)) {
            array_push($this->openAPINullablesSetToNull, 'isReferralCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isReferralCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isReferralCode'] = $isReferralCode;

        return $this;
    }

    /**
     * Gets parentObjectId
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsParentObjectId|null
     */
    public function getParentObjectId()
    {
        return $this->container['parentObjectId'];
    }

    /**
     * Sets parentObjectId
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsParentObjectId|null $parentObjectId parentObjectId
     *
     * @return self
     */
    public function setParentObjectId($parentObjectId)
    {
        if (is_null($parentObjectId)) {
            array_push($this->openAPINullablesSetToNull, 'parentObjectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parentObjectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parentObjectId'] = $parentObjectId;

        return $this;
    }

    /**
     * Gets relatedObjectId
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsRelatedObjectId|null
     */
    public function getRelatedObjectId()
    {
        return $this->container['relatedObjectId'];
    }

    /**
     * Sets relatedObjectId
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsRelatedObjectId|null $relatedObjectId relatedObjectId
     *
     * @return self
     */
    public function setRelatedObjectId($relatedObjectId)
    {
        if (is_null($relatedObjectId)) {
            array_push($this->openAPINullablesSetToNull, 'relatedObjectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relatedObjectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['relatedObjectId'] = $relatedObjectId;

        return $this;
    }

    /**
     * Gets sourceId
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListPublicationsSourceId|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListPublicationsSourceId|null $sourceId sourceId
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceId'] = $sourceId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


