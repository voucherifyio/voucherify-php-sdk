<?php
/**
 * StackingRules
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StackingRules Class Doc Comment
 *
 * @category Class
 * @description Defines stacking rules for redeemables. Read more in the [Stacking Rule Documentation](https://support.voucherify.io/article/604-stacking-rules).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StackingRules implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StackingRules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'redeemablesLimit' => 'int',
        'applicableRedeemablesLimit' => 'int',
        'applicableRedeemablesPerCategoryLimit' => 'int',
        'applicableExclusiveRedeemablesLimit' => 'int',
        'applicableExclusiveRedeemablesPerCategoryLimit' => 'int',
        'exclusiveCategories' => 'string[]',
        'jointCategories' => 'string[]',
        'redeemablesApplicationMode' => 'string',
        'redeemablesSortingRule' => 'string',
        'redeemablesProductsApplicationMode' => 'string',
        'redeemablesNoEffectRule' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'redeemablesLimit' => null,
        'applicableRedeemablesLimit' => null,
        'applicableRedeemablesPerCategoryLimit' => null,
        'applicableExclusiveRedeemablesLimit' => null,
        'applicableExclusiveRedeemablesPerCategoryLimit' => null,
        'exclusiveCategories' => null,
        'jointCategories' => null,
        'redeemablesApplicationMode' => null,
        'redeemablesSortingRule' => null,
        'redeemablesProductsApplicationMode' => null,
        'redeemablesNoEffectRule' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'redeemablesLimit' => true,
		'applicableRedeemablesLimit' => true,
		'applicableRedeemablesPerCategoryLimit' => true,
		'applicableExclusiveRedeemablesLimit' => true,
		'applicableExclusiveRedeemablesPerCategoryLimit' => true,
		'exclusiveCategories' => true,
		'jointCategories' => true,
		'redeemablesApplicationMode' => true,
		'redeemablesSortingRule' => true,
		'redeemablesProductsApplicationMode' => true,
		'redeemablesNoEffectRule' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redeemablesLimit' => 'redeemables_limit',
        'applicableRedeemablesLimit' => 'applicable_redeemables_limit',
        'applicableRedeemablesPerCategoryLimit' => 'applicable_redeemables_per_category_limit',
        'applicableExclusiveRedeemablesLimit' => 'applicable_exclusive_redeemables_limit',
        'applicableExclusiveRedeemablesPerCategoryLimit' => 'applicable_exclusive_redeemables_per_category_limit',
        'exclusiveCategories' => 'exclusive_categories',
        'jointCategories' => 'joint_categories',
        'redeemablesApplicationMode' => 'redeemables_application_mode',
        'redeemablesSortingRule' => 'redeemables_sorting_rule',
        'redeemablesProductsApplicationMode' => 'redeemables_products_application_mode',
        'redeemablesNoEffectRule' => 'redeemables_no_effect_rule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redeemablesLimit' => 'setRedeemablesLimit',
        'applicableRedeemablesLimit' => 'setApplicableRedeemablesLimit',
        'applicableRedeemablesPerCategoryLimit' => 'setApplicableRedeemablesPerCategoryLimit',
        'applicableExclusiveRedeemablesLimit' => 'setApplicableExclusiveRedeemablesLimit',
        'applicableExclusiveRedeemablesPerCategoryLimit' => 'setApplicableExclusiveRedeemablesPerCategoryLimit',
        'exclusiveCategories' => 'setExclusiveCategories',
        'jointCategories' => 'setJointCategories',
        'redeemablesApplicationMode' => 'setRedeemablesApplicationMode',
        'redeemablesSortingRule' => 'setRedeemablesSortingRule',
        'redeemablesProductsApplicationMode' => 'setRedeemablesProductsApplicationMode',
        'redeemablesNoEffectRule' => 'setRedeemablesNoEffectRule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redeemablesLimit' => 'getRedeemablesLimit',
        'applicableRedeemablesLimit' => 'getApplicableRedeemablesLimit',
        'applicableRedeemablesPerCategoryLimit' => 'getApplicableRedeemablesPerCategoryLimit',
        'applicableExclusiveRedeemablesLimit' => 'getApplicableExclusiveRedeemablesLimit',
        'applicableExclusiveRedeemablesPerCategoryLimit' => 'getApplicableExclusiveRedeemablesPerCategoryLimit',
        'exclusiveCategories' => 'getExclusiveCategories',
        'jointCategories' => 'getJointCategories',
        'redeemablesApplicationMode' => 'getRedeemablesApplicationMode',
        'redeemablesSortingRule' => 'getRedeemablesSortingRule',
        'redeemablesProductsApplicationMode' => 'getRedeemablesProductsApplicationMode',
        'redeemablesNoEffectRule' => 'getRedeemablesNoEffectRule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REDEEMABLES_APPLICATION_MODE_ALL = 'ALL';
    public const REDEEMABLES_APPLICATION_MODE_PARTIAL = 'PARTIAL';
    public const REDEEMABLES_SORTING_RULE_CATEGORY_HIERARCHY = 'CATEGORY_HIERARCHY';
    public const REDEEMABLES_SORTING_RULE_REQUESTED_ORDER = 'REQUESTED_ORDER';
    public const REDEEMABLES_PRODUCTS_APPLICATION_MODE_STACK = 'STACK';
    public const REDEEMABLES_PRODUCTS_APPLICATION_MODE_ONCE = 'ONCE';
    public const REDEEMABLES_NO_EFFECT_RULE_REDEEM_ANYWAY = 'REDEEM_ANYWAY';
    public const REDEEMABLES_NO_EFFECT_RULE_SKIP = 'SKIP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedeemablesApplicationModeAllowableValues()
    {
        return [
            self::REDEEMABLES_APPLICATION_MODE_ALL,
            self::REDEEMABLES_APPLICATION_MODE_PARTIAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedeemablesSortingRuleAllowableValues()
    {
        return [
            self::REDEEMABLES_SORTING_RULE_CATEGORY_HIERARCHY,
            self::REDEEMABLES_SORTING_RULE_REQUESTED_ORDER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedeemablesProductsApplicationModeAllowableValues()
    {
        return [
            self::REDEEMABLES_PRODUCTS_APPLICATION_MODE_STACK,
            self::REDEEMABLES_PRODUCTS_APPLICATION_MODE_ONCE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedeemablesNoEffectRuleAllowableValues()
    {
        return [
            self::REDEEMABLES_NO_EFFECT_RULE_REDEEM_ANYWAY,
            self::REDEEMABLES_NO_EFFECT_RULE_SKIP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('redeemablesLimit', $data ?? [], 30);
        $this->setIfExists('applicableRedeemablesLimit', $data ?? [], 5);
        $this->setIfExists('applicableRedeemablesPerCategoryLimit', $data ?? [], 1);
        $this->setIfExists('applicableExclusiveRedeemablesLimit', $data ?? [], 1);
        $this->setIfExists('applicableExclusiveRedeemablesPerCategoryLimit', $data ?? [], 1);
        $this->setIfExists('exclusiveCategories', $data ?? [], null);
        $this->setIfExists('jointCategories', $data ?? [], null);
        $this->setIfExists('redeemablesApplicationMode', $data ?? [], null);
        $this->setIfExists('redeemablesSortingRule', $data ?? [], 'REQUESTED_ORDER');
        $this->setIfExists('redeemablesProductsApplicationMode', $data ?? [], null);
        $this->setIfExists('redeemablesNoEffectRule', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['redeemablesLimit']) && ($this->container['redeemablesLimit'] > 30)) {
            $invalidProperties[] = "invalid value for 'redeemablesLimit', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['redeemablesLimit']) && ($this->container['redeemablesLimit'] < 1)) {
            $invalidProperties[] = "invalid value for 'redeemablesLimit', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['applicableRedeemablesLimit']) && ($this->container['applicableRedeemablesLimit'] > 30)) {
            $invalidProperties[] = "invalid value for 'applicableRedeemablesLimit', must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['applicableRedeemablesLimit']) && ($this->container['applicableRedeemablesLimit'] < 1)) {
            $invalidProperties[] = "invalid value for 'applicableRedeemablesLimit', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['applicableRedeemablesPerCategoryLimit']) && ($this->container['applicableRedeemablesPerCategoryLimit'] > 5)) {
            $invalidProperties[] = "invalid value for 'applicableRedeemablesPerCategoryLimit', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['applicableRedeemablesPerCategoryLimit']) && ($this->container['applicableRedeemablesPerCategoryLimit'] < 1)) {
            $invalidProperties[] = "invalid value for 'applicableRedeemablesPerCategoryLimit', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['applicableExclusiveRedeemablesLimit']) && ($this->container['applicableExclusiveRedeemablesLimit'] > 5)) {
            $invalidProperties[] = "invalid value for 'applicableExclusiveRedeemablesLimit', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['applicableExclusiveRedeemablesLimit']) && ($this->container['applicableExclusiveRedeemablesLimit'] < 1)) {
            $invalidProperties[] = "invalid value for 'applicableExclusiveRedeemablesLimit', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['applicableExclusiveRedeemablesPerCategoryLimit']) && ($this->container['applicableExclusiveRedeemablesPerCategoryLimit'] > 5)) {
            $invalidProperties[] = "invalid value for 'applicableExclusiveRedeemablesPerCategoryLimit', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['applicableExclusiveRedeemablesPerCategoryLimit']) && ($this->container['applicableExclusiveRedeemablesPerCategoryLimit'] < 1)) {
            $invalidProperties[] = "invalid value for 'applicableExclusiveRedeemablesPerCategoryLimit', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getRedeemablesApplicationModeAllowableValues();
        if (!is_null($this->container['redeemablesApplicationMode']) && !in_array($this->container['redeemablesApplicationMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redeemablesApplicationMode', must be one of '%s'",
                $this->container['redeemablesApplicationMode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRedeemablesSortingRuleAllowableValues();
        if (!is_null($this->container['redeemablesSortingRule']) && !in_array($this->container['redeemablesSortingRule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redeemablesSortingRule', must be one of '%s'",
                $this->container['redeemablesSortingRule'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRedeemablesProductsApplicationModeAllowableValues();
        if (!is_null($this->container['redeemablesProductsApplicationMode']) && !in_array($this->container['redeemablesProductsApplicationMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redeemablesProductsApplicationMode', must be one of '%s'",
                $this->container['redeemablesProductsApplicationMode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRedeemablesNoEffectRuleAllowableValues();
        if (!is_null($this->container['redeemablesNoEffectRule']) && !in_array($this->container['redeemablesNoEffectRule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redeemablesNoEffectRule', must be one of '%s'",
                $this->container['redeemablesNoEffectRule'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redeemablesLimit
     *
     * @return int|null
     */
    public function getRedeemablesLimit()
    {
        return $this->container['redeemablesLimit'];
    }

    /**
     * Sets redeemablesLimit
     *
     * @param int|null $redeemablesLimit Defines how many redeemables can be sent in one stacking request (note: more redeemables means more processing time!).
     *
     * @return self
     */
    public function setRedeemablesLimit($redeemablesLimit)
    {
        if (is_null($redeemablesLimit)) {
            array_push($this->openAPINullablesSetToNull, 'redeemablesLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemablesLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($redeemablesLimit) && ($redeemablesLimit > 30)) {
            throw new \InvalidArgumentException('invalid value for $redeemablesLimit when calling StackingRules., must be smaller than or equal to 30.');
        }
        if (!is_null($redeemablesLimit) && ($redeemablesLimit < 1)) {
            throw new \InvalidArgumentException('invalid value for $redeemablesLimit when calling StackingRules., must be bigger than or equal to 1.');
        }

        $this->container['redeemablesLimit'] = $redeemablesLimit;

        return $this;
    }

    /**
     * Gets applicableRedeemablesLimit
     *
     * @return int|null
     */
    public function getApplicableRedeemablesLimit()
    {
        return $this->container['applicableRedeemablesLimit'];
    }

    /**
     * Sets applicableRedeemablesLimit
     *
     * @param int|null $applicableRedeemablesLimit Defines how many of the sent redeemables will be applied to the order. For example, a user can select 30 discounts but only 5 will be applied to the order and the remaining will be labelled as SKIPPED.
     *
     * @return self
     */
    public function setApplicableRedeemablesLimit($applicableRedeemablesLimit)
    {
        if (is_null($applicableRedeemablesLimit)) {
            array_push($this->openAPINullablesSetToNull, 'applicableRedeemablesLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applicableRedeemablesLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($applicableRedeemablesLimit) && ($applicableRedeemablesLimit > 30)) {
            throw new \InvalidArgumentException('invalid value for $applicableRedeemablesLimit when calling StackingRules., must be smaller than or equal to 30.');
        }
        if (!is_null($applicableRedeemablesLimit) && ($applicableRedeemablesLimit < 1)) {
            throw new \InvalidArgumentException('invalid value for $applicableRedeemablesLimit when calling StackingRules., must be bigger than or equal to 1.');
        }

        $this->container['applicableRedeemablesLimit'] = $applicableRedeemablesLimit;

        return $this;
    }

    /**
     * Gets applicableRedeemablesPerCategoryLimit
     *
     * @return int|null
     */
    public function getApplicableRedeemablesPerCategoryLimit()
    {
        return $this->container['applicableRedeemablesPerCategoryLimit'];
    }

    /**
     * Sets applicableRedeemablesPerCategoryLimit
     *
     * @param int|null $applicableRedeemablesPerCategoryLimit Defines how many redeemables per category can be applied in one request.
     *
     * @return self
     */
    public function setApplicableRedeemablesPerCategoryLimit($applicableRedeemablesPerCategoryLimit)
    {
        if (is_null($applicableRedeemablesPerCategoryLimit)) {
            array_push($this->openAPINullablesSetToNull, 'applicableRedeemablesPerCategoryLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applicableRedeemablesPerCategoryLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($applicableRedeemablesPerCategoryLimit) && ($applicableRedeemablesPerCategoryLimit > 5)) {
            throw new \InvalidArgumentException('invalid value for $applicableRedeemablesPerCategoryLimit when calling StackingRules., must be smaller than or equal to 5.');
        }
        if (!is_null($applicableRedeemablesPerCategoryLimit) && ($applicableRedeemablesPerCategoryLimit < 1)) {
            throw new \InvalidArgumentException('invalid value for $applicableRedeemablesPerCategoryLimit when calling StackingRules., must be bigger than or equal to 1.');
        }

        $this->container['applicableRedeemablesPerCategoryLimit'] = $applicableRedeemablesPerCategoryLimit;

        return $this;
    }

    /**
     * Gets applicableExclusiveRedeemablesLimit
     *
     * @return int|null
     */
    public function getApplicableExclusiveRedeemablesLimit()
    {
        return $this->container['applicableExclusiveRedeemablesLimit'];
    }

    /**
     * Sets applicableExclusiveRedeemablesLimit
     *
     * @param int|null $applicableExclusiveRedeemablesLimit Defines how many redeemables with an exclusive category can be applied in one request.
     *
     * @return self
     */
    public function setApplicableExclusiveRedeemablesLimit($applicableExclusiveRedeemablesLimit)
    {
        if (is_null($applicableExclusiveRedeemablesLimit)) {
            array_push($this->openAPINullablesSetToNull, 'applicableExclusiveRedeemablesLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applicableExclusiveRedeemablesLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($applicableExclusiveRedeemablesLimit) && ($applicableExclusiveRedeemablesLimit > 5)) {
            throw new \InvalidArgumentException('invalid value for $applicableExclusiveRedeemablesLimit when calling StackingRules., must be smaller than or equal to 5.');
        }
        if (!is_null($applicableExclusiveRedeemablesLimit) && ($applicableExclusiveRedeemablesLimit < 1)) {
            throw new \InvalidArgumentException('invalid value for $applicableExclusiveRedeemablesLimit when calling StackingRules., must be bigger than or equal to 1.');
        }

        $this->container['applicableExclusiveRedeemablesLimit'] = $applicableExclusiveRedeemablesLimit;

        return $this;
    }

    /**
     * Gets applicableExclusiveRedeemablesPerCategoryLimit
     *
     * @return int|null
     */
    public function getApplicableExclusiveRedeemablesPerCategoryLimit()
    {
        return $this->container['applicableExclusiveRedeemablesPerCategoryLimit'];
    }

    /**
     * Sets applicableExclusiveRedeemablesPerCategoryLimit
     *
     * @param int|null $applicableExclusiveRedeemablesPerCategoryLimit Defines how many redeemables with an exclusive category per category in stacking rules can be applied in one request.
     *
     * @return self
     */
    public function setApplicableExclusiveRedeemablesPerCategoryLimit($applicableExclusiveRedeemablesPerCategoryLimit)
    {
        if (is_null($applicableExclusiveRedeemablesPerCategoryLimit)) {
            array_push($this->openAPINullablesSetToNull, 'applicableExclusiveRedeemablesPerCategoryLimit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applicableExclusiveRedeemablesPerCategoryLimit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($applicableExclusiveRedeemablesPerCategoryLimit) && ($applicableExclusiveRedeemablesPerCategoryLimit > 5)) {
            throw new \InvalidArgumentException('invalid value for $applicableExclusiveRedeemablesPerCategoryLimit when calling StackingRules., must be smaller than or equal to 5.');
        }
        if (!is_null($applicableExclusiveRedeemablesPerCategoryLimit) && ($applicableExclusiveRedeemablesPerCategoryLimit < 1)) {
            throw new \InvalidArgumentException('invalid value for $applicableExclusiveRedeemablesPerCategoryLimit when calling StackingRules., must be bigger than or equal to 1.');
        }

        $this->container['applicableExclusiveRedeemablesPerCategoryLimit'] = $applicableExclusiveRedeemablesPerCategoryLimit;

        return $this;
    }

    /**
     * Gets exclusiveCategories
     *
     * @return string[]|null
     */
    public function getExclusiveCategories()
    {
        return $this->container['exclusiveCategories'];
    }

    /**
     * Sets exclusiveCategories
     *
     * @param string[]|null $exclusiveCategories Lists all exclusive categories. A redeemable from a campaign with an exclusive category is the only redeemable to be redeemed when applied with redeemables from other campaigns unless these campaigns are exclusive or joint.
     *
     * @return self
     */
    public function setExclusiveCategories($exclusiveCategories)
    {
        if (is_null($exclusiveCategories)) {
            array_push($this->openAPINullablesSetToNull, 'exclusiveCategories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exclusiveCategories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exclusiveCategories'] = $exclusiveCategories;

        return $this;
    }

    /**
     * Gets jointCategories
     *
     * @return string[]|null
     */
    public function getJointCategories()
    {
        return $this->container['jointCategories'];
    }

    /**
     * Sets jointCategories
     *
     * @param string[]|null $jointCategories Lists all joint categories. A campaign with a joint category is always applied regardless of the exclusivity of other campaigns.
     *
     * @return self
     */
    public function setJointCategories($jointCategories)
    {
        if (is_null($jointCategories)) {
            array_push($this->openAPINullablesSetToNull, 'jointCategories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jointCategories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jointCategories'] = $jointCategories;

        return $this;
    }

    /**
     * Gets redeemablesApplicationMode
     *
     * @return string|null
     */
    public function getRedeemablesApplicationMode()
    {
        return $this->container['redeemablesApplicationMode'];
    }

    /**
     * Sets redeemablesApplicationMode
     *
     * @param string|null $redeemablesApplicationMode Defines redeemables application mode.
     *
     * @return self
     */
    public function setRedeemablesApplicationMode($redeemablesApplicationMode)
    {
        if (is_null($redeemablesApplicationMode)) {
            array_push($this->openAPINullablesSetToNull, 'redeemablesApplicationMode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemablesApplicationMode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRedeemablesApplicationModeAllowableValues();
        if (!is_null($redeemablesApplicationMode) && !in_array($redeemablesApplicationMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redeemablesApplicationMode', must be one of '%s'",
                    $redeemablesApplicationMode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redeemablesApplicationMode'] = $redeemablesApplicationMode;

        return $this;
    }

    /**
     * Gets redeemablesSortingRule
     *
     * @return string|null
     */
    public function getRedeemablesSortingRule()
    {
        return $this->container['redeemablesSortingRule'];
    }

    /**
     * Sets redeemablesSortingRule
     *
     * @param string|null $redeemablesSortingRule Defines redeemables sorting rule.
     *
     * @return self
     */
    public function setRedeemablesSortingRule($redeemablesSortingRule)
    {
        if (is_null($redeemablesSortingRule)) {
            array_push($this->openAPINullablesSetToNull, 'redeemablesSortingRule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemablesSortingRule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRedeemablesSortingRuleAllowableValues();
        if (!is_null($redeemablesSortingRule) && !in_array($redeemablesSortingRule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redeemablesSortingRule', must be one of '%s'",
                    $redeemablesSortingRule,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redeemablesSortingRule'] = $redeemablesSortingRule;

        return $this;
    }

    /**
     * Gets redeemablesProductsApplicationMode
     *
     * @return string|null
     */
    public function getRedeemablesProductsApplicationMode()
    {
        return $this->container['redeemablesProductsApplicationMode'];
    }

    /**
     * Sets redeemablesProductsApplicationMode
     *
     * @param string|null $redeemablesProductsApplicationMode Defines redeemables products application mode.
     *
     * @return self
     */
    public function setRedeemablesProductsApplicationMode($redeemablesProductsApplicationMode)
    {
        if (is_null($redeemablesProductsApplicationMode)) {
            array_push($this->openAPINullablesSetToNull, 'redeemablesProductsApplicationMode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemablesProductsApplicationMode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRedeemablesProductsApplicationModeAllowableValues();
        if (!is_null($redeemablesProductsApplicationMode) && !in_array($redeemablesProductsApplicationMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redeemablesProductsApplicationMode', must be one of '%s'",
                    $redeemablesProductsApplicationMode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redeemablesProductsApplicationMode'] = $redeemablesProductsApplicationMode;

        return $this;
    }

    /**
     * Gets redeemablesNoEffectRule
     *
     * @return string|null
     */
    public function getRedeemablesNoEffectRule()
    {
        return $this->container['redeemablesNoEffectRule'];
    }

    /**
     * Sets redeemablesNoEffectRule
     *
     * @param string|null $redeemablesNoEffectRule Defines redeemables no effect rule.
     *
     * @return self
     */
    public function setRedeemablesNoEffectRule($redeemablesNoEffectRule)
    {
        if (is_null($redeemablesNoEffectRule)) {
            array_push($this->openAPINullablesSetToNull, 'redeemablesNoEffectRule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemablesNoEffectRule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRedeemablesNoEffectRuleAllowableValues();
        if (!is_null($redeemablesNoEffectRule) && !in_array($redeemablesNoEffectRule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redeemablesNoEffectRule', must be one of '%s'",
                    $redeemablesNoEffectRule,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redeemablesNoEffectRule'] = $redeemablesNoEffectRule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


