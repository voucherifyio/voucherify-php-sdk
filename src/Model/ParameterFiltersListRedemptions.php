<?php
/**
 * ParameterFiltersListRedemptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ParameterFiltersListRedemptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ParameterFiltersListRedemptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ParameterFiltersListRedemptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'voucher_code' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsVoucherCode',
        'related_object_id' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsRelatedObjectId',
        'related_object_parent_id' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsRelatedObjectParentId',
        'parent_redemption_id' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsParentRedemptionId',
        'failure_code' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsFailureCode',
        'result' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsResult',
        'object' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsObject',
        'customer_id' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsCustomerId',
        'campaign_name' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsCampaignName',
        'user_login' => '\OpenAPI\Client\Model\ParameterFiltersListRedemptionsUserLogin'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'voucher_code' => null,
        'related_object_id' => null,
        'related_object_parent_id' => null,
        'parent_redemption_id' => null,
        'failure_code' => null,
        'result' => null,
        'object' => null,
        'customer_id' => null,
        'campaign_name' => null,
        'user_login' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'voucher_code' => true,
		'related_object_id' => true,
		'related_object_parent_id' => true,
		'parent_redemption_id' => true,
		'failure_code' => true,
		'result' => true,
		'object' => true,
		'customer_id' => true,
		'campaign_name' => true,
		'user_login' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'voucher_code' => 'voucher_code',
        'related_object_id' => 'related_object_id',
        'related_object_parent_id' => 'related_object_parent_id',
        'parent_redemption_id' => 'parent_redemption_id',
        'failure_code' => 'failure_code',
        'result' => 'result',
        'object' => 'object',
        'customer_id' => 'customer_id',
        'campaign_name' => 'campaign_name',
        'user_login' => 'user_login'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'voucher_code' => 'setVoucherCode',
        'related_object_id' => 'setRelatedObjectId',
        'related_object_parent_id' => 'setRelatedObjectParentId',
        'parent_redemption_id' => 'setParentRedemptionId',
        'failure_code' => 'setFailureCode',
        'result' => 'setResult',
        'object' => 'setObject',
        'customer_id' => 'setCustomerId',
        'campaign_name' => 'setCampaignName',
        'user_login' => 'setUserLogin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'voucher_code' => 'getVoucherCode',
        'related_object_id' => 'getRelatedObjectId',
        'related_object_parent_id' => 'getRelatedObjectParentId',
        'parent_redemption_id' => 'getParentRedemptionId',
        'failure_code' => 'getFailureCode',
        'result' => 'getResult',
        'object' => 'getObject',
        'customer_id' => 'getCustomerId',
        'campaign_name' => 'getCampaignName',
        'user_login' => 'getUserLogin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('voucher_code', $data ?? [], null);
        $this->setIfExists('related_object_id', $data ?? [], null);
        $this->setIfExists('related_object_parent_id', $data ?? [], null);
        $this->setIfExists('parent_redemption_id', $data ?? [], null);
        $this->setIfExists('failure_code', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('campaign_name', $data ?? [], null);
        $this->setIfExists('user_login', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets voucher_code
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsVoucherCode|null
     */
    public function getVoucherCode()
    {
        return $this->container['voucher_code'];
    }

    /**
     * Sets voucher_code
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsVoucherCode|null $voucher_code voucher_code
     *
     * @return self
     */
    public function setVoucherCode($voucher_code)
    {
        if (is_null($voucher_code)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_code'] = $voucher_code;

        return $this;
    }

    /**
     * Gets related_object_id
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsRelatedObjectId|null
     */
    public function getRelatedObjectId()
    {
        return $this->container['related_object_id'];
    }

    /**
     * Sets related_object_id
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsRelatedObjectId|null $related_object_id related_object_id
     *
     * @return self
     */
    public function setRelatedObjectId($related_object_id)
    {
        if (is_null($related_object_id)) {
            array_push($this->openAPINullablesSetToNull, 'related_object_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_object_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_object_id'] = $related_object_id;

        return $this;
    }

    /**
     * Gets related_object_parent_id
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsRelatedObjectParentId|null
     */
    public function getRelatedObjectParentId()
    {
        return $this->container['related_object_parent_id'];
    }

    /**
     * Sets related_object_parent_id
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsRelatedObjectParentId|null $related_object_parent_id related_object_parent_id
     *
     * @return self
     */
    public function setRelatedObjectParentId($related_object_parent_id)
    {
        if (is_null($related_object_parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'related_object_parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_object_parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_object_parent_id'] = $related_object_parent_id;

        return $this;
    }

    /**
     * Gets parent_redemption_id
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsParentRedemptionId|null
     */
    public function getParentRedemptionId()
    {
        return $this->container['parent_redemption_id'];
    }

    /**
     * Sets parent_redemption_id
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsParentRedemptionId|null $parent_redemption_id parent_redemption_id
     *
     * @return self
     */
    public function setParentRedemptionId($parent_redemption_id)
    {
        if (is_null($parent_redemption_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_redemption_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_redemption_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_redemption_id'] = $parent_redemption_id;

        return $this;
    }

    /**
     * Gets failure_code
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsFailureCode|null
     */
    public function getFailureCode()
    {
        return $this->container['failure_code'];
    }

    /**
     * Sets failure_code
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsFailureCode|null $failure_code failure_code
     *
     * @return self
     */
    public function setFailureCode($failure_code)
    {
        if (is_null($failure_code)) {
            array_push($this->openAPINullablesSetToNull, 'failure_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failure_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failure_code'] = $failure_code;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsResult|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsResult|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            array_push($this->openAPINullablesSetToNull, 'result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets object
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsObject|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsObject|null $object object
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            array_push($this->openAPINullablesSetToNull, 'object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsCustomerId|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsCustomerId|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets campaign_name
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsCampaignName|null
     */
    public function getCampaignName()
    {
        return $this->container['campaign_name'];
    }

    /**
     * Sets campaign_name
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsCampaignName|null $campaign_name campaign_name
     *
     * @return self
     */
    public function setCampaignName($campaign_name)
    {
        if (is_null($campaign_name)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaign_name'] = $campaign_name;

        return $this;
    }

    /**
     * Gets user_login
     *
     * @return \OpenAPI\Client\Model\ParameterFiltersListRedemptionsUserLogin|null
     */
    public function getUserLogin()
    {
        return $this->container['user_login'];
    }

    /**
     * Sets user_login
     *
     * @param \OpenAPI\Client\Model\ParameterFiltersListRedemptionsUserLogin|null $user_login user_login
     *
     * @return self
     */
    public function setUserLogin($user_login)
    {
        if (is_null($user_login)) {
            array_push($this->openAPINullablesSetToNull, 'user_login');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_login', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_login'] = $user_login;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


