<?php
/**
 * OrderCalculatedItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderCalculatedItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderCalculatedItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderCalculatedItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'skuId' => 'string',
        'productId' => 'string',
        'relatedObject' => 'string',
        'sourceId' => 'string',
        'quantity' => 'int',
        'discountQuantity' => 'int',
        'initialQuantity' => 'int',
        'amount' => 'int',
        'discountAmount' => 'int',
        'appliedDiscountAmount' => 'int',
        'appliedDiscountQuantity' => 'int',
        'appliedQuantity' => 'int',
        'appliedQuantityAmount' => 'int',
        'initialAmount' => 'int',
        'price' => 'int',
        'subtotalAmount' => 'int',
        'product' => '\OpenAPI\Client\Model\OrderCalculatedItemProduct',
        'sku' => '\OpenAPI\Client\Model\OrderCalculatedItemSku',
        'object' => 'string',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'skuId' => null,
        'productId' => null,
        'relatedObject' => null,
        'sourceId' => null,
        'quantity' => null,
        'discountQuantity' => null,
        'initialQuantity' => null,
        'amount' => null,
        'discountAmount' => null,
        'appliedDiscountAmount' => null,
        'appliedDiscountQuantity' => null,
        'appliedQuantity' => null,
        'appliedQuantityAmount' => null,
        'initialAmount' => null,
        'price' => null,
        'subtotalAmount' => null,
        'product' => null,
        'sku' => null,
        'object' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'skuId' => true,
		'productId' => true,
		'relatedObject' => true,
		'sourceId' => true,
		'quantity' => true,
		'discountQuantity' => true,
		'initialQuantity' => true,
		'amount' => true,
		'discountAmount' => true,
		'appliedDiscountAmount' => true,
		'appliedDiscountQuantity' => true,
		'appliedQuantity' => true,
		'appliedQuantityAmount' => true,
		'initialAmount' => true,
		'price' => true,
		'subtotalAmount' => true,
		'product' => true,
		'sku' => true,
		'object' => true,
		'metadata' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'skuId' => 'sku_id',
        'productId' => 'product_id',
        'relatedObject' => 'related_object',
        'sourceId' => 'source_id',
        'quantity' => 'quantity',
        'discountQuantity' => 'discount_quantity',
        'initialQuantity' => 'initial_quantity',
        'amount' => 'amount',
        'discountAmount' => 'discount_amount',
        'appliedDiscountAmount' => 'applied_discount_amount',
        'appliedDiscountQuantity' => 'applied_discount_quantity',
        'appliedQuantity' => 'applied_quantity',
        'appliedQuantityAmount' => 'applied_quantity_amount',
        'initialAmount' => 'initial_amount',
        'price' => 'price',
        'subtotalAmount' => 'subtotal_amount',
        'product' => 'product',
        'sku' => 'sku',
        'object' => 'object',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'skuId' => 'setSkuId',
        'productId' => 'setProductId',
        'relatedObject' => 'setRelatedObject',
        'sourceId' => 'setSourceId',
        'quantity' => 'setQuantity',
        'discountQuantity' => 'setDiscountQuantity',
        'initialQuantity' => 'setInitialQuantity',
        'amount' => 'setAmount',
        'discountAmount' => 'setDiscountAmount',
        'appliedDiscountAmount' => 'setAppliedDiscountAmount',
        'appliedDiscountQuantity' => 'setAppliedDiscountQuantity',
        'appliedQuantity' => 'setAppliedQuantity',
        'appliedQuantityAmount' => 'setAppliedQuantityAmount',
        'initialAmount' => 'setInitialAmount',
        'price' => 'setPrice',
        'subtotalAmount' => 'setSubtotalAmount',
        'product' => 'setProduct',
        'sku' => 'setSku',
        'object' => 'setObject',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'skuId' => 'getSkuId',
        'productId' => 'getProductId',
        'relatedObject' => 'getRelatedObject',
        'sourceId' => 'getSourceId',
        'quantity' => 'getQuantity',
        'discountQuantity' => 'getDiscountQuantity',
        'initialQuantity' => 'getInitialQuantity',
        'amount' => 'getAmount',
        'discountAmount' => 'getDiscountAmount',
        'appliedDiscountAmount' => 'getAppliedDiscountAmount',
        'appliedDiscountQuantity' => 'getAppliedDiscountQuantity',
        'appliedQuantity' => 'getAppliedQuantity',
        'appliedQuantityAmount' => 'getAppliedQuantityAmount',
        'initialAmount' => 'getInitialAmount',
        'price' => 'getPrice',
        'subtotalAmount' => 'getSubtotalAmount',
        'product' => 'getProduct',
        'sku' => 'getSku',
        'object' => 'getObject',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RELATED_OBJECT_PRODUCT = 'product';
    public const RELATED_OBJECT_SKU = 'sku';
    public const OBJECT_ORDER_ITEM = 'order_item';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelatedObjectAllowableValues()
    {
        return [
            self::RELATED_OBJECT_PRODUCT,
            self::RELATED_OBJECT_SKU,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_ORDER_ITEM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('skuId', $data ?? [], null);
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('relatedObject', $data ?? [], null);
        $this->setIfExists('sourceId', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('discountQuantity', $data ?? [], null);
        $this->setIfExists('initialQuantity', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('discountAmount', $data ?? [], null);
        $this->setIfExists('appliedDiscountAmount', $data ?? [], null);
        $this->setIfExists('appliedDiscountQuantity', $data ?? [], null);
        $this->setIfExists('appliedQuantity', $data ?? [], null);
        $this->setIfExists('appliedQuantityAmount', $data ?? [], null);
        $this->setIfExists('initialAmount', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('subtotalAmount', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], 'order_item');
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRelatedObjectAllowableValues();
        if (!is_null($this->container['relatedObject']) && !in_array($this->container['relatedObject'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'relatedObject', must be one of '%s'",
                $this->container['relatedObject'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier of the order line item.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets skuId
     *
     * @return string|null
     */
    public function getSkuId()
    {
        return $this->container['skuId'];
    }

    /**
     * Sets skuId
     *
     * @param string|null $skuId Unique identifier of the SKU. It is assigned by Voucherify.
     *
     * @return self
     */
    public function setSkuId($skuId)
    {
        if (is_null($skuId)) {
            array_push($this->openAPINullablesSetToNull, 'skuId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skuId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skuId'] = $skuId;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param string|null $productId Unique identifier of the product. It is assigned by Voucherify.
     *
     * @return self
     */
    public function setProductId($productId)
    {
        if (is_null($productId)) {
            array_push($this->openAPINullablesSetToNull, 'productId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets relatedObject
     *
     * @return string|null
     */
    public function getRelatedObject()
    {
        return $this->container['relatedObject'];
    }

    /**
     * Sets relatedObject
     *
     * @param string|null $relatedObject Used along with the source_id property, can be set to either sku or product.
     *
     * @return self
     */
    public function setRelatedObject($relatedObject)
    {
        if (is_null($relatedObject)) {
            array_push($this->openAPINullablesSetToNull, 'relatedObject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relatedObject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRelatedObjectAllowableValues();
        if (!is_null($relatedObject) && !in_array($relatedObject, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'relatedObject', must be one of '%s'",
                    $relatedObject,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['relatedObject'] = $relatedObject;

        return $this;
    }

    /**
     * Gets sourceId
     *
     * @return string|null
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string|null $sourceId The merchant's product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service.
     *
     * @return self
     */
    public function setSourceId($sourceId)
    {
        if (is_null($sourceId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity The quantity of the particular item in the cart.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets discountQuantity
     *
     * @return int|null
     */
    public function getDiscountQuantity()
    {
        return $this->container['discountQuantity'];
    }

    /**
     * Sets discountQuantity
     *
     * @param int|null $discountQuantity Number of dicounted items.
     *
     * @return self
     */
    public function setDiscountQuantity($discountQuantity)
    {
        if (is_null($discountQuantity)) {
            array_push($this->openAPINullablesSetToNull, 'discountQuantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discountQuantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discountQuantity'] = $discountQuantity;

        return $this;
    }

    /**
     * Gets initialQuantity
     *
     * @return int|null
     */
    public function getInitialQuantity()
    {
        return $this->container['initialQuantity'];
    }

    /**
     * Sets initialQuantity
     *
     * @param int|null $initialQuantity A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items' quantity.
     *
     * @return self
     */
    public function setInitialQuantity($initialQuantity)
    {
        if (is_null($initialQuantity)) {
            array_push($this->openAPINullablesSetToNull, 'initialQuantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initialQuantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['initialQuantity'] = $initialQuantity;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount The total amount of the order item (price * quantity).
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            array_push($this->openAPINullablesSetToNull, 'amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets discountAmount
     *
     * @return int|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discountAmount'];
    }

    /**
     * Sets discountAmount
     *
     * @param int|null $discountAmount Sum of all order-item-level discounts applied to the order.
     *
     * @return self
     */
    public function setDiscountAmount($discountAmount)
    {
        if (is_null($discountAmount)) {
            array_push($this->openAPINullablesSetToNull, 'discountAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discountAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discountAmount'] = $discountAmount;

        return $this;
    }

    /**
     * Gets appliedDiscountAmount
     *
     * @return int|null
     */
    public function getAppliedDiscountAmount()
    {
        return $this->container['appliedDiscountAmount'];
    }

    /**
     * Sets appliedDiscountAmount
     *
     * @param int|null $appliedDiscountAmount This field shows the order-level discount applied.
     *
     * @return self
     */
    public function setAppliedDiscountAmount($appliedDiscountAmount)
    {
        if (is_null($appliedDiscountAmount)) {
            array_push($this->openAPINullablesSetToNull, 'appliedDiscountAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appliedDiscountAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appliedDiscountAmount'] = $appliedDiscountAmount;

        return $this;
    }

    /**
     * Gets appliedDiscountQuantity
     *
     * @return int|null
     */
    public function getAppliedDiscountQuantity()
    {
        return $this->container['appliedDiscountQuantity'];
    }

    /**
     * Sets appliedDiscountQuantity
     *
     * @param int|null $appliedDiscountQuantity Number of the discounted items applied in the transaction.
     *
     * @return self
     */
    public function setAppliedDiscountQuantity($appliedDiscountQuantity)
    {
        if (is_null($appliedDiscountQuantity)) {
            array_push($this->openAPINullablesSetToNull, 'appliedDiscountQuantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appliedDiscountQuantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appliedDiscountQuantity'] = $appliedDiscountQuantity;

        return $this;
    }

    /**
     * Gets appliedQuantity
     *
     * @return int|null
     */
    public function getAppliedQuantity()
    {
        return $this->container['appliedQuantity'];
    }

    /**
     * Sets appliedQuantity
     *
     * @param int|null $appliedQuantity Quantity of items changed by the application of a new quantity items. It can be positive when an item is added or negative if an item is replaced.
     *
     * @return self
     */
    public function setAppliedQuantity($appliedQuantity)
    {
        if (is_null($appliedQuantity)) {
            array_push($this->openAPINullablesSetToNull, 'appliedQuantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appliedQuantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appliedQuantity'] = $appliedQuantity;

        return $this;
    }

    /**
     * Gets appliedQuantityAmount
     *
     * @return int|null
     */
    public function getAppliedQuantityAmount()
    {
        return $this->container['appliedQuantityAmount'];
    }

    /**
     * Sets appliedQuantityAmount
     *
     * @param int|null $appliedQuantityAmount Amount for the items changed by the application of a new quantity items. It can be positive when an item is added or negative if an item is replaced.
     *
     * @return self
     */
    public function setAppliedQuantityAmount($appliedQuantityAmount)
    {
        if (is_null($appliedQuantityAmount)) {
            array_push($this->openAPINullablesSetToNull, 'appliedQuantityAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appliedQuantityAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appliedQuantityAmount'] = $appliedQuantityAmount;

        return $this;
    }

    /**
     * Gets initialAmount
     *
     * @return int|null
     */
    public function getInitialAmount()
    {
        return $this->container['initialAmount'];
    }

    /**
     * Sets initialAmount
     *
     * @param int|null $initialAmount A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.
     *
     * @return self
     */
    public function setInitialAmount($initialAmount)
    {
        if (is_null($initialAmount)) {
            array_push($this->openAPINullablesSetToNull, 'initialAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initialAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['initialAmount'] = $initialAmount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int|null $price Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets subtotalAmount
     *
     * @return int|null
     */
    public function getSubtotalAmount()
    {
        return $this->container['subtotalAmount'];
    }

    /**
     * Sets subtotalAmount
     *
     * @param int|null $subtotalAmount Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the `amount`.    `subtotal_amount`=`amount`-`applied_discount_amount`
     *
     * @return self
     */
    public function setSubtotalAmount($subtotalAmount)
    {
        if (is_null($subtotalAmount)) {
            array_push($this->openAPINullablesSetToNull, 'subtotalAmount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtotalAmount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subtotalAmount'] = $subtotalAmount;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Model\OrderCalculatedItemProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Model\OrderCalculatedItemProduct|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return \OpenAPI\Client\Model\OrderCalculatedItemSku|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param \OpenAPI\Client\Model\OrderCalculatedItemSku|null $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            array_push($this->openAPINullablesSetToNull, 'sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object The type of the object represented by JSON.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            array_push($this->openAPINullablesSetToNull, 'object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($object) && !in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata A set of custom key/value pairs that you can attach to an SKU. It can be useful for storing additional information about the SKU in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


