<?php
/**
 * RedemptionsListResponseBodyRedemptionsItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RedemptionsListResponseBodyRedemptionsItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RedemptionsListResponseBodyRedemptionsItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RedemptionsListResponseBodyRedemptionsItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'object' => 'string',
        'date' => '\DateTime',
        'customerId' => 'string',
        'trackingId' => 'string',
        'metadata' => 'object',
        'amount' => 'int',
        'redemption' => 'string',
        'result' => 'string',
        'status' => 'string',
        'relatedRedemptions' => '\OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions',
        'failureCode' => 'string',
        'failureMessage' => 'string',
        'order' => '\OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemOrder',
        'channel' => '\OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemChannel',
        'customer' => '\OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemCustomer',
        'relatedObjectType' => 'string',
        'relatedObjectId' => 'string',
        'promotionTier' => '\OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemPromotionTier',
        'reward' => '\OpenAPI\Client\Model\RedemptionRewardResult',
        'gift' => '\OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemGift',
        'loyaltyCard' => '\OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemLoyaltyCard',
        'voucher' => '\OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemVoucher',
        'reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'date' => 'date-time',
        'customerId' => null,
        'trackingId' => null,
        'metadata' => null,
        'amount' => null,
        'redemption' => null,
        'result' => null,
        'status' => null,
        'relatedRedemptions' => null,
        'failureCode' => null,
        'failureMessage' => null,
        'order' => null,
        'channel' => null,
        'customer' => null,
        'relatedObjectType' => null,
        'relatedObjectId' => null,
        'promotionTier' => null,
        'reward' => null,
        'gift' => null,
        'loyaltyCard' => null,
        'voucher' => null,
        'reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'object' => false,
		'date' => true,
		'customerId' => true,
		'trackingId' => true,
		'metadata' => false,
		'amount' => false,
		'redemption' => true,
		'result' => true,
		'status' => false,
		'relatedRedemptions' => false,
		'failureCode' => true,
		'failureMessage' => true,
		'order' => false,
		'channel' => false,
		'customer' => false,
		'relatedObjectType' => true,
		'relatedObjectId' => false,
		'promotionTier' => false,
		'reward' => false,
		'gift' => false,
		'loyaltyCard' => false,
		'voucher' => false,
		'reason' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'date' => 'date',
        'customerId' => 'customer_id',
        'trackingId' => 'tracking_id',
        'metadata' => 'metadata',
        'amount' => 'amount',
        'redemption' => 'redemption',
        'result' => 'result',
        'status' => 'status',
        'relatedRedemptions' => 'related_redemptions',
        'failureCode' => 'failure_code',
        'failureMessage' => 'failure_message',
        'order' => 'order',
        'channel' => 'channel',
        'customer' => 'customer',
        'relatedObjectType' => 'related_object_type',
        'relatedObjectId' => 'related_object_id',
        'promotionTier' => 'promotion_tier',
        'reward' => 'reward',
        'gift' => 'gift',
        'loyaltyCard' => 'loyalty_card',
        'voucher' => 'voucher',
        'reason' => 'reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'date' => 'setDate',
        'customerId' => 'setCustomerId',
        'trackingId' => 'setTrackingId',
        'metadata' => 'setMetadata',
        'amount' => 'setAmount',
        'redemption' => 'setRedemption',
        'result' => 'setResult',
        'status' => 'setStatus',
        'relatedRedemptions' => 'setRelatedRedemptions',
        'failureCode' => 'setFailureCode',
        'failureMessage' => 'setFailureMessage',
        'order' => 'setOrder',
        'channel' => 'setChannel',
        'customer' => 'setCustomer',
        'relatedObjectType' => 'setRelatedObjectType',
        'relatedObjectId' => 'setRelatedObjectId',
        'promotionTier' => 'setPromotionTier',
        'reward' => 'setReward',
        'gift' => 'setGift',
        'loyaltyCard' => 'setLoyaltyCard',
        'voucher' => 'setVoucher',
        'reason' => 'setReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'date' => 'getDate',
        'customerId' => 'getCustomerId',
        'trackingId' => 'getTrackingId',
        'metadata' => 'getMetadata',
        'amount' => 'getAmount',
        'redemption' => 'getRedemption',
        'result' => 'getResult',
        'status' => 'getStatus',
        'relatedRedemptions' => 'getRelatedRedemptions',
        'failureCode' => 'getFailureCode',
        'failureMessage' => 'getFailureMessage',
        'order' => 'getOrder',
        'channel' => 'getChannel',
        'customer' => 'getCustomer',
        'relatedObjectType' => 'getRelatedObjectType',
        'relatedObjectId' => 'getRelatedObjectId',
        'promotionTier' => 'getPromotionTier',
        'reward' => 'getReward',
        'gift' => 'getGift',
        'loyaltyCard' => 'getLoyaltyCard',
        'voucher' => 'getVoucher',
        'reason' => 'getReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OBJECT_REDEMPTION = 'redemption';
    public const OBJECT_REDEMPTION_ROLLBACK = 'redemption_rollback';
    public const RESULT_SUCCESS = 'SUCCESS';
    public const RESULT_FAILURE = 'FAILURE';
    public const STATUS_SUCCEEDED = 'SUCCEEDED';
    public const STATUS_FAILED = 'FAILED';
    public const STATUS_ROLLED_BACK = 'ROLLED_BACK';
    public const RELATED_OBJECT_TYPE_VOUCHER = 'voucher';
    public const RELATED_OBJECT_TYPE_PROMOTION_TIER = 'promotion_tier';
    public const RELATED_OBJECT_TYPE_REDEMPTION = 'redemption';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_REDEMPTION,
            self::OBJECT_REDEMPTION_ROLLBACK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCESS,
            self::RESULT_FAILURE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUCCEEDED,
            self::STATUS_FAILED,
            self::STATUS_ROLLED_BACK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelatedObjectTypeAllowableValues()
    {
        return [
            self::RELATED_OBJECT_TYPE_VOUCHER,
            self::RELATED_OBJECT_TYPE_PROMOTION_TIER,
            self::RELATED_OBJECT_TYPE_REDEMPTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('customerId', $data ?? [], null);
        $this->setIfExists('trackingId', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('redemption', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('relatedRedemptions', $data ?? [], null);
        $this->setIfExists('failureCode', $data ?? [], null);
        $this->setIfExists('failureMessage', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('relatedObjectType', $data ?? [], null);
        $this->setIfExists('relatedObjectId', $data ?? [], null);
        $this->setIfExists('promotionTier', $data ?? [], null);
        $this->setIfExists('reward', $data ?? [], null);
        $this->setIfExists('gift', $data ?? [], null);
        $this->setIfExists('loyaltyCard', $data ?? [], null);
        $this->setIfExists('voucher', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'result', must be one of '%s'",
                $this->container['result'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRelatedObjectTypeAllowableValues();
        if (!is_null($this->container['relatedObjectType']) && !in_array($this->container['relatedObjectType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'relatedObjectType', must be one of '%s'",
                $this->container['relatedObjectType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object object
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets customerId
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customerId'];
    }

    /**
     * Sets customerId
     *
     * @param string|null $customerId Unique customer ID of the redeeming customer.
     *
     * @return self
     */
    public function setCustomerId($customerId)
    {
        if (is_null($customerId)) {
            array_push($this->openAPINullablesSetToNull, 'customerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerId'] = $customerId;

        return $this;
    }

    /**
     * Gets trackingId
     *
     * @return string|null
     */
    public function getTrackingId()
    {
        return $this->container['trackingId'];
    }

    /**
     * Sets trackingId
     *
     * @param string|null $trackingId Hashed customer source ID.
     *
     * @return self
     */
    public function setTrackingId($trackingId)
    {
        if (is_null($trackingId)) {
            array_push($this->openAPINullablesSetToNull, 'trackingId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trackingId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trackingId'] = $trackingId;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction. and For gift cards, this represents the number of the credits restored to the card in the rolledback redemption. The number is a negative integer in the smallest currency unit, e.g. -100 cents for $1.00 added back to the card. For loyalty cards, this represents the number of loyalty points restored to the card in the rolledback redemption. The number is a negative integer.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets redemption
     *
     * @return string|null
     */
    public function getRedemption()
    {
        return $this->container['redemption'];
    }

    /**
     * Sets redemption
     *
     * @param string|null $redemption Unique redemption ID of the parent redemption.
     *
     * @return self
     */
    public function setRedemption($redemption)
    {
        if (is_null($redemption)) {
            array_push($this->openAPINullablesSetToNull, 'redemption');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redemption', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redemption'] = $redemption;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result Redemption result.
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            array_push($this->openAPINullablesSetToNull, 'result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($result) && !in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'result', must be one of '%s'",
                    $result,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets relatedRedemptions
     *
     * @return \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions|null
     */
    public function getRelatedRedemptions()
    {
        return $this->container['relatedRedemptions'];
    }

    /**
     * Sets relatedRedemptions
     *
     * @param \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemRelatedRedemptions|null $relatedRedemptions relatedRedemptions
     *
     * @return self
     */
    public function setRelatedRedemptions($relatedRedemptions)
    {
        if (is_null($relatedRedemptions)) {
            throw new \InvalidArgumentException('non-nullable relatedRedemptions cannot be null');
        }
        $this->container['relatedRedemptions'] = $relatedRedemptions;

        return $this;
    }

    /**
     * Gets failureCode
     *
     * @return string|null
     */
    public function getFailureCode()
    {
        return $this->container['failureCode'];
    }

    /**
     * Sets failureCode
     *
     * @param string|null $failureCode If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed.
     *
     * @return self
     */
    public function setFailureCode($failureCode)
    {
        if (is_null($failureCode)) {
            array_push($this->openAPINullablesSetToNull, 'failureCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failureCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failureCode'] = $failureCode;

        return $this;
    }

    /**
     * Gets failureMessage
     *
     * @return string|null
     */
    public function getFailureMessage()
    {
        return $this->container['failureMessage'];
    }

    /**
     * Sets failureMessage
     *
     * @param string|null $failureMessage If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed.
     *
     * @return self
     */
    public function setFailureMessage($failureMessage)
    {
        if (is_null($failureMessage)) {
            array_push($this->openAPINullablesSetToNull, 'failureMessage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failureMessage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failureMessage'] = $failureMessage;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemOrder|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemOrder|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets relatedObjectType
     *
     * @return string|null
     */
    public function getRelatedObjectType()
    {
        return $this->container['relatedObjectType'];
    }

    /**
     * Sets relatedObjectType
     *
     * @param string|null $relatedObjectType Defines the related object.
     *
     * @return self
     */
    public function setRelatedObjectType($relatedObjectType)
    {
        if (is_null($relatedObjectType)) {
            array_push($this->openAPINullablesSetToNull, 'relatedObjectType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relatedObjectType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRelatedObjectTypeAllowableValues();
        if (!is_null($relatedObjectType) && !in_array($relatedObjectType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'relatedObjectType', must be one of '%s'",
                    $relatedObjectType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['relatedObjectType'] = $relatedObjectType;

        return $this;
    }

    /**
     * Gets relatedObjectId
     *
     * @return string|null
     */
    public function getRelatedObjectId()
    {
        return $this->container['relatedObjectId'];
    }

    /**
     * Sets relatedObjectId
     *
     * @param string|null $relatedObjectId relatedObjectId
     *
     * @return self
     */
    public function setRelatedObjectId($relatedObjectId)
    {
        if (is_null($relatedObjectId)) {
            throw new \InvalidArgumentException('non-nullable relatedObjectId cannot be null');
        }
        $this->container['relatedObjectId'] = $relatedObjectId;

        return $this;
    }

    /**
     * Gets promotionTier
     *
     * @return \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemPromotionTier|null
     */
    public function getPromotionTier()
    {
        return $this->container['promotionTier'];
    }

    /**
     * Sets promotionTier
     *
     * @param \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemPromotionTier|null $promotionTier promotionTier
     *
     * @return self
     */
    public function setPromotionTier($promotionTier)
    {
        if (is_null($promotionTier)) {
            throw new \InvalidArgumentException('non-nullable promotionTier cannot be null');
        }
        $this->container['promotionTier'] = $promotionTier;

        return $this;
    }

    /**
     * Gets reward
     *
     * @return \OpenAPI\Client\Model\RedemptionRewardResult|null
     */
    public function getReward()
    {
        return $this->container['reward'];
    }

    /**
     * Sets reward
     *
     * @param \OpenAPI\Client\Model\RedemptionRewardResult|null $reward reward
     *
     * @return self
     */
    public function setReward($reward)
    {
        if (is_null($reward)) {
            throw new \InvalidArgumentException('non-nullable reward cannot be null');
        }
        $this->container['reward'] = $reward;

        return $this;
    }

    /**
     * Gets gift
     *
     * @return \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemGift|null
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     *
     * @param \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemGift|null $gift gift
     *
     * @return self
     */
    public function setGift($gift)
    {
        if (is_null($gift)) {
            throw new \InvalidArgumentException('non-nullable gift cannot be null');
        }
        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets loyaltyCard
     *
     * @return \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemLoyaltyCard|null
     */
    public function getLoyaltyCard()
    {
        return $this->container['loyaltyCard'];
    }

    /**
     * Sets loyaltyCard
     *
     * @param \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemLoyaltyCard|null $loyaltyCard loyaltyCard
     *
     * @return self
     */
    public function setLoyaltyCard($loyaltyCard)
    {
        if (is_null($loyaltyCard)) {
            throw new \InvalidArgumentException('non-nullable loyaltyCard cannot be null');
        }
        $this->container['loyaltyCard'] = $loyaltyCard;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemVoucher|null
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param \OpenAPI\Client\Model\RedemptionsListResponseBodyRedemptionsItemVoucher|null $voucher voucher
     *
     * @return self
     */
    public function setVoucher($voucher)
    {
        if (is_null($voucher)) {
            throw new \InvalidArgumentException('non-nullable voucher cannot be null');
        }
        $this->container['voucher'] = $voucher;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason System generated cause for the redemption being invalid in the context of the provided parameters.
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            array_push($this->openAPINullablesSetToNull, 'reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reason'] = $reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


