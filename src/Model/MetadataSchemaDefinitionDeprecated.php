<?php
/**
 * MetadataSchemaDefinitionDeprecated
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MetadataSchemaDefinitionDeprecated Class Doc Comment
 *
 * @category Class
 * @description Custom definition name. This is also shown in **Project Settings** &gt; **Metadata Schema** in the Voucherify Dashboard.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MetadataSchemaDefinitionDeprecated implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MetadataSchemaDefinitionDeprecated';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'array' => 'bool',
        'optional' => 'bool',
        'objectType' => 'string',
        'eq' => 'mixed[]',
        'ne' => 'mixed[]',
        'lt' => 'int',
        'lte' => 'int',
        'gt' => 'int',
        'gte' => 'int',
        'deleted' => 'bool',
        'maxLength' => 'int',
        'minLength' => 'int',
        'exactLength' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'array' => null,
        'optional' => null,
        'objectType' => null,
        'eq' => null,
        'ne' => null,
        'lt' => null,
        'lte' => null,
        'gt' => null,
        'gte' => null,
        'deleted' => null,
        'maxLength' => null,
        'minLength' => null,
        'exactLength' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => true,
		'array' => true,
		'optional' => true,
		'objectType' => true,
		'eq' => true,
		'ne' => true,
		'lt' => true,
		'lte' => true,
		'gt' => true,
		'gte' => true,
		'deleted' => true,
		'maxLength' => true,
		'minLength' => true,
		'exactLength' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'array' => 'array',
        'optional' => 'optional',
        'objectType' => 'objectType',
        'eq' => 'eq',
        'ne' => 'ne',
        'lt' => 'lt',
        'lte' => 'lte',
        'gt' => 'gt',
        'gte' => 'gte',
        'deleted' => 'deleted',
        'maxLength' => 'maxLength',
        'minLength' => 'minLength',
        'exactLength' => 'exactLength'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'array' => 'setArray',
        'optional' => 'setOptional',
        'objectType' => 'setObjectType',
        'eq' => 'setEq',
        'ne' => 'setNe',
        'lt' => 'setLt',
        'lte' => 'setLte',
        'gt' => 'setGt',
        'gte' => 'setGte',
        'deleted' => 'setDeleted',
        'maxLength' => 'setMaxLength',
        'minLength' => 'setMinLength',
        'exactLength' => 'setExactLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'array' => 'getArray',
        'optional' => 'getOptional',
        'objectType' => 'getObjectType',
        'eq' => 'getEq',
        'ne' => 'getNe',
        'lt' => 'getLt',
        'lte' => 'getLte',
        'gt' => 'getGt',
        'gte' => 'getGte',
        'deleted' => 'getDeleted',
        'maxLength' => 'getMaxLength',
        'minLength' => 'getMinLength',
        'exactLength' => 'getExactLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_STRING = 'string';
    public const TYPE_NUMBER = 'number';
    public const TYPE_OBJECT = 'object';
    public const TYPE_DATE = 'date';
    public const TYPE_DATETIME = 'datetime';
    public const TYPE_GEOPOINT = 'geopoint';
    public const TYPE_BOOLEAN = 'boolean';
    public const TYPE_IMAGE_URL = 'image_url';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_STRING,
            self::TYPE_NUMBER,
            self::TYPE_OBJECT,
            self::TYPE_DATE,
            self::TYPE_DATETIME,
            self::TYPE_GEOPOINT,
            self::TYPE_BOOLEAN,
            self::TYPE_IMAGE_URL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('array', $data ?? [], null);
        $this->setIfExists('optional', $data ?? [], null);
        $this->setIfExists('objectType', $data ?? [], null);
        $this->setIfExists('eq', $data ?? [], null);
        $this->setIfExists('ne', $data ?? [], null);
        $this->setIfExists('lt', $data ?? [], null);
        $this->setIfExists('lte', $data ?? [], null);
        $this->setIfExists('gt', $data ?? [], null);
        $this->setIfExists('gte', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('maxLength', $data ?? [], null);
        $this->setIfExists('minLength', $data ?? [], null);
        $this->setIfExists('exactLength', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets array
     *
     * @return bool|null
     */
    public function getArray()
    {
        return $this->container['array'];
    }

    /**
     * Sets array
     *
     * @param bool|null $array Indicates whether the definition is an array.
     *
     * @return self
     */
    public function setArray($array)
    {
        if (is_null($array)) {
            array_push($this->openAPINullablesSetToNull, 'array');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('array', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['array'] = $array;

        return $this;
    }

    /**
     * Gets optional
     *
     * @return bool|null
     */
    public function getOptional()
    {
        return $this->container['optional'];
    }

    /**
     * Sets optional
     *
     * @param bool|null $optional Indicates whether this definition is optional or not optional for the resource.
     *
     * @return self
     */
    public function setOptional($optional)
    {
        if (is_null($optional)) {
            array_push($this->openAPINullablesSetToNull, 'optional');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('optional', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['optional'] = $optional;

        return $this;
    }

    /**
     * Gets objectType
     *
     * @return string|null
     */
    public function getObjectType()
    {
        return $this->container['objectType'];
    }

    /**
     * Sets objectType
     *
     * @param string|null $objectType Returns the name of the custom resource if the resource was previously defined in the Dashboard as a custom (non-standard) Nested object.
     *
     * @return self
     */
    public function setObjectType($objectType)
    {
        if (is_null($objectType)) {
            array_push($this->openAPINullablesSetToNull, 'objectType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('objectType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['objectType'] = $objectType;

        return $this;
    }

    /**
     * Gets eq
     *
     * @return mixed[]|null
     */
    public function getEq()
    {
        return $this->container['eq'];
    }

    /**
     * Sets eq
     *
     * @param mixed[]|null $eq Array of possible values when the setting for `is equal to any of` in the Dashboard is defined explicitly.
     *
     * @return self
     */
    public function setEq($eq)
    {
        if (is_null($eq)) {
            array_push($this->openAPINullablesSetToNull, 'eq');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eq', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eq'] = $eq;

        return $this;
    }

    /**
     * Gets ne
     *
     * @return mixed[]|null
     */
    public function getNe()
    {
        return $this->container['ne'];
    }

    /**
     * Sets ne
     *
     * @param mixed[]|null $ne Array of values that are not allowed when the setting for `is not equal to any of` in the Dashboard is defined explicitly.
     *
     * @return self
     */
    public function setNe($ne)
    {
        if (is_null($ne)) {
            array_push($this->openAPINullablesSetToNull, 'ne');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ne', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ne'] = $ne;

        return $this;
    }

    /**
     * Gets lt
     *
     * @return int|null
     */
    public function getLt()
    {
        return $this->container['lt'];
    }

    /**
     * Sets lt
     *
     * @param int|null $lt A property of `number` type must have `less than` this value.
     *
     * @return self
     */
    public function setLt($lt)
    {
        if (is_null($lt)) {
            array_push($this->openAPINullablesSetToNull, 'lt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lt'] = $lt;

        return $this;
    }

    /**
     * Gets lte
     *
     * @return int|null
     */
    public function getLte()
    {
        return $this->container['lte'];
    }

    /**
     * Sets lte
     *
     * @param int|null $lte A property of `number` type must be `less than or equal` to this value.
     *
     * @return self
     */
    public function setLte($lte)
    {
        if (is_null($lte)) {
            array_push($this->openAPINullablesSetToNull, 'lte');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lte', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lte'] = $lte;

        return $this;
    }

    /**
     * Gets gt
     *
     * @return int|null
     */
    public function getGt()
    {
        return $this->container['gt'];
    }

    /**
     * Sets gt
     *
     * @param int|null $gt A property of `number` type must be `greater than` this value.
     *
     * @return self
     */
    public function setGt($gt)
    {
        if (is_null($gt)) {
            array_push($this->openAPINullablesSetToNull, 'gt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gt'] = $gt;

        return $this;
    }

    /**
     * Gets gte
     *
     * @return int|null
     */
    public function getGte()
    {
        return $this->container['gte'];
    }

    /**
     * Sets gte
     *
     * @param int|null $gte A property of `number` type must be `greater than or equal` to this value.
     *
     * @return self
     */
    public function setGte($gte)
    {
        if (is_null($gte)) {
            array_push($this->openAPINullablesSetToNull, 'gte');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gte', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gte'] = $gte;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Indicates whether the definition was deleted from the schema.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            array_push($this->openAPINullablesSetToNull, 'deleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets maxLength
     *
     * @return int|null
     */
    public function getMaxLength()
    {
        return $this->container['maxLength'];
    }

    /**
     * Sets maxLength
     *
     * @param int|null $maxLength Value for maximum length when the setting for `has maximum length of` in the Dashboard is defined explicitly.
     *
     * @return self
     */
    public function setMaxLength($maxLength)
    {
        if (is_null($maxLength)) {
            array_push($this->openAPINullablesSetToNull, 'maxLength');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxLength', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxLength'] = $maxLength;

        return $this;
    }

    /**
     * Gets minLength
     *
     * @return int|null
     */
    public function getMinLength()
    {
        return $this->container['minLength'];
    }

    /**
     * Sets minLength
     *
     * @param int|null $minLength Value indicating minimum length when the setting for `has minimum length of` in the Dashboard is defined explicitly.
     *
     * @return self
     */
    public function setMinLength($minLength)
    {
        if (is_null($minLength)) {
            array_push($this->openAPINullablesSetToNull, 'minLength');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minLength', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minLength'] = $minLength;

        return $this;
    }

    /**
     * Gets exactLength
     *
     * @return int|null
     */
    public function getExactLength()
    {
        return $this->container['exactLength'];
    }

    /**
     * Sets exactLength
     *
     * @param int|null $exactLength Value indicating exact length when the setting for `has exact length of` in the Dashboard is defined explicitly.
     *
     * @return self
     */
    public function setExactLength($exactLength)
    {
        if (is_null($exactLength)) {
            array_push($this->openAPINullablesSetToNull, 'exactLength');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exactLength', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exactLength'] = $exactLength;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


