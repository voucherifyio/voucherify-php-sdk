<?php
/**
 * ValidationRulesUpdateRequestBody
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ValidationRulesUpdateRequestBody Class Doc Comment
 *
 * @category Class
 * @description Response body schema for **PUT** &#x60;v1/validation-rules/{validationRuleId}&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ValidationRulesUpdateRequestBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ValidationRulesUpdateRequestBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'rules' => 'object',
        'error' => '\OpenAPI\Client\Model\ValidationRulesUpdateRequestBodyError',
        'applicable_to' => '\OpenAPI\Client\Model\ValidationRulesUpdateRequestBodyApplicableTo',
        'type' => 'string',
        'context_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'rules' => null,
        'error' => null,
        'applicable_to' => null,
        'type' => null,
        'context_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'rules' => false,
		'error' => true,
		'applicable_to' => true,
		'type' => true,
		'context_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'rules' => 'rules',
        'error' => 'error',
        'applicable_to' => 'applicable_to',
        'type' => 'type',
        'context_type' => 'context_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'rules' => 'setRules',
        'error' => 'setError',
        'applicable_to' => 'setApplicableTo',
        'type' => 'setType',
        'context_type' => 'setContextType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'rules' => 'getRules',
        'error' => 'getError',
        'applicable_to' => 'getApplicableTo',
        'type' => 'getType',
        'context_type' => 'getContextType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_EXPRESSION = 'expression';
    public const TYPE_BASIC = 'basic';
    public const TYPE_ADVANCED = 'advanced';
    public const TYPE_COMPLEX = 'complex';
    public const CONTEXT_TYPE_EARNING_RULE_ORDER_PAID = 'earning_rule.order.paid';
    public const CONTEXT_TYPE_EARNING_RULE_CUSTOM_EVENT = 'earning_rule.custom_event';
    public const CONTEXT_TYPE_EARNING_RULE_CUSTOMER_SEGMENT_ENTERED = 'earning_rule.customer.segment.entered';
    public const CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_JOINED = 'earning_rule.customer.tier.joined';
    public const CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_LEFT = 'earning_rule.customer.tier.left';
    public const CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_UPGRADED = 'earning_rule.customer.tier.upgraded';
    public const CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_DOWNGRADED = 'earning_rule.customer.tier.downgraded';
    public const CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_PROLONGED = 'earning_rule.customer.tier.prolonged';
    public const CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS = 'campaign.discount_coupons';
    public const CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ORDER = 'campaign.discount_coupons.discount.apply_to_order';
    public const CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ITEMS = 'campaign.discount_coupons.discount.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY = 'campaign.discount_coupons.discount.apply_to_items_proportionally';
    public const CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY = 'campaign.discount_coupons.discount.apply_to_items_proportionally_by_quantity';
    public const CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ITEMS_BY_QUANTITY = 'campaign.discount_coupons.discount.apply_to_items_by_quantity';
    public const CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_FIXED_APPLY_TO_ITEMS = 'campaign.discount_coupons.discount.fixed.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_PERCENT_APPLY_TO_ITEMS = 'campaign.discount_coupons.discount.percent.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_GIFT_VOUCHERS = 'campaign.gift_vouchers';
    public const CONTEXT_TYPE_CAMPAIGN_GIFT_VOUCHERS_GIFT_APPLY_TO_ORDER = 'campaign.gift_vouchers.gift.apply_to_order';
    public const CONTEXT_TYPE_CAMPAIGN_GIFT_VOUCHERS_GIFT_APPLY_TO_ITEMS = 'campaign.gift_vouchers.gift.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM = 'campaign.referral_program';
    public const CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ORDER = 'campaign.referral_program.discount.apply_to_order';
    public const CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ITEMS = 'campaign.referral_program.discount.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY = 'campaign.referral_program.discount.apply_to_items_proportionally';
    public const CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY = 'campaign.referral_program.discount.apply_to_items_proportionally_by_quantity';
    public const CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ITEMS_BY_QUANTITY = 'campaign.referral_program.discount.apply_to_items_by_quantity';
    public const CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_FIXED_APPLY_TO_ITEMS = 'campaign.referral_program.discount.fixed.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_PERCENT_APPLY_TO_ITEMS = 'campaign.referral_program.discount.percent.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_PROMOTION = 'campaign.promotion';
    public const CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ORDER = 'campaign.promotion.discount.apply_to_order';
    public const CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ITEMS = 'campaign.promotion.discount.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY = 'campaign.promotion.discount.apply_to_items_proportionally';
    public const CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY = 'campaign.promotion.discount.apply_to_items_proportionally_by_quantity';
    public const CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ITEMS_BY_QUANTITY = 'campaign.promotion.discount.apply_to_items_by_quantity';
    public const CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_FIXED_APPLY_TO_ITEMS = 'campaign.promotion.discount.fixed.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_PERCENT_APPLY_TO_ITEMS = 'campaign.promotion.discount.percent.apply_to_items';
    public const CONTEXT_TYPE_CAMPAIGN_LOYALTY_PROGRAM = 'campaign.loyalty_program';
    public const CONTEXT_TYPE_CAMPAIGN_LUCKY_DRAW = 'campaign.lucky_draw';
    public const CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER = 'voucher.discount_voucher';
    public const CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ORDER = 'voucher.discount_voucher.discount.apply_to_order';
    public const CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ITEMS = 'voucher.discount_voucher.discount.apply_to_items';
    public const CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY = 'voucher.discount_voucher.discount.apply_to_items_proportionally';
    public const CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY = 'voucher.discount_voucher.discount.apply_to_items_proportionally_by_quantity';
    public const CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ITEMS_BY_QUANTITY = 'voucher.discount_voucher.discount.apply_to_items_by_quantity';
    public const CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_FIXED_APPLY_TO_ITEMS = 'voucher.discount_voucher.discount.fixed.apply_to_items';
    public const CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_PERCENT_APPLY_TO_ITEMS = 'voucher.discount_voucher.discount.percent.apply_to_items';
    public const CONTEXT_TYPE_VOUCHER_GIFT_VOUCHER = 'voucher.gift_voucher';
    public const CONTEXT_TYPE_VOUCHER_GIFT_VOUCHER_GIFT_APPLY_TO_ORDER = 'voucher.gift_voucher.gift.apply_to_order';
    public const CONTEXT_TYPE_VOUCHER_GIFT_VOUCHER_GIFT_APPLY_TO_ITEMS = 'voucher.gift_voucher.gift.apply_to_items';
    public const CONTEXT_TYPE_VOUCHER_LOYALTY_CARD = 'voucher.loyalty_card';
    public const CONTEXT_TYPE_VOUCHER_LUCKY_DRAW_CODE = 'voucher.lucky_draw_code';
    public const CONTEXT_TYPE_DISTRIBUTION_CUSTOM_EVENT = 'distribution.custom_event';
    public const CONTEXT_TYPE_DISTRIBUTION_ORDER_PAID = 'distribution.order.paid';
    public const CONTEXT_TYPE_DISTRIBUTION_ORDER_CREATED = 'distribution.order.created';
    public const CONTEXT_TYPE_DISTRIBUTION_ORDER_CANCELED = 'distribution.order.canceled';
    public const CONTEXT_TYPE_DISTRIBUTION_ORDER_UPDATED = 'distribution.order.updated';
    public const CONTEXT_TYPE_REWARD_ASSIGNMENT_PAY_WITH_POINTS = 'reward_assignment.pay_with_points';
    public const CONTEXT_TYPE__GLOBAL = 'global';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EXPRESSION,
            self::TYPE_BASIC,
            self::TYPE_ADVANCED,
            self::TYPE_COMPLEX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContextTypeAllowableValues()
    {
        return [
            self::CONTEXT_TYPE_EARNING_RULE_ORDER_PAID,
            self::CONTEXT_TYPE_EARNING_RULE_CUSTOM_EVENT,
            self::CONTEXT_TYPE_EARNING_RULE_CUSTOMER_SEGMENT_ENTERED,
            self::CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_JOINED,
            self::CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_LEFT,
            self::CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_UPGRADED,
            self::CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_DOWNGRADED,
            self::CONTEXT_TYPE_EARNING_RULE_CUSTOMER_TIER_PROLONGED,
            self::CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS,
            self::CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ORDER,
            self::CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY,
            self::CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY,
            self::CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_APPLY_TO_ITEMS_BY_QUANTITY,
            self::CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_FIXED_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_DISCOUNT_COUPONS_DISCOUNT_PERCENT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_GIFT_VOUCHERS,
            self::CONTEXT_TYPE_CAMPAIGN_GIFT_VOUCHERS_GIFT_APPLY_TO_ORDER,
            self::CONTEXT_TYPE_CAMPAIGN_GIFT_VOUCHERS_GIFT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM,
            self::CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ORDER,
            self::CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY,
            self::CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY,
            self::CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_APPLY_TO_ITEMS_BY_QUANTITY,
            self::CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_FIXED_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_REFERRAL_PROGRAM_DISCOUNT_PERCENT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_PROMOTION,
            self::CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ORDER,
            self::CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY,
            self::CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY,
            self::CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_APPLY_TO_ITEMS_BY_QUANTITY,
            self::CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_FIXED_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_PROMOTION_DISCOUNT_PERCENT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_CAMPAIGN_LOYALTY_PROGRAM,
            self::CONTEXT_TYPE_CAMPAIGN_LUCKY_DRAW,
            self::CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER,
            self::CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ORDER,
            self::CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY,
            self::CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY,
            self::CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_APPLY_TO_ITEMS_BY_QUANTITY,
            self::CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_FIXED_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_VOUCHER_DISCOUNT_VOUCHER_DISCOUNT_PERCENT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_VOUCHER_GIFT_VOUCHER,
            self::CONTEXT_TYPE_VOUCHER_GIFT_VOUCHER_GIFT_APPLY_TO_ORDER,
            self::CONTEXT_TYPE_VOUCHER_GIFT_VOUCHER_GIFT_APPLY_TO_ITEMS,
            self::CONTEXT_TYPE_VOUCHER_LOYALTY_CARD,
            self::CONTEXT_TYPE_VOUCHER_LUCKY_DRAW_CODE,
            self::CONTEXT_TYPE_DISTRIBUTION_CUSTOM_EVENT,
            self::CONTEXT_TYPE_DISTRIBUTION_ORDER_PAID,
            self::CONTEXT_TYPE_DISTRIBUTION_ORDER_CREATED,
            self::CONTEXT_TYPE_DISTRIBUTION_ORDER_CANCELED,
            self::CONTEXT_TYPE_DISTRIBUTION_ORDER_UPDATED,
            self::CONTEXT_TYPE_REWARD_ASSIGNMENT_PAY_WITH_POINTS,
            self::CONTEXT_TYPE__GLOBAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('rules', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('applicable_to', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'expression');
        $this->setIfExists('context_type', $data ?? [], 'global');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContextTypeAllowableValues();
        if (!is_null($this->container['context_type']) && !in_array($this->container['context_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'context_type', must be one of '%s'",
                $this->container['context_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Custom, unique name for set of validation rules.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return object|null
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param object|null $rules Contains all the rule definitions for the validation rule. It is a set of key value pairs representing the rules and logic between the rules. The keys are numbered consecutively beginning from `1`. The values are objects containing the rule conditions.
     *
     * @return self
     */
    public function setRules($rules)
    {
        if (is_null($rules)) {
            throw new \InvalidArgumentException('non-nullable rules cannot be null');
        }
        $this->container['rules'] = $rules;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \OpenAPI\Client\Model\ValidationRulesUpdateRequestBodyError|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \OpenAPI\Client\Model\ValidationRulesUpdateRequestBodyError|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets applicable_to
     *
     * @return \OpenAPI\Client\Model\ValidationRulesUpdateRequestBodyApplicableTo|null
     */
    public function getApplicableTo()
    {
        return $this->container['applicable_to'];
    }

    /**
     * Sets applicable_to
     *
     * @param \OpenAPI\Client\Model\ValidationRulesUpdateRequestBodyApplicableTo|null $applicable_to applicable_to
     *
     * @return self
     */
    public function setApplicableTo($applicable_to)
    {
        if (is_null($applicable_to)) {
            array_push($this->openAPINullablesSetToNull, 'applicable_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applicable_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['applicable_to'] = $applicable_to;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of validation rule.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets context_type
     *
     * @return string|null
     */
    public function getContextType()
    {
        return $this->container['context_type'];
    }

    /**
     * Sets context_type
     *
     * @param string|null $context_type Validation rule context type.    | **Context Type** | **Definition** | |:---|:---| | earning_rule.order.paid |  | | earning_rule.custom_event |  | | earning_rule.customer.segment.entered |  | | campaign.discount_coupons |  | | campaign.discount_coupons.discount.apply_to_order |  | | campaign.discount_coupons.discount.apply_to_items |  | | campaign.discount_coupons.discount.apply_to_items_proportionally |  | | campaign.discount_coupons.discount.apply_to_items_proportionally_by_quantity |  | | campaign.discount_coupons.discount.fixed.apply_to_items |  | | campaign.gift_vouchers |  | | campaign.gift_vouchers.gift.apply_to_order |  | | campaign.gift_vouchers.gift.apply_to_items |  | | campaign.referral_program |  | | campaign.referral_program.discount.apply_to_order |  | | campaign.referral_program.discount.apply_to_items |  | | campaign.referral_program.discount.apply_to_items_proportionally |  | | campaign.referral_program.discount.apply_to_items_proportionally_by_quantity |  | | campaign.referral_program.discount.fixed.apply_to_items |  | | campaign.promotion |  | | campaign.promotion.discount.apply_to_order |  | | campaign.promotion.discount.apply_to_items |  | | campaign.promotion.discount.apply_to_items_proportionally |  | | campaign.promotion.discount.apply_to_items_proportionally_by_quantity |  | | campaign.promotion.discount.fixed.apply_to_items |  | | campaign.loyalty_program |  | | campaign.lucky_draw |  | | voucher.discount_voucher |  | | voucher.discount_voucher.discount.apply_to_order |  | | voucher.discount_voucher.discount.apply_to_items |  | | voucher.discount_voucher.discount.apply_to_items_proportionally |  | | voucher.discount_voucher.discount.apply_to_items_proportionally_by_quantity |  | | voucher.discount_voucher.discount.fixed.apply_to_items |  | | voucher.gift_voucher |  | | voucher.gift_voucher.gift.apply_to_order |  | | voucher.gift_voucher.gift.apply_to_items |  | | voucher.loyalty_card |  | | voucher.lucky_draw_code |  | | distribution.custom_event |  | | reward_assignment.pay_with_points |  | | global |  |
     *
     * @return self
     */
    public function setContextType($context_type)
    {
        if (is_null($context_type)) {
            array_push($this->openAPINullablesSetToNull, 'context_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('context_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getContextTypeAllowableValues();
        if (!is_null($context_type) && !in_array($context_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'context_type', must be one of '%s'",
                    $context_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['context_type'] = $context_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


