<?php
/**
 * FiltersCondition
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FiltersCondition Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FiltersCondition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FiltersCondition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'in' => 'mixed',
        'notIn' => 'mixed',
        'is' => 'mixed',
        'isDaysAgo' => 'mixed',
        'isDaysInFuture' => 'mixed',
        'isNot' => 'mixed',
        'hasValue' => 'mixed',
        'isUnknown' => 'mixed',
        'contains' => 'mixed',
        'notContain' => 'mixed',
        'startsWith' => 'mixed',
        'endsWith' => 'mixed',
        'moreThan' => 'mixed',
        'lessThan' => 'mixed',
        'moreThanAgo' => 'mixed',
        'lessThanAgo' => 'mixed',
        'moreThanFuture' => 'mixed',
        'lessThanFuture' => 'mixed',
        'moreThanEqual' => 'mixed',
        'lessThanEqual' => 'mixed',
        'after' => 'mixed',
        'before' => 'mixed',
        'count' => 'mixed',
        'countLess' => 'mixed',
        'countMore' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'in' => null,
        'notIn' => null,
        'is' => null,
        'isDaysAgo' => null,
        'isDaysInFuture' => null,
        'isNot' => null,
        'hasValue' => null,
        'isUnknown' => null,
        'contains' => null,
        'notContain' => null,
        'startsWith' => null,
        'endsWith' => null,
        'moreThan' => null,
        'lessThan' => null,
        'moreThanAgo' => null,
        'lessThanAgo' => null,
        'moreThanFuture' => null,
        'lessThanFuture' => null,
        'moreThanEqual' => null,
        'lessThanEqual' => null,
        'after' => null,
        'before' => null,
        'count' => null,
        'countLess' => null,
        'countMore' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'in' => true,
		'notIn' => true,
		'is' => true,
		'isDaysAgo' => true,
		'isDaysInFuture' => true,
		'isNot' => true,
		'hasValue' => true,
		'isUnknown' => true,
		'contains' => true,
		'notContain' => true,
		'startsWith' => true,
		'endsWith' => true,
		'moreThan' => true,
		'lessThan' => true,
		'moreThanAgo' => true,
		'lessThanAgo' => true,
		'moreThanFuture' => true,
		'lessThanFuture' => true,
		'moreThanEqual' => true,
		'lessThanEqual' => true,
		'after' => true,
		'before' => true,
		'count' => true,
		'countLess' => true,
		'countMore' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in' => '$in',
        'notIn' => '$not_in',
        'is' => '$is',
        'isDaysAgo' => '$is_days_ago',
        'isDaysInFuture' => '$is_days_in_future',
        'isNot' => '$is_not',
        'hasValue' => '$has_value',
        'isUnknown' => '$is_unknown',
        'contains' => '$contains',
        'notContain' => '$not_contain',
        'startsWith' => '$starts_with',
        'endsWith' => '$ends_with',
        'moreThan' => '$more_than',
        'lessThan' => '$less_than',
        'moreThanAgo' => '$more_than_ago',
        'lessThanAgo' => '$less_than_ago',
        'moreThanFuture' => '$more_than_future',
        'lessThanFuture' => '$less_than_future',
        'moreThanEqual' => '$more_than_equal',
        'lessThanEqual' => '$less_than_equal',
        'after' => '$after',
        'before' => '$before',
        'count' => '$count',
        'countLess' => '$count_less',
        'countMore' => '$count_more'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in' => 'setIn',
        'notIn' => 'setNotIn',
        'is' => 'setIs',
        'isDaysAgo' => 'setIsDaysAgo',
        'isDaysInFuture' => 'setIsDaysInFuture',
        'isNot' => 'setIsNot',
        'hasValue' => 'setHasValue',
        'isUnknown' => 'setIsUnknown',
        'contains' => 'setContains',
        'notContain' => 'setNotContain',
        'startsWith' => 'setStartsWith',
        'endsWith' => 'setEndsWith',
        'moreThan' => 'setMoreThan',
        'lessThan' => 'setLessThan',
        'moreThanAgo' => 'setMoreThanAgo',
        'lessThanAgo' => 'setLessThanAgo',
        'moreThanFuture' => 'setMoreThanFuture',
        'lessThanFuture' => 'setLessThanFuture',
        'moreThanEqual' => 'setMoreThanEqual',
        'lessThanEqual' => 'setLessThanEqual',
        'after' => 'setAfter',
        'before' => 'setBefore',
        'count' => 'setCount',
        'countLess' => 'setCountLess',
        'countMore' => 'setCountMore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in' => 'getIn',
        'notIn' => 'getNotIn',
        'is' => 'getIs',
        'isDaysAgo' => 'getIsDaysAgo',
        'isDaysInFuture' => 'getIsDaysInFuture',
        'isNot' => 'getIsNot',
        'hasValue' => 'getHasValue',
        'isUnknown' => 'getIsUnknown',
        'contains' => 'getContains',
        'notContain' => 'getNotContain',
        'startsWith' => 'getStartsWith',
        'endsWith' => 'getEndsWith',
        'moreThan' => 'getMoreThan',
        'lessThan' => 'getLessThan',
        'moreThanAgo' => 'getMoreThanAgo',
        'lessThanAgo' => 'getLessThanAgo',
        'moreThanFuture' => 'getMoreThanFuture',
        'lessThanFuture' => 'getLessThanFuture',
        'moreThanEqual' => 'getMoreThanEqual',
        'lessThanEqual' => 'getLessThanEqual',
        'after' => 'getAfter',
        'before' => 'getBefore',
        'count' => 'getCount',
        'countLess' => 'getCountLess',
        'countMore' => 'getCountMore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('in', $data ?? [], null);
        $this->setIfExists('notIn', $data ?? [], null);
        $this->setIfExists('is', $data ?? [], null);
        $this->setIfExists('isDaysAgo', $data ?? [], null);
        $this->setIfExists('isDaysInFuture', $data ?? [], null);
        $this->setIfExists('isNot', $data ?? [], null);
        $this->setIfExists('hasValue', $data ?? [], null);
        $this->setIfExists('isUnknown', $data ?? [], null);
        $this->setIfExists('contains', $data ?? [], null);
        $this->setIfExists('notContain', $data ?? [], null);
        $this->setIfExists('startsWith', $data ?? [], null);
        $this->setIfExists('endsWith', $data ?? [], null);
        $this->setIfExists('moreThan', $data ?? [], null);
        $this->setIfExists('lessThan', $data ?? [], null);
        $this->setIfExists('moreThanAgo', $data ?? [], null);
        $this->setIfExists('lessThanAgo', $data ?? [], null);
        $this->setIfExists('moreThanFuture', $data ?? [], null);
        $this->setIfExists('lessThanFuture', $data ?? [], null);
        $this->setIfExists('moreThanEqual', $data ?? [], null);
        $this->setIfExists('lessThanEqual', $data ?? [], null);
        $this->setIfExists('after', $data ?? [], null);
        $this->setIfExists('before', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('countLess', $data ?? [], null);
        $this->setIfExists('countMore', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in
     *
     * @return mixed|null
     */
    public function getIn()
    {
        return $this->container['in'];
    }

    /**
     * Sets in
     *
     * @param mixed|null $in in
     *
     * @return self
     */
    public function setIn($in)
    {
        if (is_null($in)) {
            array_push($this->openAPINullablesSetToNull, 'in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['in'] = $in;

        return $this;
    }

    /**
     * Gets notIn
     *
     * @return mixed|null
     */
    public function getNotIn()
    {
        return $this->container['notIn'];
    }

    /**
     * Sets notIn
     *
     * @param mixed|null $notIn notIn
     *
     * @return self
     */
    public function setNotIn($notIn)
    {
        if (is_null($notIn)) {
            array_push($this->openAPINullablesSetToNull, 'notIn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notIn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notIn'] = $notIn;

        return $this;
    }

    /**
     * Gets is
     *
     * @return mixed|null
     */
    public function getIs()
    {
        return $this->container['is'];
    }

    /**
     * Sets is
     *
     * @param mixed|null $is is
     *
     * @return self
     */
    public function setIs($is)
    {
        if (is_null($is)) {
            array_push($this->openAPINullablesSetToNull, 'is');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is'] = $is;

        return $this;
    }

    /**
     * Gets isDaysAgo
     *
     * @return mixed|null
     */
    public function getIsDaysAgo()
    {
        return $this->container['isDaysAgo'];
    }

    /**
     * Sets isDaysAgo
     *
     * @param mixed|null $isDaysAgo isDaysAgo
     *
     * @return self
     */
    public function setIsDaysAgo($isDaysAgo)
    {
        if (is_null($isDaysAgo)) {
            array_push($this->openAPINullablesSetToNull, 'isDaysAgo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isDaysAgo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isDaysAgo'] = $isDaysAgo;

        return $this;
    }

    /**
     * Gets isDaysInFuture
     *
     * @return mixed|null
     */
    public function getIsDaysInFuture()
    {
        return $this->container['isDaysInFuture'];
    }

    /**
     * Sets isDaysInFuture
     *
     * @param mixed|null $isDaysInFuture isDaysInFuture
     *
     * @return self
     */
    public function setIsDaysInFuture($isDaysInFuture)
    {
        if (is_null($isDaysInFuture)) {
            array_push($this->openAPINullablesSetToNull, 'isDaysInFuture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isDaysInFuture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isDaysInFuture'] = $isDaysInFuture;

        return $this;
    }

    /**
     * Gets isNot
     *
     * @return mixed|null
     */
    public function getIsNot()
    {
        return $this->container['isNot'];
    }

    /**
     * Sets isNot
     *
     * @param mixed|null $isNot isNot
     *
     * @return self
     */
    public function setIsNot($isNot)
    {
        if (is_null($isNot)) {
            array_push($this->openAPINullablesSetToNull, 'isNot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isNot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isNot'] = $isNot;

        return $this;
    }

    /**
     * Gets hasValue
     *
     * @return mixed|null
     */
    public function getHasValue()
    {
        return $this->container['hasValue'];
    }

    /**
     * Sets hasValue
     *
     * @param mixed|null $hasValue hasValue
     *
     * @return self
     */
    public function setHasValue($hasValue)
    {
        if (is_null($hasValue)) {
            array_push($this->openAPINullablesSetToNull, 'hasValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hasValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hasValue'] = $hasValue;

        return $this;
    }

    /**
     * Gets isUnknown
     *
     * @return mixed|null
     */
    public function getIsUnknown()
    {
        return $this->container['isUnknown'];
    }

    /**
     * Sets isUnknown
     *
     * @param mixed|null $isUnknown isUnknown
     *
     * @return self
     */
    public function setIsUnknown($isUnknown)
    {
        if (is_null($isUnknown)) {
            array_push($this->openAPINullablesSetToNull, 'isUnknown');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isUnknown', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isUnknown'] = $isUnknown;

        return $this;
    }

    /**
     * Gets contains
     *
     * @return mixed|null
     */
    public function getContains()
    {
        return $this->container['contains'];
    }

    /**
     * Sets contains
     *
     * @param mixed|null $contains contains
     *
     * @return self
     */
    public function setContains($contains)
    {
        if (is_null($contains)) {
            array_push($this->openAPINullablesSetToNull, 'contains');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contains', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contains'] = $contains;

        return $this;
    }

    /**
     * Gets notContain
     *
     * @return mixed|null
     */
    public function getNotContain()
    {
        return $this->container['notContain'];
    }

    /**
     * Sets notContain
     *
     * @param mixed|null $notContain notContain
     *
     * @return self
     */
    public function setNotContain($notContain)
    {
        if (is_null($notContain)) {
            array_push($this->openAPINullablesSetToNull, 'notContain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notContain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notContain'] = $notContain;

        return $this;
    }

    /**
     * Gets startsWith
     *
     * @return mixed|null
     */
    public function getStartsWith()
    {
        return $this->container['startsWith'];
    }

    /**
     * Sets startsWith
     *
     * @param mixed|null $startsWith startsWith
     *
     * @return self
     */
    public function setStartsWith($startsWith)
    {
        if (is_null($startsWith)) {
            array_push($this->openAPINullablesSetToNull, 'startsWith');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startsWith', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startsWith'] = $startsWith;

        return $this;
    }

    /**
     * Gets endsWith
     *
     * @return mixed|null
     */
    public function getEndsWith()
    {
        return $this->container['endsWith'];
    }

    /**
     * Sets endsWith
     *
     * @param mixed|null $endsWith endsWith
     *
     * @return self
     */
    public function setEndsWith($endsWith)
    {
        if (is_null($endsWith)) {
            array_push($this->openAPINullablesSetToNull, 'endsWith');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endsWith', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endsWith'] = $endsWith;

        return $this;
    }

    /**
     * Gets moreThan
     *
     * @return mixed|null
     */
    public function getMoreThan()
    {
        return $this->container['moreThan'];
    }

    /**
     * Sets moreThan
     *
     * @param mixed|null $moreThan moreThan
     *
     * @return self
     */
    public function setMoreThan($moreThan)
    {
        if (is_null($moreThan)) {
            array_push($this->openAPINullablesSetToNull, 'moreThan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('moreThan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['moreThan'] = $moreThan;

        return $this;
    }

    /**
     * Gets lessThan
     *
     * @return mixed|null
     */
    public function getLessThan()
    {
        return $this->container['lessThan'];
    }

    /**
     * Sets lessThan
     *
     * @param mixed|null $lessThan lessThan
     *
     * @return self
     */
    public function setLessThan($lessThan)
    {
        if (is_null($lessThan)) {
            array_push($this->openAPINullablesSetToNull, 'lessThan');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lessThan', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lessThan'] = $lessThan;

        return $this;
    }

    /**
     * Gets moreThanAgo
     *
     * @return mixed|null
     */
    public function getMoreThanAgo()
    {
        return $this->container['moreThanAgo'];
    }

    /**
     * Sets moreThanAgo
     *
     * @param mixed|null $moreThanAgo moreThanAgo
     *
     * @return self
     */
    public function setMoreThanAgo($moreThanAgo)
    {
        if (is_null($moreThanAgo)) {
            array_push($this->openAPINullablesSetToNull, 'moreThanAgo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('moreThanAgo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['moreThanAgo'] = $moreThanAgo;

        return $this;
    }

    /**
     * Gets lessThanAgo
     *
     * @return mixed|null
     */
    public function getLessThanAgo()
    {
        return $this->container['lessThanAgo'];
    }

    /**
     * Sets lessThanAgo
     *
     * @param mixed|null $lessThanAgo lessThanAgo
     *
     * @return self
     */
    public function setLessThanAgo($lessThanAgo)
    {
        if (is_null($lessThanAgo)) {
            array_push($this->openAPINullablesSetToNull, 'lessThanAgo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lessThanAgo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lessThanAgo'] = $lessThanAgo;

        return $this;
    }

    /**
     * Gets moreThanFuture
     *
     * @return mixed|null
     */
    public function getMoreThanFuture()
    {
        return $this->container['moreThanFuture'];
    }

    /**
     * Sets moreThanFuture
     *
     * @param mixed|null $moreThanFuture moreThanFuture
     *
     * @return self
     */
    public function setMoreThanFuture($moreThanFuture)
    {
        if (is_null($moreThanFuture)) {
            array_push($this->openAPINullablesSetToNull, 'moreThanFuture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('moreThanFuture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['moreThanFuture'] = $moreThanFuture;

        return $this;
    }

    /**
     * Gets lessThanFuture
     *
     * @return mixed|null
     */
    public function getLessThanFuture()
    {
        return $this->container['lessThanFuture'];
    }

    /**
     * Sets lessThanFuture
     *
     * @param mixed|null $lessThanFuture lessThanFuture
     *
     * @return self
     */
    public function setLessThanFuture($lessThanFuture)
    {
        if (is_null($lessThanFuture)) {
            array_push($this->openAPINullablesSetToNull, 'lessThanFuture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lessThanFuture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lessThanFuture'] = $lessThanFuture;

        return $this;
    }

    /**
     * Gets moreThanEqual
     *
     * @return mixed|null
     */
    public function getMoreThanEqual()
    {
        return $this->container['moreThanEqual'];
    }

    /**
     * Sets moreThanEqual
     *
     * @param mixed|null $moreThanEqual moreThanEqual
     *
     * @return self
     */
    public function setMoreThanEqual($moreThanEqual)
    {
        if (is_null($moreThanEqual)) {
            array_push($this->openAPINullablesSetToNull, 'moreThanEqual');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('moreThanEqual', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['moreThanEqual'] = $moreThanEqual;

        return $this;
    }

    /**
     * Gets lessThanEqual
     *
     * @return mixed|null
     */
    public function getLessThanEqual()
    {
        return $this->container['lessThanEqual'];
    }

    /**
     * Sets lessThanEqual
     *
     * @param mixed|null $lessThanEqual lessThanEqual
     *
     * @return self
     */
    public function setLessThanEqual($lessThanEqual)
    {
        if (is_null($lessThanEqual)) {
            array_push($this->openAPINullablesSetToNull, 'lessThanEqual');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lessThanEqual', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lessThanEqual'] = $lessThanEqual;

        return $this;
    }

    /**
     * Gets after
     *
     * @return mixed|null
     */
    public function getAfter()
    {
        return $this->container['after'];
    }

    /**
     * Sets after
     *
     * @param mixed|null $after after
     *
     * @return self
     */
    public function setAfter($after)
    {
        if (is_null($after)) {
            array_push($this->openAPINullablesSetToNull, 'after');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('after', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['after'] = $after;

        return $this;
    }

    /**
     * Gets before
     *
     * @return mixed|null
     */
    public function getBefore()
    {
        return $this->container['before'];
    }

    /**
     * Sets before
     *
     * @param mixed|null $before before
     *
     * @return self
     */
    public function setBefore($before)
    {
        if (is_null($before)) {
            array_push($this->openAPINullablesSetToNull, 'before');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('before', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['before'] = $before;

        return $this;
    }

    /**
     * Gets count
     *
     * @return mixed|null
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param mixed|null $count count
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            array_push($this->openAPINullablesSetToNull, 'count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets countLess
     *
     * @return mixed|null
     */
    public function getCountLess()
    {
        return $this->container['countLess'];
    }

    /**
     * Sets countLess
     *
     * @param mixed|null $countLess countLess
     *
     * @return self
     */
    public function setCountLess($countLess)
    {
        if (is_null($countLess)) {
            array_push($this->openAPINullablesSetToNull, 'countLess');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countLess', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['countLess'] = $countLess;

        return $this;
    }

    /**
     * Gets countMore
     *
     * @return mixed|null
     */
    public function getCountMore()
    {
        return $this->container['countMore'];
    }

    /**
     * Sets countMore
     *
     * @param mixed|null $countMore countMore
     *
     * @return self
     */
    public function setCountMore($countMore)
    {
        if (is_null($countMore)) {
            array_push($this->openAPINullablesSetToNull, 'countMore');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countMore', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['countMore'] = $countMore;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


