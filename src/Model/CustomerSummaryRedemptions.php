<?php
/**
 * CustomerSummaryRedemptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerSummaryRedemptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerSummaryRedemptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerSummaryRedemptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_redeemed' => 'int',
        'total_failed' => 'int',
        'total_succeeded' => 'int',
        'total_rolled_back' => 'int',
        'total_rollback_failed' => 'int',
        'total_rollback_succeeded' => 'int',
        'gift' => '\OpenAPI\Client\Model\CustomerSummaryRedemptionsGift',
        'loyalty_card' => '\OpenAPI\Client\Model\CustomerSummaryRedemptionsLoyaltyCard'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_redeemed' => null,
        'total_failed' => null,
        'total_succeeded' => null,
        'total_rolled_back' => null,
        'total_rollback_failed' => null,
        'total_rollback_succeeded' => null,
        'gift' => null,
        'loyalty_card' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_redeemed' => true,
		'total_failed' => true,
		'total_succeeded' => true,
		'total_rolled_back' => true,
		'total_rollback_failed' => true,
		'total_rollback_succeeded' => true,
		'gift' => true,
		'loyalty_card' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_redeemed' => 'total_redeemed',
        'total_failed' => 'total_failed',
        'total_succeeded' => 'total_succeeded',
        'total_rolled_back' => 'total_rolled_back',
        'total_rollback_failed' => 'total_rollback_failed',
        'total_rollback_succeeded' => 'total_rollback_succeeded',
        'gift' => 'gift',
        'loyalty_card' => 'loyalty_card'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_redeemed' => 'setTotalRedeemed',
        'total_failed' => 'setTotalFailed',
        'total_succeeded' => 'setTotalSucceeded',
        'total_rolled_back' => 'setTotalRolledBack',
        'total_rollback_failed' => 'setTotalRollbackFailed',
        'total_rollback_succeeded' => 'setTotalRollbackSucceeded',
        'gift' => 'setGift',
        'loyalty_card' => 'setLoyaltyCard'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_redeemed' => 'getTotalRedeemed',
        'total_failed' => 'getTotalFailed',
        'total_succeeded' => 'getTotalSucceeded',
        'total_rolled_back' => 'getTotalRolledBack',
        'total_rollback_failed' => 'getTotalRollbackFailed',
        'total_rollback_succeeded' => 'getTotalRollbackSucceeded',
        'gift' => 'getGift',
        'loyalty_card' => 'getLoyaltyCard'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total_redeemed', $data ?? [], null);
        $this->setIfExists('total_failed', $data ?? [], null);
        $this->setIfExists('total_succeeded', $data ?? [], null);
        $this->setIfExists('total_rolled_back', $data ?? [], null);
        $this->setIfExists('total_rollback_failed', $data ?? [], null);
        $this->setIfExists('total_rollback_succeeded', $data ?? [], null);
        $this->setIfExists('gift', $data ?? [], null);
        $this->setIfExists('loyalty_card', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_redeemed
     *
     * @return int|null
     */
    public function getTotalRedeemed()
    {
        return $this->container['total_redeemed'];
    }

    /**
     * Sets total_redeemed
     *
     * @param int|null $total_redeemed Total number of redemptions made by the customer.
     *
     * @return self
     */
    public function setTotalRedeemed($total_redeemed)
    {
        if (is_null($total_redeemed)) {
            array_push($this->openAPINullablesSetToNull, 'total_redeemed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_redeemed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_redeemed'] = $total_redeemed;

        return $this;
    }

    /**
     * Gets total_failed
     *
     * @return int|null
     */
    public function getTotalFailed()
    {
        return $this->container['total_failed'];
    }

    /**
     * Sets total_failed
     *
     * @param int|null $total_failed Total number of redemptions that failed.
     *
     * @return self
     */
    public function setTotalFailed($total_failed)
    {
        if (is_null($total_failed)) {
            array_push($this->openAPINullablesSetToNull, 'total_failed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_failed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_failed'] = $total_failed;

        return $this;
    }

    /**
     * Gets total_succeeded
     *
     * @return int|null
     */
    public function getTotalSucceeded()
    {
        return $this->container['total_succeeded'];
    }

    /**
     * Sets total_succeeded
     *
     * @param int|null $total_succeeded Total number of redemptions that succeeded.
     *
     * @return self
     */
    public function setTotalSucceeded($total_succeeded)
    {
        if (is_null($total_succeeded)) {
            array_push($this->openAPINullablesSetToNull, 'total_succeeded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_succeeded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_succeeded'] = $total_succeeded;

        return $this;
    }

    /**
     * Gets total_rolled_back
     *
     * @return int|null
     */
    public function getTotalRolledBack()
    {
        return $this->container['total_rolled_back'];
    }

    /**
     * Sets total_rolled_back
     *
     * @param int|null $total_rolled_back Total number of redemptions that were rolled back for the customer.
     *
     * @return self
     */
    public function setTotalRolledBack($total_rolled_back)
    {
        if (is_null($total_rolled_back)) {
            array_push($this->openAPINullablesSetToNull, 'total_rolled_back');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_rolled_back', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_rolled_back'] = $total_rolled_back;

        return $this;
    }

    /**
     * Gets total_rollback_failed
     *
     * @return int|null
     */
    public function getTotalRollbackFailed()
    {
        return $this->container['total_rollback_failed'];
    }

    /**
     * Sets total_rollback_failed
     *
     * @param int|null $total_rollback_failed Total number of redemption rollbacks that failed.
     *
     * @return self
     */
    public function setTotalRollbackFailed($total_rollback_failed)
    {
        if (is_null($total_rollback_failed)) {
            array_push($this->openAPINullablesSetToNull, 'total_rollback_failed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_rollback_failed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_rollback_failed'] = $total_rollback_failed;

        return $this;
    }

    /**
     * Gets total_rollback_succeeded
     *
     * @return int|null
     */
    public function getTotalRollbackSucceeded()
    {
        return $this->container['total_rollback_succeeded'];
    }

    /**
     * Sets total_rollback_succeeded
     *
     * @param int|null $total_rollback_succeeded Total number of redemption rollbacks that succeeded.
     *
     * @return self
     */
    public function setTotalRollbackSucceeded($total_rollback_succeeded)
    {
        if (is_null($total_rollback_succeeded)) {
            array_push($this->openAPINullablesSetToNull, 'total_rollback_succeeded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_rollback_succeeded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_rollback_succeeded'] = $total_rollback_succeeded;

        return $this;
    }

    /**
     * Gets gift
     *
     * @return \OpenAPI\Client\Model\CustomerSummaryRedemptionsGift|null
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     *
     * @param \OpenAPI\Client\Model\CustomerSummaryRedemptionsGift|null $gift gift
     *
     * @return self
     */
    public function setGift($gift)
    {
        if (is_null($gift)) {
            array_push($this->openAPINullablesSetToNull, 'gift');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gift', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets loyalty_card
     *
     * @return \OpenAPI\Client\Model\CustomerSummaryRedemptionsLoyaltyCard|null
     */
    public function getLoyaltyCard()
    {
        return $this->container['loyalty_card'];
    }

    /**
     * Sets loyalty_card
     *
     * @param \OpenAPI\Client\Model\CustomerSummaryRedemptionsLoyaltyCard|null $loyalty_card loyalty_card
     *
     * @return self
     */
    public function setLoyaltyCard($loyalty_card)
    {
        if (is_null($loyalty_card)) {
            array_push($this->openAPINullablesSetToNull, 'loyalty_card');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loyalty_card', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loyalty_card'] = $loyalty_card;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


