<?php
/**
 * FilterConditionsString
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FilterConditionsString Class Doc Comment
 *
 * @category Class
 * @description Data filters used to narrow down the data records to be returned in the result.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FilterConditionsString implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FilterConditionsString';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'in' => 'string[]',
        'not_in' => 'string[]',
        'is' => 'string',
        'is_not' => 'string',
        'has_value' => 'string',
        'is_unknown' => 'string',
        'starts_with' => 'string',
        'ends_with' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'in' => null,
        'not_in' => null,
        'is' => null,
        'is_not' => null,
        'has_value' => null,
        'is_unknown' => null,
        'starts_with' => null,
        'ends_with' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'in' => true,
		'not_in' => true,
		'is' => true,
		'is_not' => true,
		'has_value' => true,
		'is_unknown' => true,
		'starts_with' => true,
		'ends_with' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in' => '$in',
        'not_in' => '$not_in',
        'is' => '$is',
        'is_not' => '$is_not',
        'has_value' => '$has_value',
        'is_unknown' => '$is_unknown',
        'starts_with' => '$starts_with',
        'ends_with' => '$ends_with'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in' => 'setIn',
        'not_in' => 'setNotIn',
        'is' => 'setIs',
        'is_not' => 'setIsNot',
        'has_value' => 'setHasValue',
        'is_unknown' => 'setIsUnknown',
        'starts_with' => 'setStartsWith',
        'ends_with' => 'setEndsWith'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in' => 'getIn',
        'not_in' => 'getNotIn',
        'is' => 'getIs',
        'is_not' => 'getIsNot',
        'has_value' => 'getHasValue',
        'is_unknown' => 'getIsUnknown',
        'starts_with' => 'getStartsWith',
        'ends_with' => 'getEndsWith'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('in', $data ?? [], null);
        $this->setIfExists('not_in', $data ?? [], null);
        $this->setIfExists('is', $data ?? [], null);
        $this->setIfExists('is_not', $data ?? [], null);
        $this->setIfExists('has_value', $data ?? [], null);
        $this->setIfExists('is_unknown', $data ?? [], null);
        $this->setIfExists('starts_with', $data ?? [], null);
        $this->setIfExists('ends_with', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in
     *
     * @return string[]|null
     */
    public function getIn()
    {
        return $this->container['in'];
    }

    /**
     * Sets in
     *
     * @param string[]|null $in Array of resource values that should be included in the results (multiple values).
     *
     * @return self
     */
    public function setIn($in)
    {
        if (is_null($in)) {
            array_push($this->openAPINullablesSetToNull, 'in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['in'] = $in;

        return $this;
    }

    /**
     * Gets not_in
     *
     * @return string[]|null
     */
    public function getNotIn()
    {
        return $this->container['not_in'];
    }

    /**
     * Sets not_in
     *
     * @param string[]|null $not_in Array of resource values that should be included in the results (multiple values).
     *
     * @return self
     */
    public function setNotIn($not_in)
    {
        if (is_null($not_in)) {
            array_push($this->openAPINullablesSetToNull, 'not_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('not_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['not_in'] = $not_in;

        return $this;
    }

    /**
     * Gets is
     *
     * @return string|null
     */
    public function getIs()
    {
        return $this->container['is'];
    }

    /**
     * Sets is
     *
     * @param string|null $is Value is exactly this value (single value).
     *
     * @return self
     */
    public function setIs($is)
    {
        if (is_null($is)) {
            array_push($this->openAPINullablesSetToNull, 'is');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is'] = $is;

        return $this;
    }

    /**
     * Gets is_not
     *
     * @return string|null
     */
    public function getIsNot()
    {
        return $this->container['is_not'];
    }

    /**
     * Sets is_not
     *
     * @param string|null $is_not Results omit this value (single value).
     *
     * @return self
     */
    public function setIsNot($is_not)
    {
        if (is_null($is_not)) {
            array_push($this->openAPINullablesSetToNull, 'is_not');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_not', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_not'] = $is_not;

        return $this;
    }

    /**
     * Gets has_value
     *
     * @return string|null
     */
    public function getHasValue()
    {
        return $this->container['has_value'];
    }

    /**
     * Sets has_value
     *
     * @param string|null $has_value Value is NOT null. The value for this parameter is an empty string.
     *
     * @return self
     */
    public function setHasValue($has_value)
    {
        if (is_null($has_value)) {
            array_push($this->openAPINullablesSetToNull, 'has_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_value'] = $has_value;

        return $this;
    }

    /**
     * Gets is_unknown
     *
     * @return string|null
     */
    public function getIsUnknown()
    {
        return $this->container['is_unknown'];
    }

    /**
     * Sets is_unknown
     *
     * @param string|null $is_unknown Value is null. The value for this parameter is an empty string.
     *
     * @return self
     */
    public function setIsUnknown($is_unknown)
    {
        if (is_null($is_unknown)) {
            array_push($this->openAPINullablesSetToNull, 'is_unknown');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_unknown', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_unknown'] = $is_unknown;

        return $this;
    }

    /**
     * Gets starts_with
     *
     * @return string|null
     */
    public function getStartsWith()
    {
        return $this->container['starts_with'];
    }

    /**
     * Sets starts_with
     *
     * @param string|null $starts_with Value starts with the specified string.
     *
     * @return self
     */
    public function setStartsWith($starts_with)
    {
        if (is_null($starts_with)) {
            array_push($this->openAPINullablesSetToNull, 'starts_with');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('starts_with', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['starts_with'] = $starts_with;

        return $this;
    }

    /**
     * Gets ends_with
     *
     * @return string|null
     */
    public function getEndsWith()
    {
        return $this->container['ends_with'];
    }

    /**
     * Sets ends_with
     *
     * @param string|null $ends_with Value ends with the specified string.
     *
     * @return self
     */
    public function setEndsWith($ends_with)
    {
        if (is_null($ends_with)) {
            array_push($this->openAPINullablesSetToNull, 'ends_with');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ends_with', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ends_with'] = $ends_with;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


