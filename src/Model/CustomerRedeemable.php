<?php
/**
 * CustomerRedeemable
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerRedeemable Class Doc Comment
 *
 * @category Class
 * @description Single customer&#39;s redeemable
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerRedeemable implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerRedeemable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
        'redeemable_id' => 'string',
        'redeemable_object' => 'string',
        'customer_id' => 'string',
        'holder_role' => 'string',
        'campaign_id' => 'string',
        'campaign_type' => 'string',
        'voucher_type' => 'string',
        'redeemable' => '\OpenAPI\Client\Model\CustomerRedeemableRedeemable'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'redeemable_id' => null,
        'redeemable_object' => null,
        'customer_id' => null,
        'holder_role' => null,
        'campaign_id' => null,
        'campaign_type' => null,
        'voucher_type' => null,
        'redeemable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'created_at' => true,
		'redeemable_id' => true,
		'redeemable_object' => true,
		'customer_id' => true,
		'holder_role' => true,
		'campaign_id' => true,
		'campaign_type' => true,
		'voucher_type' => true,
		'redeemable' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'redeemable_id' => 'redeemable_id',
        'redeemable_object' => 'redeemable_object',
        'customer_id' => 'customer_id',
        'holder_role' => 'holder_role',
        'campaign_id' => 'campaign_id',
        'campaign_type' => 'campaign_type',
        'voucher_type' => 'voucher_type',
        'redeemable' => 'redeemable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'redeemable_id' => 'setRedeemableId',
        'redeemable_object' => 'setRedeemableObject',
        'customer_id' => 'setCustomerId',
        'holder_role' => 'setHolderRole',
        'campaign_id' => 'setCampaignId',
        'campaign_type' => 'setCampaignType',
        'voucher_type' => 'setVoucherType',
        'redeemable' => 'setRedeemable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'redeemable_id' => 'getRedeemableId',
        'redeemable_object' => 'getRedeemableObject',
        'customer_id' => 'getCustomerId',
        'holder_role' => 'getHolderRole',
        'campaign_id' => 'getCampaignId',
        'campaign_type' => 'getCampaignType',
        'voucher_type' => 'getVoucherType',
        'redeemable' => 'getRedeemable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HOLDER_ROLE_OWNER = 'OWNER';
    public const HOLDER_ROLE_REFERRER = 'REFERRER';
    public const HOLDER_ROLE_REFEREE = 'REFEREE';
    public const CAMPAIGN_TYPE_LOYALTY_PROGRAM = 'LOYALTY_PROGRAM';
    public const CAMPAIGN_TYPE_GIFT_VOUCHERS = 'GIFT_VOUCHERS';
    public const CAMPAIGN_TYPE_DISCOUNT_COUPONS = 'DISCOUNT_COUPONS';
    public const CAMPAIGN_TYPE_PROMOTION = 'PROMOTION';
    public const CAMPAIGN_TYPE_REFERRAL_PROGRAM = 'REFERRAL_PROGRAM';
    public const CAMPAIGN_TYPE_LUCKY_DRAW = 'LUCKY_DRAW';
    public const VOUCHER_TYPE_GIFT_VOUCHER = 'GIFT_VOUCHER';
    public const VOUCHER_TYPE_DISCOUNT_VOUCHER = 'DISCOUNT_VOUCHER';
    public const VOUCHER_TYPE_LOYALTY_CARD = 'LOYALTY_CARD';
    public const VOUCHER_TYPE_LUCKY_DRAW_CODE = 'LUCKY_DRAW_CODE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHolderRoleAllowableValues()
    {
        return [
            self::HOLDER_ROLE_OWNER,
            self::HOLDER_ROLE_REFERRER,
            self::HOLDER_ROLE_REFEREE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCampaignTypeAllowableValues()
    {
        return [
            self::CAMPAIGN_TYPE_LOYALTY_PROGRAM,
            self::CAMPAIGN_TYPE_GIFT_VOUCHERS,
            self::CAMPAIGN_TYPE_DISCOUNT_COUPONS,
            self::CAMPAIGN_TYPE_PROMOTION,
            self::CAMPAIGN_TYPE_REFERRAL_PROGRAM,
            self::CAMPAIGN_TYPE_LUCKY_DRAW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoucherTypeAllowableValues()
    {
        return [
            self::VOUCHER_TYPE_GIFT_VOUCHER,
            self::VOUCHER_TYPE_DISCOUNT_VOUCHER,
            self::VOUCHER_TYPE_LOYALTY_CARD,
            self::VOUCHER_TYPE_LUCKY_DRAW_CODE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('redeemable_id', $data ?? [], null);
        $this->setIfExists('redeemable_object', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('holder_role', $data ?? [], 'OWNER');
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('campaign_type', $data ?? [], 'DISCOUNT_COUPONS');
        $this->setIfExists('voucher_type', $data ?? [], 'DISCOUNT_VOUCHER');
        $this->setIfExists('redeemable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHolderRoleAllowableValues();
        if (!is_null($this->container['holder_role']) && !in_array($this->container['holder_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'holder_role', must be one of '%s'",
                $this->container['holder_role'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCampaignTypeAllowableValues();
        if (!is_null($this->container['campaign_type']) && !in_array($this->container['campaign_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'campaign_type', must be one of '%s'",
                $this->container['campaign_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($this->container['voucher_type']) && !in_array($this->container['voucher_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voucher_type', must be one of '%s'",
                $this->container['voucher_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique redeemable holder identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Timestamp representing the date and time when the redeemable was assigned. The value is shown in the ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets redeemable_id
     *
     * @return string|null
     */
    public function getRedeemableId()
    {
        return $this->container['redeemable_id'];
    }

    /**
     * Sets redeemable_id
     *
     * @param string|null $redeemable_id Identifier of the redeemable item.
     *
     * @return self
     */
    public function setRedeemableId($redeemable_id)
    {
        if (is_null($redeemable_id)) {
            array_push($this->openAPINullablesSetToNull, 'redeemable_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemable_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redeemable_id'] = $redeemable_id;

        return $this;
    }

    /**
     * Gets redeemable_object
     *
     * @return string|null
     */
    public function getRedeemableObject()
    {
        return $this->container['redeemable_object'];
    }

    /**
     * Sets redeemable_object
     *
     * @param string|null $redeemable_object Type of the redeemable.
     *
     * @return self
     */
    public function setRedeemableObject($redeemable_object)
    {
        if (is_null($redeemable_object)) {
            array_push($this->openAPINullablesSetToNull, 'redeemable_object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemable_object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redeemable_object'] = $redeemable_object;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Identifier of the customer.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets holder_role
     *
     * @return string|null
     */
    public function getHolderRole()
    {
        return $this->container['holder_role'];
    }

    /**
     * Sets holder_role
     *
     * @param string|null $holder_role Role of the holder.
     *
     * @return self
     */
    public function setHolderRole($holder_role)
    {
        if (is_null($holder_role)) {
            array_push($this->openAPINullablesSetToNull, 'holder_role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holder_role', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getHolderRoleAllowableValues();
        if (!is_null($holder_role) && !in_array($holder_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'holder_role', must be one of '%s'",
                    $holder_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['holder_role'] = $holder_role;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id Unique campaign identifier, assigned by Voucherify.
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets campaign_type
     *
     * @return string|null
     */
    public function getCampaignType()
    {
        return $this->container['campaign_type'];
    }

    /**
     * Sets campaign_type
     *
     * @param string|null $campaign_type Defines the type of the campaign.
     *
     * @return self
     */
    public function setCampaignType($campaign_type)
    {
        if (is_null($campaign_type)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCampaignTypeAllowableValues();
        if (!is_null($campaign_type) && !in_array($campaign_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'campaign_type', must be one of '%s'",
                    $campaign_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['campaign_type'] = $campaign_type;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return string|null
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param string|null $voucher_type Defines the type of the voucher.
     *
     * @return self
     */
    public function setVoucherType($voucher_type)
    {
        if (is_null($voucher_type)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($voucher_type) && !in_array($voucher_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voucher_type', must be one of '%s'",
                    $voucher_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets redeemable
     *
     * @return \OpenAPI\Client\Model\CustomerRedeemableRedeemable|null
     */
    public function getRedeemable()
    {
        return $this->container['redeemable'];
    }

    /**
     * Sets redeemable
     *
     * @param \OpenAPI\Client\Model\CustomerRedeemableRedeemable|null $redeemable redeemable
     *
     * @return self
     */
    public function setRedeemable($redeemable)
    {
        if (is_null($redeemable)) {
            array_push($this->openAPINullablesSetToNull, 'redeemable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redeemable'] = $redeemable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


