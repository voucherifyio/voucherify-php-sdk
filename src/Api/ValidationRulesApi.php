<?php
/**
 * ValidationRulesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ValidationRulesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ValidationRulesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createValidationRuleAssignment' => [
            'application/json',
        ],
        'createValidationRules' => [
            'application/json',
        ],
        'deleteValidationRuleAssignment' => [
            'application/json',
        ],
        'deleteValidationRules' => [
            'application/json',
        ],
        'getValidationRule' => [
            'application/json',
        ],
        'listValidationRuleAssignments' => [
            'application/json',
        ],
        'listValidationRules' => [
            'application/json',
        ],
        'listValidationRulesAssignments' => [
            'application/json',
        ],
        'updateValidationRule' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createValidationRuleAssignment
     *
     * Create Validation Rules Assignments
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  bool $force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param  \OpenAPI\Client\Model\ValidationRulesAssignmentsCreateRequestBody $validation_rules_assignments_create_request_body Specify the resource that you would like to assign the validation rule to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ValidationRulesAssignmentsCreateResponseBody
     */
    public function createValidationRuleAssignment($validation_rule_id, $force = null, $validation_rules_assignments_create_request_body = null, string $contentType = self::contentTypes['createValidationRuleAssignment'][0])
    {
        list($response) = $this->createValidationRuleAssignmentWithHttpInfo($validation_rule_id, $force, $validation_rules_assignments_create_request_body, $contentType);
        return $response;
    }

    /**
     * Operation createValidationRuleAssignmentWithHttpInfo
     *
     * Create Validation Rules Assignments
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  bool $force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param  \OpenAPI\Client\Model\ValidationRulesAssignmentsCreateRequestBody $validation_rules_assignments_create_request_body Specify the resource that you would like to assign the validation rule to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ValidationRulesAssignmentsCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createValidationRuleAssignmentWithHttpInfo($validation_rule_id, $force = null, $validation_rules_assignments_create_request_body = null, string $contentType = self::contentTypes['createValidationRuleAssignment'][0])
    {
        $request = $this->createValidationRuleAssignmentRequest($validation_rule_id, $force, $validation_rules_assignments_create_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ValidationRulesAssignmentsCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationRulesAssignmentsCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationRulesAssignmentsCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ValidationRulesAssignmentsCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationRulesAssignmentsCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createValidationRuleAssignmentAsync
     *
     * Create Validation Rules Assignments
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  bool $force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param  \OpenAPI\Client\Model\ValidationRulesAssignmentsCreateRequestBody $validation_rules_assignments_create_request_body Specify the resource that you would like to assign the validation rule to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createValidationRuleAssignmentAsync($validation_rule_id, $force = null, $validation_rules_assignments_create_request_body = null, string $contentType = self::contentTypes['createValidationRuleAssignment'][0])
    {
        return $this->createValidationRuleAssignmentAsyncWithHttpInfo($validation_rule_id, $force, $validation_rules_assignments_create_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createValidationRuleAssignmentAsyncWithHttpInfo
     *
     * Create Validation Rules Assignments
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  bool $force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param  \OpenAPI\Client\Model\ValidationRulesAssignmentsCreateRequestBody $validation_rules_assignments_create_request_body Specify the resource that you would like to assign the validation rule to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createValidationRuleAssignmentAsyncWithHttpInfo($validation_rule_id, $force = null, $validation_rules_assignments_create_request_body = null, string $contentType = self::contentTypes['createValidationRuleAssignment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ValidationRulesAssignmentsCreateResponseBody';
        $request = $this->createValidationRuleAssignmentRequest($validation_rule_id, $force, $validation_rules_assignments_create_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createValidationRuleAssignment'
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  bool $force If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)
     * @param  \OpenAPI\Client\Model\ValidationRulesAssignmentsCreateRequestBody $validation_rules_assignments_create_request_body Specify the resource that you would like to assign the validation rule to. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createValidationRuleAssignmentRequest($validation_rule_id, $force = null, $validation_rules_assignments_create_request_body = null, string $contentType = self::contentTypes['createValidationRuleAssignment'][0])
    {

        // verify the required parameter 'validation_rule_id' is set
        if ($validation_rule_id === null || (is_array($validation_rule_id) && count($validation_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_rule_id when calling createValidationRuleAssignment'
            );
        }




        $resourcePath = '/v1/validation-rules/{validationRuleId}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($validation_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'validationRuleId' . '}',
                ObjectSerializer::toPathValue($validation_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($validation_rules_assignments_create_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($validation_rules_assignments_create_request_body));
            } else {
                $httpBody = $validation_rules_assignments_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createValidationRules
     *
     * Create Validation Rules
     *
     * @param  \OpenAPI\Client\Model\ValidationRulesCreateRequestBody $validation_rules_create_request_body Specify the validation rules parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ValidationRulesCreateResponseBody
     */
    public function createValidationRules($validation_rules_create_request_body = null, string $contentType = self::contentTypes['createValidationRules'][0])
    {
        list($response) = $this->createValidationRulesWithHttpInfo($validation_rules_create_request_body, $contentType);
        return $response;
    }

    /**
     * Operation createValidationRulesWithHttpInfo
     *
     * Create Validation Rules
     *
     * @param  \OpenAPI\Client\Model\ValidationRulesCreateRequestBody $validation_rules_create_request_body Specify the validation rules parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ValidationRulesCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createValidationRulesWithHttpInfo($validation_rules_create_request_body = null, string $contentType = self::contentTypes['createValidationRules'][0])
    {
        $request = $this->createValidationRulesRequest($validation_rules_create_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ValidationRulesCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationRulesCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationRulesCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ValidationRulesCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationRulesCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createValidationRulesAsync
     *
     * Create Validation Rules
     *
     * @param  \OpenAPI\Client\Model\ValidationRulesCreateRequestBody $validation_rules_create_request_body Specify the validation rules parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createValidationRulesAsync($validation_rules_create_request_body = null, string $contentType = self::contentTypes['createValidationRules'][0])
    {
        return $this->createValidationRulesAsyncWithHttpInfo($validation_rules_create_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createValidationRulesAsyncWithHttpInfo
     *
     * Create Validation Rules
     *
     * @param  \OpenAPI\Client\Model\ValidationRulesCreateRequestBody $validation_rules_create_request_body Specify the validation rules parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createValidationRulesAsyncWithHttpInfo($validation_rules_create_request_body = null, string $contentType = self::contentTypes['createValidationRules'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ValidationRulesCreateResponseBody';
        $request = $this->createValidationRulesRequest($validation_rules_create_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createValidationRules'
     *
     * @param  \OpenAPI\Client\Model\ValidationRulesCreateRequestBody $validation_rules_create_request_body Specify the validation rules parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createValidationRulesRequest($validation_rules_create_request_body = null, string $contentType = self::contentTypes['createValidationRules'][0])
    {



        $resourcePath = '/v1/validation-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($validation_rules_create_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($validation_rules_create_request_body));
            } else {
                $httpBody = $validation_rules_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteValidationRuleAssignment
     *
     * Delete Validation Rule Assignment
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $assignment_id A unique validation rule assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteValidationRuleAssignment($validation_rule_id, $assignment_id, string $contentType = self::contentTypes['deleteValidationRuleAssignment'][0])
    {
        $this->deleteValidationRuleAssignmentWithHttpInfo($validation_rule_id, $assignment_id, $contentType);
    }

    /**
     * Operation deleteValidationRuleAssignmentWithHttpInfo
     *
     * Delete Validation Rule Assignment
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $assignment_id A unique validation rule assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteValidationRuleAssignmentWithHttpInfo($validation_rule_id, $assignment_id, string $contentType = self::contentTypes['deleteValidationRuleAssignment'][0])
    {
        $request = $this->deleteValidationRuleAssignmentRequest($validation_rule_id, $assignment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteValidationRuleAssignmentAsync
     *
     * Delete Validation Rule Assignment
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $assignment_id A unique validation rule assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteValidationRuleAssignmentAsync($validation_rule_id, $assignment_id, string $contentType = self::contentTypes['deleteValidationRuleAssignment'][0])
    {
        return $this->deleteValidationRuleAssignmentAsyncWithHttpInfo($validation_rule_id, $assignment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteValidationRuleAssignmentAsyncWithHttpInfo
     *
     * Delete Validation Rule Assignment
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $assignment_id A unique validation rule assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteValidationRuleAssignmentAsyncWithHttpInfo($validation_rule_id, $assignment_id, string $contentType = self::contentTypes['deleteValidationRuleAssignment'][0])
    {
        $returnType = '';
        $request = $this->deleteValidationRuleAssignmentRequest($validation_rule_id, $assignment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteValidationRuleAssignment'
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $assignment_id A unique validation rule assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRuleAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteValidationRuleAssignmentRequest($validation_rule_id, $assignment_id, string $contentType = self::contentTypes['deleteValidationRuleAssignment'][0])
    {

        // verify the required parameter 'validation_rule_id' is set
        if ($validation_rule_id === null || (is_array($validation_rule_id) && count($validation_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_rule_id when calling deleteValidationRuleAssignment'
            );
        }

        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null || (is_array($assignment_id) && count($assignment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignment_id when calling deleteValidationRuleAssignment'
            );
        }


        $resourcePath = '/v1/validation-rules/{validationRuleId}/assignments/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($validation_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'validationRuleId' . '}',
                ObjectSerializer::toPathValue($validation_rule_id),
                $resourcePath
            );
        }
        // path params
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteValidationRules
     *
     * Delete Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteValidationRules($validation_rule_id, string $contentType = self::contentTypes['deleteValidationRules'][0])
    {
        $this->deleteValidationRulesWithHttpInfo($validation_rule_id, $contentType);
    }

    /**
     * Operation deleteValidationRulesWithHttpInfo
     *
     * Delete Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteValidationRulesWithHttpInfo($validation_rule_id, string $contentType = self::contentTypes['deleteValidationRules'][0])
    {
        $request = $this->deleteValidationRulesRequest($validation_rule_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteValidationRulesAsync
     *
     * Delete Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteValidationRulesAsync($validation_rule_id, string $contentType = self::contentTypes['deleteValidationRules'][0])
    {
        return $this->deleteValidationRulesAsyncWithHttpInfo($validation_rule_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteValidationRulesAsyncWithHttpInfo
     *
     * Delete Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteValidationRulesAsyncWithHttpInfo($validation_rule_id, string $contentType = self::contentTypes['deleteValidationRules'][0])
    {
        $returnType = '';
        $request = $this->deleteValidationRulesRequest($validation_rule_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteValidationRules'
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteValidationRulesRequest($validation_rule_id, string $contentType = self::contentTypes['deleteValidationRules'][0])
    {

        // verify the required parameter 'validation_rule_id' is set
        if ($validation_rule_id === null || (is_array($validation_rule_id) && count($validation_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_rule_id when calling deleteValidationRules'
            );
        }


        $resourcePath = '/v1/validation-rules/{validationRuleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($validation_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'validationRuleId' . '}',
                ObjectSerializer::toPathValue($validation_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getValidationRule
     *
     * Get Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidationRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ValidationRulesGetResponseBody
     */
    public function getValidationRule($validation_rule_id, string $contentType = self::contentTypes['getValidationRule'][0])
    {
        list($response) = $this->getValidationRuleWithHttpInfo($validation_rule_id, $contentType);
        return $response;
    }

    /**
     * Operation getValidationRuleWithHttpInfo
     *
     * Get Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidationRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ValidationRulesGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getValidationRuleWithHttpInfo($validation_rule_id, string $contentType = self::contentTypes['getValidationRule'][0])
    {
        $request = $this->getValidationRuleRequest($validation_rule_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ValidationRulesGetResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationRulesGetResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationRulesGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ValidationRulesGetResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationRulesGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getValidationRuleAsync
     *
     * Get Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getValidationRuleAsync($validation_rule_id, string $contentType = self::contentTypes['getValidationRule'][0])
    {
        return $this->getValidationRuleAsyncWithHttpInfo($validation_rule_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getValidationRuleAsyncWithHttpInfo
     *
     * Get Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getValidationRuleAsyncWithHttpInfo($validation_rule_id, string $contentType = self::contentTypes['getValidationRule'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ValidationRulesGetResponseBody';
        $request = $this->getValidationRuleRequest($validation_rule_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getValidationRule'
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getValidationRuleRequest($validation_rule_id, string $contentType = self::contentTypes['getValidationRule'][0])
    {

        // verify the required parameter 'validation_rule_id' is set
        if ($validation_rule_id === null || (is_array($validation_rule_id) && count($validation_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_rule_id when calling getValidationRule'
            );
        }


        $resourcePath = '/v1/validation-rules/{validationRuleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($validation_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'validationRuleId' . '}',
                ObjectSerializer::toPathValue($validation_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listValidationRuleAssignments
     *
     * List Validation Rule Assignments
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRuleAssignments $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRuleAssignments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody
     */
    public function listValidationRuleAssignments($validation_rule_id, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listValidationRuleAssignments'][0])
    {
        list($response) = $this->listValidationRuleAssignmentsWithHttpInfo($validation_rule_id, $limit, $page, $order, $contentType);
        return $response;
    }

    /**
     * Operation listValidationRuleAssignmentsWithHttpInfo
     *
     * List Validation Rule Assignments
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRuleAssignments $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRuleAssignments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listValidationRuleAssignmentsWithHttpInfo($validation_rule_id, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listValidationRuleAssignments'][0])
    {
        $request = $this->listValidationRuleAssignmentsRequest($validation_rule_id, $limit, $page, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listValidationRuleAssignmentsAsync
     *
     * List Validation Rule Assignments
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRuleAssignments $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRuleAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listValidationRuleAssignmentsAsync($validation_rule_id, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listValidationRuleAssignments'][0])
    {
        return $this->listValidationRuleAssignmentsAsyncWithHttpInfo($validation_rule_id, $limit, $page, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listValidationRuleAssignmentsAsyncWithHttpInfo
     *
     * List Validation Rule Assignments
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRuleAssignments $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRuleAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listValidationRuleAssignmentsAsyncWithHttpInfo($validation_rule_id, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listValidationRuleAssignments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody';
        $request = $this->listValidationRuleAssignmentsRequest($validation_rule_id, $limit, $page, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listValidationRuleAssignments'
     *
     * @param  string $validation_rule_id Unique validation rule ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRuleAssignments $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRuleAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listValidationRuleAssignmentsRequest($validation_rule_id, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listValidationRuleAssignments'][0])
    {

        // verify the required parameter 'validation_rule_id' is set
        if ($validation_rule_id === null || (is_array($validation_rule_id) && count($validation_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_rule_id when calling listValidationRuleAssignments'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ValidationRulesApi.listValidationRuleAssignments, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ValidationRulesApi.listValidationRuleAssignments, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ValidationRulesApi.listValidationRuleAssignments, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ValidationRulesApi.listValidationRuleAssignments, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/validation-rules/{validationRuleId}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterOrderListValidationRuleAssignments', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($validation_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'validationRuleId' . '}',
                ObjectSerializer::toPathValue($validation_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listValidationRules
     *
     * List Validation Rules
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRules $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  \DateTime $start_date Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param  \DateTime $end_date Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ValidationRulesListResponseBody
     */
    public function listValidationRules($limit = null, $page = null, $order = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['listValidationRules'][0])
    {
        list($response) = $this->listValidationRulesWithHttpInfo($limit, $page, $order, $start_date, $end_date, $contentType);
        return $response;
    }

    /**
     * Operation listValidationRulesWithHttpInfo
     *
     * List Validation Rules
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRules $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  \DateTime $start_date Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param  \DateTime $end_date Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ValidationRulesListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listValidationRulesWithHttpInfo($limit = null, $page = null, $order = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['listValidationRules'][0])
    {
        $request = $this->listValidationRulesRequest($limit, $page, $order, $start_date, $end_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ValidationRulesListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationRulesListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationRulesListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ValidationRulesListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationRulesListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listValidationRulesAsync
     *
     * List Validation Rules
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRules $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  \DateTime $start_date Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param  \DateTime $end_date Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listValidationRulesAsync($limit = null, $page = null, $order = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['listValidationRules'][0])
    {
        return $this->listValidationRulesAsyncWithHttpInfo($limit, $page, $order, $start_date, $end_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listValidationRulesAsyncWithHttpInfo
     *
     * List Validation Rules
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRules $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  \DateTime $start_date Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param  \DateTime $end_date Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listValidationRulesAsyncWithHttpInfo($limit = null, $page = null, $order = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['listValidationRules'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ValidationRulesListResponseBody';
        $request = $this->listValidationRulesRequest($limit, $page, $order, $start_date, $end_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listValidationRules'
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListValidationRules $order This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  \DateTime $start_date Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)
     * @param  \DateTime $end_date Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listValidationRulesRequest($limit = null, $page = null, $order = null, $start_date = null, $end_date = null, string $contentType = self::contentTypes['listValidationRules'][0])
    {

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ValidationRulesApi.listValidationRules, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ValidationRulesApi.listValidationRules, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ValidationRulesApi.listValidationRules, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ValidationRulesApi.listValidationRules, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v1/validation-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterOrderListValidationRules', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listValidationRulesAssignments
     *
     * List Validation Rules&#39; Assignment(s)
     *
     * @param  string $related_object_id The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param  string $rule Validation rule ID. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRulesAssignments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody
     */
    public function listValidationRulesAssignments($related_object_id = null, $rule = null, $page = null, $limit = null, $order = null, string $contentType = self::contentTypes['listValidationRulesAssignments'][0])
    {
        list($response) = $this->listValidationRulesAssignmentsWithHttpInfo($related_object_id, $rule, $page, $limit, $order, $contentType);
        return $response;
    }

    /**
     * Operation listValidationRulesAssignmentsWithHttpInfo
     *
     * List Validation Rules&#39; Assignment(s)
     *
     * @param  string $related_object_id The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param  string $rule Validation rule ID. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRulesAssignments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listValidationRulesAssignmentsWithHttpInfo($related_object_id = null, $rule = null, $page = null, $limit = null, $order = null, string $contentType = self::contentTypes['listValidationRulesAssignments'][0])
    {
        $request = $this->listValidationRulesAssignmentsRequest($related_object_id, $rule, $page, $limit, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listValidationRulesAssignmentsAsync
     *
     * List Validation Rules&#39; Assignment(s)
     *
     * @param  string $related_object_id The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param  string $rule Validation rule ID. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRulesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listValidationRulesAssignmentsAsync($related_object_id = null, $rule = null, $page = null, $limit = null, $order = null, string $contentType = self::contentTypes['listValidationRulesAssignments'][0])
    {
        return $this->listValidationRulesAssignmentsAsyncWithHttpInfo($related_object_id, $rule, $page, $limit, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listValidationRulesAssignmentsAsyncWithHttpInfo
     *
     * List Validation Rules&#39; Assignment(s)
     *
     * @param  string $related_object_id The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param  string $rule Validation rule ID. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRulesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listValidationRulesAssignmentsAsyncWithHttpInfo($related_object_id = null, $rule = null, $page = null, $limit = null, $order = null, string $contentType = self::contentTypes['listValidationRulesAssignments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ValidationRulesAssignmentsListResponseBody';
        $request = $this->listValidationRulesAssignmentsRequest($related_object_id, $rule, $page, $limit, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listValidationRulesAssignments'
     *
     * @param  string $related_object_id The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)
     * @param  string $rule Validation rule ID. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $order Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listValidationRulesAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listValidationRulesAssignmentsRequest($related_object_id = null, $rule = null, $page = null, $limit = null, $order = null, string $contentType = self::contentTypes['listValidationRulesAssignments'][0])
    {



        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ValidationRulesApi.listValidationRulesAssignments, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ValidationRulesApi.listValidationRulesAssignments, must be bigger than or equal to 1.');
        }
        
        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ValidationRulesApi.listValidationRulesAssignments, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ValidationRulesApi.listValidationRulesAssignments, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/validation-rules-assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $related_object_id,
            'related_object_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rule,
            'rule', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateValidationRule
     *
     * Update Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  \OpenAPI\Client\Model\ValidationRulesUpdateRequestBody $validation_rules_update_request_body Specify the parameters to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidationRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ValidationRulesUpdateResponseBody
     */
    public function updateValidationRule($validation_rule_id, $validation_rules_update_request_body = null, string $contentType = self::contentTypes['updateValidationRule'][0])
    {
        list($response) = $this->updateValidationRuleWithHttpInfo($validation_rule_id, $validation_rules_update_request_body, $contentType);
        return $response;
    }

    /**
     * Operation updateValidationRuleWithHttpInfo
     *
     * Update Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  \OpenAPI\Client\Model\ValidationRulesUpdateRequestBody $validation_rules_update_request_body Specify the parameters to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidationRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ValidationRulesUpdateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateValidationRuleWithHttpInfo($validation_rule_id, $validation_rules_update_request_body = null, string $contentType = self::contentTypes['updateValidationRule'][0])
    {
        $request = $this->updateValidationRuleRequest($validation_rule_id, $validation_rules_update_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ValidationRulesUpdateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ValidationRulesUpdateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ValidationRulesUpdateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ValidationRulesUpdateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationRulesUpdateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateValidationRuleAsync
     *
     * Update Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  \OpenAPI\Client\Model\ValidationRulesUpdateRequestBody $validation_rules_update_request_body Specify the parameters to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateValidationRuleAsync($validation_rule_id, $validation_rules_update_request_body = null, string $contentType = self::contentTypes['updateValidationRule'][0])
    {
        return $this->updateValidationRuleAsyncWithHttpInfo($validation_rule_id, $validation_rules_update_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateValidationRuleAsyncWithHttpInfo
     *
     * Update Validation Rule
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  \OpenAPI\Client\Model\ValidationRulesUpdateRequestBody $validation_rules_update_request_body Specify the parameters to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateValidationRuleAsyncWithHttpInfo($validation_rule_id, $validation_rules_update_request_body = null, string $contentType = self::contentTypes['updateValidationRule'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ValidationRulesUpdateResponseBody';
        $request = $this->updateValidationRuleRequest($validation_rule_id, $validation_rules_update_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateValidationRule'
     *
     * @param  string $validation_rule_id A unique validation rule ID. (required)
     * @param  \OpenAPI\Client\Model\ValidationRulesUpdateRequestBody $validation_rules_update_request_body Specify the parameters to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidationRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateValidationRuleRequest($validation_rule_id, $validation_rules_update_request_body = null, string $contentType = self::contentTypes['updateValidationRule'][0])
    {

        // verify the required parameter 'validation_rule_id' is set
        if ($validation_rule_id === null || (is_array($validation_rule_id) && count($validation_rule_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validation_rule_id when calling updateValidationRule'
            );
        }



        $resourcePath = '/v1/validation-rules/{validationRuleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($validation_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'validationRuleId' . '}',
                ObjectSerializer::toPathValue($validation_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($validation_rules_update_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($validation_rules_update_request_body));
            } else {
                $httpBody = $validation_rules_update_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
