<?php
/**
 * RewardsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RewardsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RewardsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createReward' => [
            'application/json',
        ],
        'createRewardAssignment' => [
            'application/json',
        ],
        'deleteReward' => [
            'application/json',
        ],
        'deleteRewardAssignment' => [
            'application/json',
        ],
        'getReward' => [
            'application/json',
        ],
        'getRewardAssignment' => [
            'application/json',
        ],
        'listRewardAssignments' => [
            'application/json',
        ],
        'listRewards' => [
            'application/json',
        ],
        'updateReward' => [
            'application/json',
        ],
        'updateRewardAssignment' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createReward
     *
     * Create Reward
     *
     * @param  \OpenAPI\Client\Model\RewardsCreateRequestBody $rewardsCreateRequestBody Define parameters of the new reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RewardsCreateResponseBody
     */
    public function createReward($rewardsCreateRequestBody = null, string $contentType = self::contentTypes['createReward'][0])
    {
        list($response) = $this->createRewardWithHttpInfo($rewardsCreateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation createRewardWithHttpInfo
     *
     * Create Reward
     *
     * @param  \OpenAPI\Client\Model\RewardsCreateRequestBody $rewardsCreateRequestBody Define parameters of the new reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RewardsCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRewardWithHttpInfo($rewardsCreateRequestBody = null, string $contentType = self::contentTypes['createReward'][0])
    {
        $request = $this->createRewardRequest($rewardsCreateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RewardsCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RewardsCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RewardsCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RewardsCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RewardsCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRewardAsync
     *
     * Create Reward
     *
     * @param  \OpenAPI\Client\Model\RewardsCreateRequestBody $rewardsCreateRequestBody Define parameters of the new reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRewardAsync($rewardsCreateRequestBody = null, string $contentType = self::contentTypes['createReward'][0])
    {
        return $this->createRewardAsyncWithHttpInfo($rewardsCreateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRewardAsyncWithHttpInfo
     *
     * Create Reward
     *
     * @param  \OpenAPI\Client\Model\RewardsCreateRequestBody $rewardsCreateRequestBody Define parameters of the new reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRewardAsyncWithHttpInfo($rewardsCreateRequestBody = null, string $contentType = self::contentTypes['createReward'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RewardsCreateResponseBody';
        $request = $this->createRewardRequest($rewardsCreateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReward'
     *
     * @param  \OpenAPI\Client\Model\RewardsCreateRequestBody $rewardsCreateRequestBody Define parameters of the new reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRewardRequest($rewardsCreateRequestBody = null, string $contentType = self::contentTypes['createReward'][0])
    {



        $resourcePath = '/v1/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rewardsCreateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rewardsCreateRequestBody));
            } else {
                $httpBody = $rewardsCreateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRewardAssignment
     *
     * Create Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsCreateRequestBody $rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRewardAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RewardsAssignmentsCreateResponseBody
     */
    public function createRewardAssignment($rewardId, $rewardsAssignmentsCreateRequestBody = null, string $contentType = self::contentTypes['createRewardAssignment'][0])
    {
        list($response) = $this->createRewardAssignmentWithHttpInfo($rewardId, $rewardsAssignmentsCreateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation createRewardAssignmentWithHttpInfo
     *
     * Create Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsCreateRequestBody $rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRewardAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RewardsAssignmentsCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRewardAssignmentWithHttpInfo($rewardId, $rewardsAssignmentsCreateRequestBody = null, string $contentType = self::contentTypes['createRewardAssignment'][0])
    {
        $request = $this->createRewardAssignmentRequest($rewardId, $rewardsAssignmentsCreateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RewardsAssignmentsCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RewardsAssignmentsCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RewardsAssignmentsCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RewardsAssignmentsCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RewardsAssignmentsCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRewardAssignmentAsync
     *
     * Create Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsCreateRequestBody $rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRewardAssignmentAsync($rewardId, $rewardsAssignmentsCreateRequestBody = null, string $contentType = self::contentTypes['createRewardAssignment'][0])
    {
        return $this->createRewardAssignmentAsyncWithHttpInfo($rewardId, $rewardsAssignmentsCreateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRewardAssignmentAsyncWithHttpInfo
     *
     * Create Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsCreateRequestBody $rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRewardAssignmentAsyncWithHttpInfo($rewardId, $rewardsAssignmentsCreateRequestBody = null, string $contentType = self::contentTypes['createRewardAssignment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RewardsAssignmentsCreateResponseBody';
        $request = $this->createRewardAssignmentRequest($rewardId, $rewardsAssignmentsCreateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRewardAssignment'
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsCreateRequestBody $rewardsAssignmentsCreateRequestBody Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRewardAssignmentRequest($rewardId, $rewardsAssignmentsCreateRequestBody = null, string $contentType = self::contentTypes['createRewardAssignment'][0])
    {

        // verify the required parameter 'rewardId' is set
        if ($rewardId === null || (is_array($rewardId) && count($rewardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rewardId when calling createRewardAssignment'
            );
        }



        $resourcePath = '/v1/rewards/{rewardId}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rewardId !== null) {
            $resourcePath = str_replace(
                '{' . 'rewardId' . '}',
                ObjectSerializer::toPathValue($rewardId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rewardsAssignmentsCreateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rewardsAssignmentsCreateRequestBody));
            } else {
                $httpBody = $rewardsAssignmentsCreateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteReward
     *
     * Delete Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteReward($rewardId, string $contentType = self::contentTypes['deleteReward'][0])
    {
        $this->deleteRewardWithHttpInfo($rewardId, $contentType);
    }

    /**
     * Operation deleteRewardWithHttpInfo
     *
     * Delete Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRewardWithHttpInfo($rewardId, string $contentType = self::contentTypes['deleteReward'][0])
    {
        $request = $this->deleteRewardRequest($rewardId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRewardAsync
     *
     * Delete Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRewardAsync($rewardId, string $contentType = self::contentTypes['deleteReward'][0])
    {
        return $this->deleteRewardAsyncWithHttpInfo($rewardId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRewardAsyncWithHttpInfo
     *
     * Delete Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRewardAsyncWithHttpInfo($rewardId, string $contentType = self::contentTypes['deleteReward'][0])
    {
        $returnType = '';
        $request = $this->deleteRewardRequest($rewardId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteReward'
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRewardRequest($rewardId, string $contentType = self::contentTypes['deleteReward'][0])
    {

        // verify the required parameter 'rewardId' is set
        if ($rewardId === null || (is_array($rewardId) && count($rewardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rewardId when calling deleteReward'
            );
        }


        $resourcePath = '/v1/rewards/{rewardId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rewardId !== null) {
            $resourcePath = str_replace(
                '{' . 'rewardId' . '}',
                ObjectSerializer::toPathValue($rewardId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRewardAssignment
     *
     * Delete Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRewardAssignment($rewardId, $assignmentId, string $contentType = self::contentTypes['deleteRewardAssignment'][0])
    {
        $this->deleteRewardAssignmentWithHttpInfo($rewardId, $assignmentId, $contentType);
    }

    /**
     * Operation deleteRewardAssignmentWithHttpInfo
     *
     * Delete Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRewardAssignmentWithHttpInfo($rewardId, $assignmentId, string $contentType = self::contentTypes['deleteRewardAssignment'][0])
    {
        $request = $this->deleteRewardAssignmentRequest($rewardId, $assignmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRewardAssignmentAsync
     *
     * Delete Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRewardAssignmentAsync($rewardId, $assignmentId, string $contentType = self::contentTypes['deleteRewardAssignment'][0])
    {
        return $this->deleteRewardAssignmentAsyncWithHttpInfo($rewardId, $assignmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRewardAssignmentAsyncWithHttpInfo
     *
     * Delete Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRewardAssignmentAsyncWithHttpInfo($rewardId, $assignmentId, string $contentType = self::contentTypes['deleteRewardAssignment'][0])
    {
        $returnType = '';
        $request = $this->deleteRewardAssignmentRequest($rewardId, $assignmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRewardAssignment'
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRewardAssignmentRequest($rewardId, $assignmentId, string $contentType = self::contentTypes['deleteRewardAssignment'][0])
    {

        // verify the required parameter 'rewardId' is set
        if ($rewardId === null || (is_array($rewardId) && count($rewardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rewardId when calling deleteRewardAssignment'
            );
        }

        // verify the required parameter 'assignmentId' is set
        if ($assignmentId === null || (is_array($assignmentId) && count($assignmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignmentId when calling deleteRewardAssignment'
            );
        }


        $resourcePath = '/v1/rewards/{rewardId}/assignments/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rewardId !== null) {
            $resourcePath = str_replace(
                '{' . 'rewardId' . '}',
                ObjectSerializer::toPathValue($rewardId),
                $resourcePath
            );
        }
        // path params
        if ($assignmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReward
     *
     * Get Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Reward
     */
    public function getReward($rewardId, string $contentType = self::contentTypes['getReward'][0])
    {
        list($response) = $this->getRewardWithHttpInfo($rewardId, $contentType);
        return $response;
    }

    /**
     * Operation getRewardWithHttpInfo
     *
     * Get Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Reward, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRewardWithHttpInfo($rewardId, string $contentType = self::contentTypes['getReward'][0])
    {
        $request = $this->getRewardRequest($rewardId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Reward' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Reward' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Reward', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Reward';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Reward',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRewardAsync
     *
     * Get Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRewardAsync($rewardId, string $contentType = self::contentTypes['getReward'][0])
    {
        return $this->getRewardAsyncWithHttpInfo($rewardId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRewardAsyncWithHttpInfo
     *
     * Get Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRewardAsyncWithHttpInfo($rewardId, string $contentType = self::contentTypes['getReward'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Reward';
        $request = $this->getRewardRequest($rewardId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReward'
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRewardRequest($rewardId, string $contentType = self::contentTypes['getReward'][0])
    {

        // verify the required parameter 'rewardId' is set
        if ($rewardId === null || (is_array($rewardId) && count($rewardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rewardId when calling getReward'
            );
        }


        $resourcePath = '/v1/rewards/{rewardId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rewardId !== null) {
            $resourcePath = str_replace(
                '{' . 'rewardId' . '}',
                ObjectSerializer::toPathValue($rewardId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRewardAssignment
     *
     * Get Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RewardsAssignmentsGetResponseBody
     */
    public function getRewardAssignment($rewardId, $assignmentId, string $contentType = self::contentTypes['getRewardAssignment'][0])
    {
        list($response) = $this->getRewardAssignmentWithHttpInfo($rewardId, $assignmentId, $contentType);
        return $response;
    }

    /**
     * Operation getRewardAssignmentWithHttpInfo
     *
     * Get Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RewardsAssignmentsGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRewardAssignmentWithHttpInfo($rewardId, $assignmentId, string $contentType = self::contentTypes['getRewardAssignment'][0])
    {
        $request = $this->getRewardAssignmentRequest($rewardId, $assignmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RewardsAssignmentsGetResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RewardsAssignmentsGetResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RewardsAssignmentsGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RewardsAssignmentsGetResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RewardsAssignmentsGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRewardAssignmentAsync
     *
     * Get Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRewardAssignmentAsync($rewardId, $assignmentId, string $contentType = self::contentTypes['getRewardAssignment'][0])
    {
        return $this->getRewardAssignmentAsyncWithHttpInfo($rewardId, $assignmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRewardAssignmentAsyncWithHttpInfo
     *
     * Get Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRewardAssignmentAsyncWithHttpInfo($rewardId, $assignmentId, string $contentType = self::contentTypes['getRewardAssignment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RewardsAssignmentsGetResponseBody';
        $request = $this->getRewardAssignmentRequest($rewardId, $assignmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRewardAssignment'
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRewardAssignmentRequest($rewardId, $assignmentId, string $contentType = self::contentTypes['getRewardAssignment'][0])
    {

        // verify the required parameter 'rewardId' is set
        if ($rewardId === null || (is_array($rewardId) && count($rewardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rewardId when calling getRewardAssignment'
            );
        }

        // verify the required parameter 'assignmentId' is set
        if ($assignmentId === null || (is_array($assignmentId) && count($assignmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignmentId when calling getRewardAssignment'
            );
        }


        $resourcePath = '/v1/rewards/{rewardId}/assignments/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rewardId !== null) {
            $resourcePath = str_replace(
                '{' . 'rewardId' . '}',
                ObjectSerializer::toPathValue($rewardId),
                $resourcePath
            );
        }
        // path params
        if ($assignmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRewardAssignments
     *
     * List Reward Assignments
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewardAssignments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RewardsAssignmentsListResponseBody
     */
    public function listRewardAssignments($rewardId, $limit = null, $page = null, string $contentType = self::contentTypes['listRewardAssignments'][0])
    {
        list($response) = $this->listRewardAssignmentsWithHttpInfo($rewardId, $limit, $page, $contentType);
        return $response;
    }

    /**
     * Operation listRewardAssignmentsWithHttpInfo
     *
     * List Reward Assignments
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewardAssignments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RewardsAssignmentsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRewardAssignmentsWithHttpInfo($rewardId, $limit = null, $page = null, string $contentType = self::contentTypes['listRewardAssignments'][0])
    {
        $request = $this->listRewardAssignmentsRequest($rewardId, $limit, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RewardsAssignmentsListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RewardsAssignmentsListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RewardsAssignmentsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RewardsAssignmentsListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RewardsAssignmentsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRewardAssignmentsAsync
     *
     * List Reward Assignments
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewardAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRewardAssignmentsAsync($rewardId, $limit = null, $page = null, string $contentType = self::contentTypes['listRewardAssignments'][0])
    {
        return $this->listRewardAssignmentsAsyncWithHttpInfo($rewardId, $limit, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRewardAssignmentsAsyncWithHttpInfo
     *
     * List Reward Assignments
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewardAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRewardAssignmentsAsyncWithHttpInfo($rewardId, $limit = null, $page = null, string $contentType = self::contentTypes['listRewardAssignments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RewardsAssignmentsListResponseBody';
        $request = $this->listRewardAssignmentsRequest($rewardId, $limit, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRewardAssignments'
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewardAssignments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRewardAssignmentsRequest($rewardId, $limit = null, $page = null, string $contentType = self::contentTypes['listRewardAssignments'][0])
    {

        // verify the required parameter 'rewardId' is set
        if ($rewardId === null || (is_array($rewardId) && count($rewardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rewardId when calling listRewardAssignments'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RewardsApi.listRewardAssignments, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RewardsApi.listRewardAssignments, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling RewardsApi.listRewardAssignments, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling RewardsApi.listRewardAssignments, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/rewards/{rewardId}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($rewardId !== null) {
            $resourcePath = str_replace(
                '{' . 'rewardId' . '}',
                ObjectSerializer::toPathValue($rewardId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRewards
     *
     * List Rewards
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $assignmentId A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewards'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RewardsListResponseBody
     */
    public function listRewards($limit = null, $page = null, $assignmentId = null, string $contentType = self::contentTypes['listRewards'][0])
    {
        list($response) = $this->listRewardsWithHttpInfo($limit, $page, $assignmentId, $contentType);
        return $response;
    }

    /**
     * Operation listRewardsWithHttpInfo
     *
     * List Rewards
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $assignmentId A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewards'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RewardsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRewardsWithHttpInfo($limit = null, $page = null, $assignmentId = null, string $contentType = self::contentTypes['listRewards'][0])
    {
        $request = $this->listRewardsRequest($limit, $page, $assignmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RewardsListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RewardsListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RewardsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RewardsListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RewardsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRewardsAsync
     *
     * List Rewards
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $assignmentId A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRewardsAsync($limit = null, $page = null, $assignmentId = null, string $contentType = self::contentTypes['listRewards'][0])
    {
        return $this->listRewardsAsyncWithHttpInfo($limit, $page, $assignmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRewardsAsyncWithHttpInfo
     *
     * List Rewards
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $assignmentId A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRewardsAsyncWithHttpInfo($limit = null, $page = null, $assignmentId = null, string $contentType = self::contentTypes['listRewards'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RewardsListResponseBody';
        $request = $this->listRewardsRequest($limit, $page, $assignmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRewards'
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $assignmentId A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRewards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRewardsRequest($limit = null, $page = null, $assignmentId = null, string $contentType = self::contentTypes['listRewards'][0])
    {

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RewardsApi.listRewards, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RewardsApi.listRewards, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling RewardsApi.listRewards, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling RewardsApi.listRewards, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $assignmentId,
            'assignment_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateReward
     *
     * Update Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsUpdateRequestBody $rewardsUpdateRequestBody Define the parameters to be updated for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RewardsUpdateResponseBody
     */
    public function updateReward($rewardId, $rewardsUpdateRequestBody = null, string $contentType = self::contentTypes['updateReward'][0])
    {
        list($response) = $this->updateRewardWithHttpInfo($rewardId, $rewardsUpdateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation updateRewardWithHttpInfo
     *
     * Update Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsUpdateRequestBody $rewardsUpdateRequestBody Define the parameters to be updated for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReward'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RewardsUpdateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRewardWithHttpInfo($rewardId, $rewardsUpdateRequestBody = null, string $contentType = self::contentTypes['updateReward'][0])
    {
        $request = $this->updateRewardRequest($rewardId, $rewardsUpdateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RewardsUpdateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RewardsUpdateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RewardsUpdateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RewardsUpdateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RewardsUpdateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRewardAsync
     *
     * Update Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsUpdateRequestBody $rewardsUpdateRequestBody Define the parameters to be updated for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRewardAsync($rewardId, $rewardsUpdateRequestBody = null, string $contentType = self::contentTypes['updateReward'][0])
    {
        return $this->updateRewardAsyncWithHttpInfo($rewardId, $rewardsUpdateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRewardAsyncWithHttpInfo
     *
     * Update Reward
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsUpdateRequestBody $rewardsUpdateRequestBody Define the parameters to be updated for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRewardAsyncWithHttpInfo($rewardId, $rewardsUpdateRequestBody = null, string $contentType = self::contentTypes['updateReward'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RewardsUpdateResponseBody';
        $request = $this->updateRewardRequest($rewardId, $rewardsUpdateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateReward'
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsUpdateRequestBody $rewardsUpdateRequestBody Define the parameters to be updated for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateReward'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRewardRequest($rewardId, $rewardsUpdateRequestBody = null, string $contentType = self::contentTypes['updateReward'][0])
    {

        // verify the required parameter 'rewardId' is set
        if ($rewardId === null || (is_array($rewardId) && count($rewardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rewardId when calling updateReward'
            );
        }



        $resourcePath = '/v1/rewards/{rewardId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rewardId !== null) {
            $resourcePath = str_replace(
                '{' . 'rewardId' . '}',
                ObjectSerializer::toPathValue($rewardId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rewardsUpdateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rewardsUpdateRequestBody));
            } else {
                $httpBody = $rewardsUpdateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRewardAssignment
     *
     * Update Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsUpdateRequestBody $rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRewardAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RewardsAssignmentsUpdateResponseBody
     */
    public function updateRewardAssignment($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody = null, string $contentType = self::contentTypes['updateRewardAssignment'][0])
    {
        list($response) = $this->updateRewardAssignmentWithHttpInfo($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation updateRewardAssignmentWithHttpInfo
     *
     * Update Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsUpdateRequestBody $rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRewardAssignment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RewardsAssignmentsUpdateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRewardAssignmentWithHttpInfo($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody = null, string $contentType = self::contentTypes['updateRewardAssignment'][0])
    {
        $request = $this->updateRewardAssignmentRequest($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RewardsAssignmentsUpdateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RewardsAssignmentsUpdateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RewardsAssignmentsUpdateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RewardsAssignmentsUpdateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RewardsAssignmentsUpdateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRewardAssignmentAsync
     *
     * Update Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsUpdateRequestBody $rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRewardAssignmentAsync($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody = null, string $contentType = self::contentTypes['updateRewardAssignment'][0])
    {
        return $this->updateRewardAssignmentAsyncWithHttpInfo($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRewardAssignmentAsyncWithHttpInfo
     *
     * Update Reward Assignment
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsUpdateRequestBody $rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRewardAssignmentAsyncWithHttpInfo($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody = null, string $contentType = self::contentTypes['updateRewardAssignment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RewardsAssignmentsUpdateResponseBody';
        $request = $this->updateRewardAssignmentRequest($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRewardAssignment'
     *
     * @param  string $rewardId A unique reward ID. (required)
     * @param  string $assignmentId A unique reward assignment ID. (required)
     * @param  \OpenAPI\Client\Model\RewardsAssignmentsUpdateRequestBody $rewardsAssignmentsUpdateRequestBody Define the number of points required to exchange for the reward. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRewardAssignment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRewardAssignmentRequest($rewardId, $assignmentId, $rewardsAssignmentsUpdateRequestBody = null, string $contentType = self::contentTypes['updateRewardAssignment'][0])
    {

        // verify the required parameter 'rewardId' is set
        if ($rewardId === null || (is_array($rewardId) && count($rewardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rewardId when calling updateRewardAssignment'
            );
        }

        // verify the required parameter 'assignmentId' is set
        if ($assignmentId === null || (is_array($assignmentId) && count($assignmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignmentId when calling updateRewardAssignment'
            );
        }



        $resourcePath = '/v1/rewards/{rewardId}/assignments/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rewardId !== null) {
            $resourcePath = str_replace(
                '{' . 'rewardId' . '}',
                ObjectSerializer::toPathValue($rewardId),
                $resourcePath
            );
        }
        // path params
        if ($assignmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rewardsAssignmentsUpdateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rewardsAssignmentsUpdateRequestBody));
            } else {
                $httpBody = $rewardsAssignmentsUpdateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
