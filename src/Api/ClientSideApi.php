<?php
/**
 * ClientSideApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ClientSideApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClientSideApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'checkEligibilityClientSide' => [
            'application/json',
        ],
        'listPromotionTiersClientSide' => [
            'application/json',
        ],
        'redeemStackedDiscountsClientSide' => [
            'application/json',
        ],
        'trackCustomEventClientSide' => [
            'application/json',
        ],
        'validateStackedDiscountsClientSide' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkEligibilityClientSide
     *
     * Check Eligibility (client-side)
     *
     * @param  \OpenAPI\Client\Model\ClientQualificationsCheckEligibilityRequestBody $client_qualifications_check_eligibility_request_body Define order and customer context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkEligibilityClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ClientQualificationsCheckEligibilityResponseBody
     */
    public function checkEligibilityClientSide($client_qualifications_check_eligibility_request_body = null, string $contentType = self::contentTypes['checkEligibilityClientSide'][0])
    {
        list($response) = $this->checkEligibilityClientSideWithHttpInfo($client_qualifications_check_eligibility_request_body, $contentType);
        return $response;
    }

    /**
     * Operation checkEligibilityClientSideWithHttpInfo
     *
     * Check Eligibility (client-side)
     *
     * @param  \OpenAPI\Client\Model\ClientQualificationsCheckEligibilityRequestBody $client_qualifications_check_eligibility_request_body Define order and customer context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkEligibilityClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ClientQualificationsCheckEligibilityResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkEligibilityClientSideWithHttpInfo($client_qualifications_check_eligibility_request_body = null, string $contentType = self::contentTypes['checkEligibilityClientSide'][0])
    {
        $request = $this->checkEligibilityClientSideRequest($client_qualifications_check_eligibility_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ClientQualificationsCheckEligibilityResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ClientQualificationsCheckEligibilityResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ClientQualificationsCheckEligibilityResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ClientQualificationsCheckEligibilityResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ClientQualificationsCheckEligibilityResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkEligibilityClientSideAsync
     *
     * Check Eligibility (client-side)
     *
     * @param  \OpenAPI\Client\Model\ClientQualificationsCheckEligibilityRequestBody $client_qualifications_check_eligibility_request_body Define order and customer context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkEligibilityClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkEligibilityClientSideAsync($client_qualifications_check_eligibility_request_body = null, string $contentType = self::contentTypes['checkEligibilityClientSide'][0])
    {
        return $this->checkEligibilityClientSideAsyncWithHttpInfo($client_qualifications_check_eligibility_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkEligibilityClientSideAsyncWithHttpInfo
     *
     * Check Eligibility (client-side)
     *
     * @param  \OpenAPI\Client\Model\ClientQualificationsCheckEligibilityRequestBody $client_qualifications_check_eligibility_request_body Define order and customer context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkEligibilityClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkEligibilityClientSideAsyncWithHttpInfo($client_qualifications_check_eligibility_request_body = null, string $contentType = self::contentTypes['checkEligibilityClientSide'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ClientQualificationsCheckEligibilityResponseBody';
        $request = $this->checkEligibilityClientSideRequest($client_qualifications_check_eligibility_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkEligibilityClientSide'
     *
     * @param  \OpenAPI\Client\Model\ClientQualificationsCheckEligibilityRequestBody $client_qualifications_check_eligibility_request_body Define order and customer context. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkEligibilityClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkEligibilityClientSideRequest($client_qualifications_check_eligibility_request_body = null, string $contentType = self::contentTypes['checkEligibilityClientSide'][0])
    {



        $resourcePath = '/client/v1/qualifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($client_qualifications_check_eligibility_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($client_qualifications_check_eligibility_request_body));
            } else {
                $httpBody = $client_qualifications_check_eligibility_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Application-Id');
        if ($apiKey !== null) {
            $headers['X-Client-Application-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Token');
        if ($apiKey !== null) {
            $headers['X-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPromotionTiersClientSide
     *
     * List Promotion Tiers (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  bool $is_available This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiersClientSide $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ClientPromotionsTiersListResponseBody
     */
    public function listPromotionTiersClientSide($origin, $is_available = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiersClientSide'][0])
    {
        list($response) = $this->listPromotionTiersClientSideWithHttpInfo($origin, $is_available, $limit, $page, $order, $contentType);
        return $response;
    }

    /**
     * Operation listPromotionTiersClientSideWithHttpInfo
     *
     * List Promotion Tiers (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  bool $is_available This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiersClientSide $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ClientPromotionsTiersListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPromotionTiersClientSideWithHttpInfo($origin, $is_available = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiersClientSide'][0])
    {
        $request = $this->listPromotionTiersClientSideRequest($origin, $is_available, $limit, $page, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ClientPromotionsTiersListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ClientPromotionsTiersListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ClientPromotionsTiersListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ClientPromotionsTiersListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ClientPromotionsTiersListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPromotionTiersClientSideAsync
     *
     * List Promotion Tiers (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  bool $is_available This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiersClientSide $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPromotionTiersClientSideAsync($origin, $is_available = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiersClientSide'][0])
    {
        return $this->listPromotionTiersClientSideAsyncWithHttpInfo($origin, $is_available, $limit, $page, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPromotionTiersClientSideAsyncWithHttpInfo
     *
     * List Promotion Tiers (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  bool $is_available This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiersClientSide $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPromotionTiersClientSideAsyncWithHttpInfo($origin, $is_available = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiersClientSide'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ClientPromotionsTiersListResponseBody';
        $request = $this->listPromotionTiersClientSideRequest($origin, $is_available, $limit, $page, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPromotionTiersClientSide'
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  bool $is_available This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiersClientSide $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPromotionTiersClientSideRequest($origin, $is_available = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiersClientSide'][0])
    {

        // verify the required parameter 'origin' is set
        if ($origin === null || (is_array($origin) && count($origin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin when calling listPromotionTiersClientSide'
            );
        }


        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ClientSideApi.listPromotionTiersClientSide, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ClientSideApi.listPromotionTiersClientSide, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/client/v1/promotions/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_available,
            'is_available', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterOrderListPromotionTiersClientSide', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($origin !== null) {
            $headerParams['origin'] = ObjectSerializer::toHeaderValue($origin);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Application-Id');
        if ($apiKey !== null) {
            $headers['X-Client-Application-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Token');
        if ($apiKey !== null) {
            $headers['X-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redeemStackedDiscountsClientSide
     *
     * Redeem Stackable Discounts (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientRedemptionsRedeemRequestBody $client_redemptions_redeem_request_body client_redemptions_redeem_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ClientRedemptionsRedeemResponseBody
     */
    public function redeemStackedDiscountsClientSide($origin, $client_redemptions_redeem_request_body = null, string $contentType = self::contentTypes['redeemStackedDiscountsClientSide'][0])
    {
        list($response) = $this->redeemStackedDiscountsClientSideWithHttpInfo($origin, $client_redemptions_redeem_request_body, $contentType);
        return $response;
    }

    /**
     * Operation redeemStackedDiscountsClientSideWithHttpInfo
     *
     * Redeem Stackable Discounts (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientRedemptionsRedeemRequestBody $client_redemptions_redeem_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ClientRedemptionsRedeemResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function redeemStackedDiscountsClientSideWithHttpInfo($origin, $client_redemptions_redeem_request_body = null, string $contentType = self::contentTypes['redeemStackedDiscountsClientSide'][0])
    {
        $request = $this->redeemStackedDiscountsClientSideRequest($origin, $client_redemptions_redeem_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ClientRedemptionsRedeemResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ClientRedemptionsRedeemResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ClientRedemptionsRedeemResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ClientRedemptionsRedeemResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ClientRedemptionsRedeemResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation redeemStackedDiscountsClientSideAsync
     *
     * Redeem Stackable Discounts (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientRedemptionsRedeemRequestBody $client_redemptions_redeem_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redeemStackedDiscountsClientSideAsync($origin, $client_redemptions_redeem_request_body = null, string $contentType = self::contentTypes['redeemStackedDiscountsClientSide'][0])
    {
        return $this->redeemStackedDiscountsClientSideAsyncWithHttpInfo($origin, $client_redemptions_redeem_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redeemStackedDiscountsClientSideAsyncWithHttpInfo
     *
     * Redeem Stackable Discounts (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientRedemptionsRedeemRequestBody $client_redemptions_redeem_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redeemStackedDiscountsClientSideAsyncWithHttpInfo($origin, $client_redemptions_redeem_request_body = null, string $contentType = self::contentTypes['redeemStackedDiscountsClientSide'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ClientRedemptionsRedeemResponseBody';
        $request = $this->redeemStackedDiscountsClientSideRequest($origin, $client_redemptions_redeem_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redeemStackedDiscountsClientSide'
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientRedemptionsRedeemRequestBody $client_redemptions_redeem_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redeemStackedDiscountsClientSideRequest($origin, $client_redemptions_redeem_request_body = null, string $contentType = self::contentTypes['redeemStackedDiscountsClientSide'][0])
    {

        // verify the required parameter 'origin' is set
        if ($origin === null || (is_array($origin) && count($origin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin when calling redeemStackedDiscountsClientSide'
            );
        }



        $resourcePath = '/client/v1/redemptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($origin !== null) {
            $headerParams['origin'] = ObjectSerializer::toHeaderValue($origin);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($client_redemptions_redeem_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($client_redemptions_redeem_request_body));
            } else {
                $httpBody = $client_redemptions_redeem_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Application-Id');
        if ($apiKey !== null) {
            $headers['X-Client-Application-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Token');
        if ($apiKey !== null) {
            $headers['X-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trackCustomEventClientSide
     *
     * Track Custom Event (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientEventsCreateRequestBody $client_events_create_request_body Specify the details of the custom event. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackCustomEventClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ClientEventsCreateResponseBody
     */
    public function trackCustomEventClientSide($origin, $client_events_create_request_body = null, string $contentType = self::contentTypes['trackCustomEventClientSide'][0])
    {
        list($response) = $this->trackCustomEventClientSideWithHttpInfo($origin, $client_events_create_request_body, $contentType);
        return $response;
    }

    /**
     * Operation trackCustomEventClientSideWithHttpInfo
     *
     * Track Custom Event (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientEventsCreateRequestBody $client_events_create_request_body Specify the details of the custom event. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackCustomEventClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ClientEventsCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackCustomEventClientSideWithHttpInfo($origin, $client_events_create_request_body = null, string $contentType = self::contentTypes['trackCustomEventClientSide'][0])
    {
        $request = $this->trackCustomEventClientSideRequest($origin, $client_events_create_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ClientEventsCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ClientEventsCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ClientEventsCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ClientEventsCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ClientEventsCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trackCustomEventClientSideAsync
     *
     * Track Custom Event (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientEventsCreateRequestBody $client_events_create_request_body Specify the details of the custom event. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackCustomEventClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackCustomEventClientSideAsync($origin, $client_events_create_request_body = null, string $contentType = self::contentTypes['trackCustomEventClientSide'][0])
    {
        return $this->trackCustomEventClientSideAsyncWithHttpInfo($origin, $client_events_create_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackCustomEventClientSideAsyncWithHttpInfo
     *
     * Track Custom Event (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientEventsCreateRequestBody $client_events_create_request_body Specify the details of the custom event. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackCustomEventClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trackCustomEventClientSideAsyncWithHttpInfo($origin, $client_events_create_request_body = null, string $contentType = self::contentTypes['trackCustomEventClientSide'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ClientEventsCreateResponseBody';
        $request = $this->trackCustomEventClientSideRequest($origin, $client_events_create_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trackCustomEventClientSide'
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientEventsCreateRequestBody $client_events_create_request_body Specify the details of the custom event. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['trackCustomEventClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function trackCustomEventClientSideRequest($origin, $client_events_create_request_body = null, string $contentType = self::contentTypes['trackCustomEventClientSide'][0])
    {

        // verify the required parameter 'origin' is set
        if ($origin === null || (is_array($origin) && count($origin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin when calling trackCustomEventClientSide'
            );
        }



        $resourcePath = '/client/v1/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($origin !== null) {
            $headerParams['origin'] = ObjectSerializer::toHeaderValue($origin);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($client_events_create_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($client_events_create_request_body));
            } else {
                $httpBody = $client_events_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Application-Id');
        if ($apiKey !== null) {
            $headers['X-Client-Application-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Token');
        if ($apiKey !== null) {
            $headers['X-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateStackedDiscountsClientSide
     *
     * Validate Stackable Discounts (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientValidationsValidateRequestBody $client_validations_validate_request_body client_validations_validate_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ClientValidationsValidateResponseBody
     */
    public function validateStackedDiscountsClientSide($origin, $client_validations_validate_request_body = null, string $contentType = self::contentTypes['validateStackedDiscountsClientSide'][0])
    {
        list($response) = $this->validateStackedDiscountsClientSideWithHttpInfo($origin, $client_validations_validate_request_body, $contentType);
        return $response;
    }

    /**
     * Operation validateStackedDiscountsClientSideWithHttpInfo
     *
     * Validate Stackable Discounts (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientValidationsValidateRequestBody $client_validations_validate_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ClientValidationsValidateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateStackedDiscountsClientSideWithHttpInfo($origin, $client_validations_validate_request_body = null, string $contentType = self::contentTypes['validateStackedDiscountsClientSide'][0])
    {
        $request = $this->validateStackedDiscountsClientSideRequest($origin, $client_validations_validate_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ClientValidationsValidateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ClientValidationsValidateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ClientValidationsValidateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ClientValidationsValidateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ClientValidationsValidateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateStackedDiscountsClientSideAsync
     *
     * Validate Stackable Discounts (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientValidationsValidateRequestBody $client_validations_validate_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateStackedDiscountsClientSideAsync($origin, $client_validations_validate_request_body = null, string $contentType = self::contentTypes['validateStackedDiscountsClientSide'][0])
    {
        return $this->validateStackedDiscountsClientSideAsyncWithHttpInfo($origin, $client_validations_validate_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateStackedDiscountsClientSideAsyncWithHttpInfo
     *
     * Validate Stackable Discounts (client-side)
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientValidationsValidateRequestBody $client_validations_validate_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateStackedDiscountsClientSideAsyncWithHttpInfo($origin, $client_validations_validate_request_body = null, string $contentType = self::contentTypes['validateStackedDiscountsClientSide'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ClientValidationsValidateResponseBody';
        $request = $this->validateStackedDiscountsClientSideRequest($origin, $client_validations_validate_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateStackedDiscountsClientSide'
     *
     * @param  string $origin Indicates the origin (scheme, hostname, and port). (required)
     * @param  \OpenAPI\Client\Model\ClientValidationsValidateRequestBody $client_validations_validate_request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['validateStackedDiscountsClientSide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function validateStackedDiscountsClientSideRequest($origin, $client_validations_validate_request_body = null, string $contentType = self::contentTypes['validateStackedDiscountsClientSide'][0])
    {

        // verify the required parameter 'origin' is set
        if ($origin === null || (is_array($origin) && count($origin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin when calling validateStackedDiscountsClientSide'
            );
        }



        $resourcePath = '/client/v1/validations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($origin !== null) {
            $headerParams['origin'] = ObjectSerializer::toHeaderValue($origin);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($client_validations_validate_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($client_validations_validate_request_body));
            } else {
                $httpBody = $client_validations_validate_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Application-Id');
        if ($apiKey !== null) {
            $headers['X-Client-Application-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Client-Token');
        if ($apiKey !== null) {
            $headers['X-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
