<?php
/**
 * ReferralsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ReferralsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReferralsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'referralsAddHolders' => [
            'application/json',
        ],
        'referralsAddHolders1' => [
            'application/json',
        ],
        'referralsCodeHolders' => [
            'application/json',
        ],
        'referralsCodeHolders1' => [
            'application/json',
        ],
        'referralsRemoveHolder' => [
            'application/json',
        ],
        'referralsRemoveHolder1' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation referralsAddHolders
     *
     * Add Referral Code Holders
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody
     */
    public function referralsAddHolders($memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders'][0])
    {
        list($response) = $this->referralsAddHoldersWithHttpInfo($memberId, $referralsMembersHoldersCreateInBulkRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation referralsAddHoldersWithHttpInfo
     *
     * Add Referral Code Holders
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function referralsAddHoldersWithHttpInfo($memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders'][0])
    {
        $request = $this->referralsAddHoldersRequest($memberId, $referralsMembersHoldersCreateInBulkRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referralsAddHoldersAsync
     *
     * Add Referral Code Holders
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsAddHoldersAsync($memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders'][0])
    {
        return $this->referralsAddHoldersAsyncWithHttpInfo($memberId, $referralsMembersHoldersCreateInBulkRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referralsAddHoldersAsyncWithHttpInfo
     *
     * Add Referral Code Holders
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsAddHoldersAsyncWithHttpInfo($memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody';
        $request = $this->referralsAddHoldersRequest($memberId, $referralsMembersHoldersCreateInBulkRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referralsAddHolders'
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function referralsAddHoldersRequest($memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders'][0])
    {

        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling referralsAddHolders'
            );
        }



        $resourcePath = '/v1/referrals/members/{memberId}/holders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($referralsMembersHoldersCreateInBulkRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($referralsMembersHoldersCreateInBulkRequestBody));
            } else {
                $httpBody = $referralsMembersHoldersCreateInBulkRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referralsAddHolders1
     *
     * Add Referral Code Holders
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody
     */
    public function referralsAddHolders1($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders1'][0])
    {
        list($response) = $this->referralsAddHolders1WithHttpInfo($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation referralsAddHolders1WithHttpInfo
     *
     * Add Referral Code Holders
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function referralsAddHolders1WithHttpInfo($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders1'][0])
    {
        $request = $this->referralsAddHolders1Request($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referralsAddHolders1Async
     *
     * Add Referral Code Holders
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsAddHolders1Async($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders1'][0])
    {
        return $this->referralsAddHolders1AsyncWithHttpInfo($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referralsAddHolders1AsyncWithHttpInfo
     *
     * Add Referral Code Holders
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsAddHolders1AsyncWithHttpInfo($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkResponseBody';
        $request = $this->referralsAddHolders1Request($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referralsAddHolders1'
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  \OpenAPI\Client\Model\ReferralsMembersHoldersCreateInBulkRequestBody $referralsMembersHoldersCreateInBulkRequestBody Specify the customer data to be upserted as redeemable holders. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsAddHolders1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function referralsAddHolders1Request($campaignId, $memberId, $referralsMembersHoldersCreateInBulkRequestBody = null, string $contentType = self::contentTypes['referralsAddHolders1'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling referralsAddHolders1'
            );
        }

        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling referralsAddHolders1'
            );
        }



        $resourcePath = '/v1/referrals/{campaignId}/members/{memberId}/holders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($referralsMembersHoldersCreateInBulkRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($referralsMembersHoldersCreateInBulkRequestBody));
            } else {
                $httpBody = $referralsMembersHoldersCreateInBulkRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referralsCodeHolders
     *
     * List Referral Code Holders
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody
     */
    public function referralsCodeHolders($campaignId, $memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders'][0])
    {
        list($response) = $this->referralsCodeHoldersWithHttpInfo($campaignId, $memberId, $limit, $order, $startingAfterId, $filters, $contentType);
        return $response;
    }

    /**
     * Operation referralsCodeHoldersWithHttpInfo
     *
     * List Referral Code Holders
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function referralsCodeHoldersWithHttpInfo($campaignId, $memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders'][0])
    {
        $request = $this->referralsCodeHoldersRequest($campaignId, $memberId, $limit, $order, $startingAfterId, $filters, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referralsCodeHoldersAsync
     *
     * List Referral Code Holders
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsCodeHoldersAsync($campaignId, $memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders'][0])
    {
        return $this->referralsCodeHoldersAsyncWithHttpInfo($campaignId, $memberId, $limit, $order, $startingAfterId, $filters, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referralsCodeHoldersAsyncWithHttpInfo
     *
     * List Referral Code Holders
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsCodeHoldersAsyncWithHttpInfo($campaignId, $memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody';
        $request = $this->referralsCodeHoldersRequest($campaignId, $memberId, $limit, $order, $startingAfterId, $filters, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referralsCodeHolders'
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function referralsCodeHoldersRequest($campaignId, $memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling referralsCodeHolders'
            );
        }

        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling referralsCodeHolders'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ReferralsApi.referralsCodeHolders, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ReferralsApi.referralsCodeHolders, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v1/referrals/{campaignId}/members/{memberId}/holders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterOrderListRedeemables', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingAfterId,
            'starting_after_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referralsCodeHolders1
     *
     * List Referral Code Holders
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody
     */
    public function referralsCodeHolders1($memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders1'][0])
    {
        list($response) = $this->referralsCodeHolders1WithHttpInfo($memberId, $limit, $order, $startingAfterId, $filters, $contentType);
        return $response;
    }

    /**
     * Operation referralsCodeHolders1WithHttpInfo
     *
     * List Referral Code Holders
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function referralsCodeHolders1WithHttpInfo($memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders1'][0])
    {
        $request = $this->referralsCodeHolders1Request($memberId, $limit, $order, $startingAfterId, $filters, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation referralsCodeHolders1Async
     *
     * List Referral Code Holders
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsCodeHolders1Async($memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders1'][0])
    {
        return $this->referralsCodeHolders1AsyncWithHttpInfo($memberId, $limit, $order, $startingAfterId, $filters, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referralsCodeHolders1AsyncWithHttpInfo
     *
     * List Referral Code Holders
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsCodeHolders1AsyncWithHttpInfo($memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders1'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ReferralsMembersHoldersListResponseBody';
        $request = $this->referralsCodeHolders1Request($memberId, $limit, $order, $startingAfterId, $filters, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referralsCodeHolders1'
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListRedeemables $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)
     * @param  ParameterFiltersListReferralsRedeemableHolders $filters Filters for listing customer redeemables. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsCodeHolders1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function referralsCodeHolders1Request($memberId, $limit = null, $order = null, $startingAfterId = null, $filters = null, string $contentType = self::contentTypes['referralsCodeHolders1'][0])
    {

        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling referralsCodeHolders1'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ReferralsApi.referralsCodeHolders1, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ReferralsApi.referralsCodeHolders1, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v1/referrals/members/{memberId}/holders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterOrderListRedeemables', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingAfterId,
            'starting_after_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referralsRemoveHolder
     *
     * Remove Referral Card Holder
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function referralsRemoveHolder($memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder'][0])
    {
        $this->referralsRemoveHolderWithHttpInfo($memberId, $holderId, $contentType);
    }

    /**
     * Operation referralsRemoveHolderWithHttpInfo
     *
     * Remove Referral Card Holder
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function referralsRemoveHolderWithHttpInfo($memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder'][0])
    {
        $request = $this->referralsRemoveHolderRequest($memberId, $holderId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation referralsRemoveHolderAsync
     *
     * Remove Referral Card Holder
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsRemoveHolderAsync($memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder'][0])
    {
        return $this->referralsRemoveHolderAsyncWithHttpInfo($memberId, $holderId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referralsRemoveHolderAsyncWithHttpInfo
     *
     * Remove Referral Card Holder
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsRemoveHolderAsyncWithHttpInfo($memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder'][0])
    {
        $returnType = '';
        $request = $this->referralsRemoveHolderRequest($memberId, $holderId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referralsRemoveHolder'
     *
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function referralsRemoveHolderRequest($memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder'][0])
    {

        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling referralsRemoveHolder'
            );
        }

        // verify the required parameter 'holderId' is set
        if ($holderId === null || (is_array($holderId) && count($holderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $holderId when calling referralsRemoveHolder'
            );
        }


        $resourcePath = '/v1/referrals/members/{memberId}/holders/{holderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }
        // path params
        if ($holderId !== null) {
            $resourcePath = str_replace(
                '{' . 'holderId' . '}',
                ObjectSerializer::toPathValue($holderId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation referralsRemoveHolder1
     *
     * Remove Referral Card Holder
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function referralsRemoveHolder1($campaignId, $memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder1'][0])
    {
        $this->referralsRemoveHolder1WithHttpInfo($campaignId, $memberId, $holderId, $contentType);
    }

    /**
     * Operation referralsRemoveHolder1WithHttpInfo
     *
     * Remove Referral Card Holder
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder1'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function referralsRemoveHolder1WithHttpInfo($campaignId, $memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder1'][0])
    {
        $request = $this->referralsRemoveHolder1Request($campaignId, $memberId, $holderId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation referralsRemoveHolder1Async
     *
     * Remove Referral Card Holder
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsRemoveHolder1Async($campaignId, $memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder1'][0])
    {
        return $this->referralsRemoveHolder1AsyncWithHttpInfo($campaignId, $memberId, $holderId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation referralsRemoveHolder1AsyncWithHttpInfo
     *
     * Remove Referral Card Holder
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function referralsRemoveHolder1AsyncWithHttpInfo($campaignId, $memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder1'][0])
    {
        $returnType = '';
        $request = $this->referralsRemoveHolder1Request($campaignId, $memberId, $holderId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'referralsRemoveHolder1'
     *
     * @param  string $campaignId Unique identifier of a referral program campaign. (required)
     * @param  string $memberId Unique referral code or its identifier. (required)
     * @param  string $holderId Unique identifier of a redeemable holder. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['referralsRemoveHolder1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function referralsRemoveHolder1Request($campaignId, $memberId, $holderId, string $contentType = self::contentTypes['referralsRemoveHolder1'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling referralsRemoveHolder1'
            );
        }

        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling referralsRemoveHolder1'
            );
        }

        // verify the required parameter 'holderId' is set
        if ($holderId === null || (is_array($holderId) && count($holderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $holderId when calling referralsRemoveHolder1'
            );
        }


        $resourcePath = '/v1/referrals/{campaignId}/members/{memberId}/holders/{holderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }
        // path params
        if ($holderId !== null) {
            $resourcePath = str_replace(
                '{' . 'holderId' . '}',
                ObjectSerializer::toPathValue($holderId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
