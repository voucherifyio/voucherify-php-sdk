<?php
/**
 * PromotionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PromotionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PromotionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addPromotionTierToCampaign' => [
            'application/json',
        ],
        'createPromotionStack' => [
            'application/json',
        ],
        'deletePromotionStack' => [
            'application/json',
        ],
        'deletePromotionTier' => [
            'application/json',
        ],
        'disablePromotionTier' => [
            'application/json',
        ],
        'enablePromotionTier' => [
            'application/json',
        ],
        'getPromotionStack' => [
            'application/json',
        ],
        'getPromotionTier' => [
            'application/json',
        ],
        'listAllPromotionStacks' => [
            'application/json',
        ],
        'listPromotionStacksInCampaign' => [
            'application/json',
        ],
        'listPromotionTiers' => [
            'application/json',
        ],
        'listPromotionTiersFromCampaign' => [
            'application/json',
        ],
        'updatePromotionStack' => [
            'application/json',
        ],
        'updatePromotionTier' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addPromotionTierToCampaign
     *
     * Add Promotion Tier to Campaign
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersCreateRequestBody $promotionsTiersCreateRequestBody Specify the promotion tier parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPromotionTierToCampaign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsTiersCreateResponseBody
     */
    public function addPromotionTierToCampaign($campaignId, $promotionsTiersCreateRequestBody = null, string $contentType = self::contentTypes['addPromotionTierToCampaign'][0])
    {
        list($response) = $this->addPromotionTierToCampaignWithHttpInfo($campaignId, $promotionsTiersCreateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation addPromotionTierToCampaignWithHttpInfo
     *
     * Add Promotion Tier to Campaign
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersCreateRequestBody $promotionsTiersCreateRequestBody Specify the promotion tier parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPromotionTierToCampaign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsTiersCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPromotionTierToCampaignWithHttpInfo($campaignId, $promotionsTiersCreateRequestBody = null, string $contentType = self::contentTypes['addPromotionTierToCampaign'][0])
    {
        $request = $this->addPromotionTierToCampaignRequest($campaignId, $promotionsTiersCreateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsTiersCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsTiersCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsTiersCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsTiersCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsTiersCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPromotionTierToCampaignAsync
     *
     * Add Promotion Tier to Campaign
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersCreateRequestBody $promotionsTiersCreateRequestBody Specify the promotion tier parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPromotionTierToCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPromotionTierToCampaignAsync($campaignId, $promotionsTiersCreateRequestBody = null, string $contentType = self::contentTypes['addPromotionTierToCampaign'][0])
    {
        return $this->addPromotionTierToCampaignAsyncWithHttpInfo($campaignId, $promotionsTiersCreateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPromotionTierToCampaignAsyncWithHttpInfo
     *
     * Add Promotion Tier to Campaign
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersCreateRequestBody $promotionsTiersCreateRequestBody Specify the promotion tier parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPromotionTierToCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPromotionTierToCampaignAsyncWithHttpInfo($campaignId, $promotionsTiersCreateRequestBody = null, string $contentType = self::contentTypes['addPromotionTierToCampaign'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsTiersCreateResponseBody';
        $request = $this->addPromotionTierToCampaignRequest($campaignId, $promotionsTiersCreateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPromotionTierToCampaign'
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersCreateRequestBody $promotionsTiersCreateRequestBody Specify the promotion tier parameters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPromotionTierToCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addPromotionTierToCampaignRequest($campaignId, $promotionsTiersCreateRequestBody = null, string $contentType = self::contentTypes['addPromotionTierToCampaign'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling addPromotionTierToCampaign'
            );
        }



        $resourcePath = '/v1/promotions/{campaignId}/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($promotionsTiersCreateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($promotionsTiersCreateRequestBody));
            } else {
                $httpBody = $promotionsTiersCreateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPromotionStack
     *
     * Create Promotion Stack
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksCreateRequestBody $promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPromotionStack'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsStacksCreateResponseBody
     */
    public function createPromotionStack($campaignId, $promotionsStacksCreateRequestBody = null, string $contentType = self::contentTypes['createPromotionStack'][0])
    {
        list($response) = $this->createPromotionStackWithHttpInfo($campaignId, $promotionsStacksCreateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation createPromotionStackWithHttpInfo
     *
     * Create Promotion Stack
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksCreateRequestBody $promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPromotionStack'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsStacksCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPromotionStackWithHttpInfo($campaignId, $promotionsStacksCreateRequestBody = null, string $contentType = self::contentTypes['createPromotionStack'][0])
    {
        $request = $this->createPromotionStackRequest($campaignId, $promotionsStacksCreateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsStacksCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsStacksCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsStacksCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsStacksCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsStacksCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPromotionStackAsync
     *
     * Create Promotion Stack
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksCreateRequestBody $promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPromotionStackAsync($campaignId, $promotionsStacksCreateRequestBody = null, string $contentType = self::contentTypes['createPromotionStack'][0])
    {
        return $this->createPromotionStackAsyncWithHttpInfo($campaignId, $promotionsStacksCreateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPromotionStackAsyncWithHttpInfo
     *
     * Create Promotion Stack
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksCreateRequestBody $promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPromotionStackAsyncWithHttpInfo($campaignId, $promotionsStacksCreateRequestBody = null, string $contentType = self::contentTypes['createPromotionStack'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsStacksCreateResponseBody';
        $request = $this->createPromotionStackRequest($campaignId, $promotionsStacksCreateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPromotionStack'
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksCreateRequestBody $promotionsStacksCreateRequestBody Specify the order of promotion tiers for the promotion stack. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPromotionStackRequest($campaignId, $promotionsStacksCreateRequestBody = null, string $contentType = self::contentTypes['createPromotionStack'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling createPromotionStack'
            );
        }



        $resourcePath = '/v1/promotions/{campaignId}/stacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($promotionsStacksCreateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($promotionsStacksCreateRequestBody));
            } else {
                $httpBody = $promotionsStacksCreateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePromotionStack
     *
     * Delete Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionStack'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePromotionStack($campaignId, $stackId, string $contentType = self::contentTypes['deletePromotionStack'][0])
    {
        $this->deletePromotionStackWithHttpInfo($campaignId, $stackId, $contentType);
    }

    /**
     * Operation deletePromotionStackWithHttpInfo
     *
     * Delete Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionStack'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePromotionStackWithHttpInfo($campaignId, $stackId, string $contentType = self::contentTypes['deletePromotionStack'][0])
    {
        $request = $this->deletePromotionStackRequest($campaignId, $stackId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePromotionStackAsync
     *
     * Delete Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePromotionStackAsync($campaignId, $stackId, string $contentType = self::contentTypes['deletePromotionStack'][0])
    {
        return $this->deletePromotionStackAsyncWithHttpInfo($campaignId, $stackId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePromotionStackAsyncWithHttpInfo
     *
     * Delete Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePromotionStackAsyncWithHttpInfo($campaignId, $stackId, string $contentType = self::contentTypes['deletePromotionStack'][0])
    {
        $returnType = '';
        $request = $this->deletePromotionStackRequest($campaignId, $stackId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePromotionStack'
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePromotionStackRequest($campaignId, $stackId, string $contentType = self::contentTypes['deletePromotionStack'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling deletePromotionStack'
            );
        }

        // verify the required parameter 'stackId' is set
        if ($stackId === null || (is_array($stackId) && count($stackId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stackId when calling deletePromotionStack'
            );
        }


        $resourcePath = '/v1/promotions/{campaignId}/stacks/{stackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }
        // path params
        if ($stackId !== null) {
            $resourcePath = str_replace(
                '{' . 'stackId' . '}',
                ObjectSerializer::toPathValue($stackId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePromotionTier
     *
     * Delete Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePromotionTier($promotionTierId, string $contentType = self::contentTypes['deletePromotionTier'][0])
    {
        $this->deletePromotionTierWithHttpInfo($promotionTierId, $contentType);
    }

    /**
     * Operation deletePromotionTierWithHttpInfo
     *
     * Delete Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePromotionTierWithHttpInfo($promotionTierId, string $contentType = self::contentTypes['deletePromotionTier'][0])
    {
        $request = $this->deletePromotionTierRequest($promotionTierId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePromotionTierAsync
     *
     * Delete Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePromotionTierAsync($promotionTierId, string $contentType = self::contentTypes['deletePromotionTier'][0])
    {
        return $this->deletePromotionTierAsyncWithHttpInfo($promotionTierId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePromotionTierAsyncWithHttpInfo
     *
     * Delete Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePromotionTierAsyncWithHttpInfo($promotionTierId, string $contentType = self::contentTypes['deletePromotionTier'][0])
    {
        $returnType = '';
        $request = $this->deletePromotionTierRequest($promotionTierId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePromotionTier'
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePromotionTierRequest($promotionTierId, string $contentType = self::contentTypes['deletePromotionTier'][0])
    {

        // verify the required parameter 'promotionTierId' is set
        if ($promotionTierId === null || (is_array($promotionTierId) && count($promotionTierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionTierId when calling deletePromotionTier'
            );
        }


        $resourcePath = '/v1/promotions/tiers/{promotionTierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotionTierId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionTierId' . '}',
                ObjectSerializer::toPathValue($promotionTierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disablePromotionTier
     *
     * Disable Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsTiersDisableResponseBody
     */
    public function disablePromotionTier($promotionTierId, string $contentType = self::contentTypes['disablePromotionTier'][0])
    {
        list($response) = $this->disablePromotionTierWithHttpInfo($promotionTierId, $contentType);
        return $response;
    }

    /**
     * Operation disablePromotionTierWithHttpInfo
     *
     * Disable Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsTiersDisableResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function disablePromotionTierWithHttpInfo($promotionTierId, string $contentType = self::contentTypes['disablePromotionTier'][0])
    {
        $request = $this->disablePromotionTierRequest($promotionTierId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsTiersDisableResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsTiersDisableResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsTiersDisableResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsTiersDisableResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsTiersDisableResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disablePromotionTierAsync
     *
     * Disable Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disablePromotionTierAsync($promotionTierId, string $contentType = self::contentTypes['disablePromotionTier'][0])
    {
        return $this->disablePromotionTierAsyncWithHttpInfo($promotionTierId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disablePromotionTierAsyncWithHttpInfo
     *
     * Disable Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disablePromotionTierAsyncWithHttpInfo($promotionTierId, string $contentType = self::contentTypes['disablePromotionTier'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsTiersDisableResponseBody';
        $request = $this->disablePromotionTierRequest($promotionTierId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disablePromotionTier'
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disablePromotionTierRequest($promotionTierId, string $contentType = self::contentTypes['disablePromotionTier'][0])
    {

        // verify the required parameter 'promotionTierId' is set
        if ($promotionTierId === null || (is_array($promotionTierId) && count($promotionTierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionTierId when calling disablePromotionTier'
            );
        }


        $resourcePath = '/v1/promotions/tiers/{promotionTierId}/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotionTierId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionTierId' . '}',
                ObjectSerializer::toPathValue($promotionTierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enablePromotionTier
     *
     * Enable Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsTiersEnableResponseBody
     */
    public function enablePromotionTier($promotionTierId, string $contentType = self::contentTypes['enablePromotionTier'][0])
    {
        list($response) = $this->enablePromotionTierWithHttpInfo($promotionTierId, $contentType);
        return $response;
    }

    /**
     * Operation enablePromotionTierWithHttpInfo
     *
     * Enable Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsTiersEnableResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function enablePromotionTierWithHttpInfo($promotionTierId, string $contentType = self::contentTypes['enablePromotionTier'][0])
    {
        $request = $this->enablePromotionTierRequest($promotionTierId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsTiersEnableResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsTiersEnableResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsTiersEnableResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsTiersEnableResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsTiersEnableResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enablePromotionTierAsync
     *
     * Enable Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enablePromotionTierAsync($promotionTierId, string $contentType = self::contentTypes['enablePromotionTier'][0])
    {
        return $this->enablePromotionTierAsyncWithHttpInfo($promotionTierId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enablePromotionTierAsyncWithHttpInfo
     *
     * Enable Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enablePromotionTierAsyncWithHttpInfo($promotionTierId, string $contentType = self::contentTypes['enablePromotionTier'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsTiersEnableResponseBody';
        $request = $this->enablePromotionTierRequest($promotionTierId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enablePromotionTier'
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enablePromotionTierRequest($promotionTierId, string $contentType = self::contentTypes['enablePromotionTier'][0])
    {

        // verify the required parameter 'promotionTierId' is set
        if ($promotionTierId === null || (is_array($promotionTierId) && count($promotionTierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionTierId when calling enablePromotionTier'
            );
        }


        $resourcePath = '/v1/promotions/tiers/{promotionTierId}/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotionTierId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionTierId' . '}',
                ObjectSerializer::toPathValue($promotionTierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPromotionStack
     *
     * Get Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionStack'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsStacksGetResponseBody
     */
    public function getPromotionStack($campaignId, $stackId, string $contentType = self::contentTypes['getPromotionStack'][0])
    {
        list($response) = $this->getPromotionStackWithHttpInfo($campaignId, $stackId, $contentType);
        return $response;
    }

    /**
     * Operation getPromotionStackWithHttpInfo
     *
     * Get Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionStack'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsStacksGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPromotionStackWithHttpInfo($campaignId, $stackId, string $contentType = self::contentTypes['getPromotionStack'][0])
    {
        $request = $this->getPromotionStackRequest($campaignId, $stackId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsStacksGetResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsStacksGetResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsStacksGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsStacksGetResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsStacksGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPromotionStackAsync
     *
     * Get Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromotionStackAsync($campaignId, $stackId, string $contentType = self::contentTypes['getPromotionStack'][0])
    {
        return $this->getPromotionStackAsyncWithHttpInfo($campaignId, $stackId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPromotionStackAsyncWithHttpInfo
     *
     * Get Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromotionStackAsyncWithHttpInfo($campaignId, $stackId, string $contentType = self::contentTypes['getPromotionStack'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsStacksGetResponseBody';
        $request = $this->getPromotionStackRequest($campaignId, $stackId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPromotionStack'
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPromotionStackRequest($campaignId, $stackId, string $contentType = self::contentTypes['getPromotionStack'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling getPromotionStack'
            );
        }

        // verify the required parameter 'stackId' is set
        if ($stackId === null || (is_array($stackId) && count($stackId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stackId when calling getPromotionStack'
            );
        }


        $resourcePath = '/v1/promotions/{campaignId}/stacks/{stackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }
        // path params
        if ($stackId !== null) {
            $resourcePath = str_replace(
                '{' . 'stackId' . '}',
                ObjectSerializer::toPathValue($stackId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPromotionTier
     *
     * Get Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsTiersGetResponseBody
     */
    public function getPromotionTier($promotionTierId, string $contentType = self::contentTypes['getPromotionTier'][0])
    {
        list($response) = $this->getPromotionTierWithHttpInfo($promotionTierId, $contentType);
        return $response;
    }

    /**
     * Operation getPromotionTierWithHttpInfo
     *
     * Get Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsTiersGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPromotionTierWithHttpInfo($promotionTierId, string $contentType = self::contentTypes['getPromotionTier'][0])
    {
        $request = $this->getPromotionTierRequest($promotionTierId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsTiersGetResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsTiersGetResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsTiersGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsTiersGetResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsTiersGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPromotionTierAsync
     *
     * Get Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromotionTierAsync($promotionTierId, string $contentType = self::contentTypes['getPromotionTier'][0])
    {
        return $this->getPromotionTierAsyncWithHttpInfo($promotionTierId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPromotionTierAsyncWithHttpInfo
     *
     * Get Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromotionTierAsyncWithHttpInfo($promotionTierId, string $contentType = self::contentTypes['getPromotionTier'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsTiersGetResponseBody';
        $request = $this->getPromotionTierRequest($promotionTierId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPromotionTier'
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPromotionTierRequest($promotionTierId, string $contentType = self::contentTypes['getPromotionTier'][0])
    {

        // verify the required parameter 'promotionTierId' is set
        if ($promotionTierId === null || (is_array($promotionTierId) && count($promotionTierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionTierId when calling getPromotionTier'
            );
        }


        $resourcePath = '/v1/promotions/tiers/{promotionTierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotionTierId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionTierId' . '}',
                ObjectSerializer::toPathValue($promotionTierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllPromotionStacks
     *
     * List Promotion Stacks
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListAllPromotionStacks $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  ParameterCreatedBeforeAfter $createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  ParameterUpdatedBeforeAfter $updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllPromotionStacks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsStacksListResponseBody
     */
    public function listAllPromotionStacks($limit = null, $page = null, $order = null, $createdAt = null, $updatedAt = null, string $contentType = self::contentTypes['listAllPromotionStacks'][0])
    {
        list($response) = $this->listAllPromotionStacksWithHttpInfo($limit, $page, $order, $createdAt, $updatedAt, $contentType);
        return $response;
    }

    /**
     * Operation listAllPromotionStacksWithHttpInfo
     *
     * List Promotion Stacks
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListAllPromotionStacks $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  ParameterCreatedBeforeAfter $createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  ParameterUpdatedBeforeAfter $updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllPromotionStacks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsStacksListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllPromotionStacksWithHttpInfo($limit = null, $page = null, $order = null, $createdAt = null, $updatedAt = null, string $contentType = self::contentTypes['listAllPromotionStacks'][0])
    {
        $request = $this->listAllPromotionStacksRequest($limit, $page, $order, $createdAt, $updatedAt, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsStacksListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsStacksListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsStacksListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsStacksListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsStacksListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllPromotionStacksAsync
     *
     * List Promotion Stacks
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListAllPromotionStacks $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  ParameterCreatedBeforeAfter $createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  ParameterUpdatedBeforeAfter $updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllPromotionStacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllPromotionStacksAsync($limit = null, $page = null, $order = null, $createdAt = null, $updatedAt = null, string $contentType = self::contentTypes['listAllPromotionStacks'][0])
    {
        return $this->listAllPromotionStacksAsyncWithHttpInfo($limit, $page, $order, $createdAt, $updatedAt, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllPromotionStacksAsyncWithHttpInfo
     *
     * List Promotion Stacks
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListAllPromotionStacks $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  ParameterCreatedBeforeAfter $createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  ParameterUpdatedBeforeAfter $updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllPromotionStacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllPromotionStacksAsyncWithHttpInfo($limit = null, $page = null, $order = null, $createdAt = null, $updatedAt = null, string $contentType = self::contentTypes['listAllPromotionStacks'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsStacksListResponseBody';
        $request = $this->listAllPromotionStacksRequest($limit, $page, $order, $createdAt, $updatedAt, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllPromotionStacks'
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListAllPromotionStacks $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  ParameterCreatedBeforeAfter $createdAt A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  ParameterUpdatedBeforeAfter $updatedAt A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAllPromotionStacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAllPromotionStacksRequest($limit = null, $page = null, $order = null, $createdAt = null, $updatedAt = null, string $contentType = self::contentTypes['listAllPromotionStacks'][0])
    {

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsApi.listAllPromotionStacks, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsApi.listAllPromotionStacks, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling PromotionsApi.listAllPromotionStacks, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling PromotionsApi.listAllPromotionStacks, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v1/promotions/stacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterOrderListAllPromotionStacks', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdAt,
            'created_at', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $updatedAt,
            'updated_at', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPromotionStacksInCampaign
     *
     * List Promotion Stacks in Campaign
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionStacksInCampaign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsStacksListResponseBody
     */
    public function listPromotionStacksInCampaign($campaignId, string $contentType = self::contentTypes['listPromotionStacksInCampaign'][0])
    {
        list($response) = $this->listPromotionStacksInCampaignWithHttpInfo($campaignId, $contentType);
        return $response;
    }

    /**
     * Operation listPromotionStacksInCampaignWithHttpInfo
     *
     * List Promotion Stacks in Campaign
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionStacksInCampaign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsStacksListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPromotionStacksInCampaignWithHttpInfo($campaignId, string $contentType = self::contentTypes['listPromotionStacksInCampaign'][0])
    {
        $request = $this->listPromotionStacksInCampaignRequest($campaignId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsStacksListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsStacksListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsStacksListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsStacksListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsStacksListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPromotionStacksInCampaignAsync
     *
     * List Promotion Stacks in Campaign
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionStacksInCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPromotionStacksInCampaignAsync($campaignId, string $contentType = self::contentTypes['listPromotionStacksInCampaign'][0])
    {
        return $this->listPromotionStacksInCampaignAsyncWithHttpInfo($campaignId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPromotionStacksInCampaignAsyncWithHttpInfo
     *
     * List Promotion Stacks in Campaign
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionStacksInCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPromotionStacksInCampaignAsyncWithHttpInfo($campaignId, string $contentType = self::contentTypes['listPromotionStacksInCampaign'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsStacksListResponseBody';
        $request = $this->listPromotionStacksInCampaignRequest($campaignId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPromotionStacksInCampaign'
     *
     * @param  string $campaignId Unique campaign ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionStacksInCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPromotionStacksInCampaignRequest($campaignId, string $contentType = self::contentTypes['listPromotionStacksInCampaign'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling listPromotionStacksInCampaign'
            );
        }


        $resourcePath = '/v1/promotions/{campaignId}/stacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPromotionTiers
     *
     * List Promotion Tiers
     *
     * @param  bool $isAvailable This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiers $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsTiersListResponseBody
     */
    public function listPromotionTiers($isAvailable = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiers'][0])
    {
        list($response) = $this->listPromotionTiersWithHttpInfo($isAvailable, $limit, $page, $order, $contentType);
        return $response;
    }

    /**
     * Operation listPromotionTiersWithHttpInfo
     *
     * List Promotion Tiers
     *
     * @param  bool $isAvailable This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiers $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsTiersListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPromotionTiersWithHttpInfo($isAvailable = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiers'][0])
    {
        $request = $this->listPromotionTiersRequest($isAvailable, $limit, $page, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsTiersListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsTiersListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsTiersListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsTiersListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsTiersListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPromotionTiersAsync
     *
     * List Promotion Tiers
     *
     * @param  bool $isAvailable This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiers $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPromotionTiersAsync($isAvailable = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiers'][0])
    {
        return $this->listPromotionTiersAsyncWithHttpInfo($isAvailable, $limit, $page, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPromotionTiersAsyncWithHttpInfo
     *
     * List Promotion Tiers
     *
     * @param  bool $isAvailable This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiers $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPromotionTiersAsyncWithHttpInfo($isAvailable = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsTiersListResponseBody';
        $request = $this->listPromotionTiersRequest($isAvailable, $limit, $page, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPromotionTiers'
     *
     * @param  bool $isAvailable This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)
     * @param  int $page Which page of results to return. The lowest value is 1. (optional)
     * @param  ParameterOrderListPromotionTiers $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPromotionTiersRequest($isAvailable = null, $limit = null, $page = null, $order = null, string $contentType = self::contentTypes['listPromotionTiers'][0])
    {


        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsApi.listPromotionTiers, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PromotionsApi.listPromotionTiers, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling PromotionsApi.listPromotionTiers, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling PromotionsApi.listPromotionTiers, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/promotions/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $isAvailable,
            'is_available', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterOrderListPromotionTiers', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPromotionTiersFromCampaign
     *
     * List Promotion Tiers from Campaign
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersFromCampaign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsTiersListResponseBody
     */
    public function listPromotionTiersFromCampaign($campaignId, string $contentType = self::contentTypes['listPromotionTiersFromCampaign'][0])
    {
        list($response) = $this->listPromotionTiersFromCampaignWithHttpInfo($campaignId, $contentType);
        return $response;
    }

    /**
     * Operation listPromotionTiersFromCampaignWithHttpInfo
     *
     * List Promotion Tiers from Campaign
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersFromCampaign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsTiersListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPromotionTiersFromCampaignWithHttpInfo($campaignId, string $contentType = self::contentTypes['listPromotionTiersFromCampaign'][0])
    {
        $request = $this->listPromotionTiersFromCampaignRequest($campaignId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsTiersListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsTiersListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsTiersListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsTiersListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsTiersListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPromotionTiersFromCampaignAsync
     *
     * List Promotion Tiers from Campaign
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersFromCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPromotionTiersFromCampaignAsync($campaignId, string $contentType = self::contentTypes['listPromotionTiersFromCampaign'][0])
    {
        return $this->listPromotionTiersFromCampaignAsyncWithHttpInfo($campaignId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPromotionTiersFromCampaignAsyncWithHttpInfo
     *
     * List Promotion Tiers from Campaign
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersFromCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPromotionTiersFromCampaignAsyncWithHttpInfo($campaignId, string $contentType = self::contentTypes['listPromotionTiersFromCampaign'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsTiersListResponseBody';
        $request = $this->listPromotionTiersFromCampaignRequest($campaignId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPromotionTiersFromCampaign'
     *
     * @param  string $campaignId Unique campaign ID assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPromotionTiersFromCampaign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPromotionTiersFromCampaignRequest($campaignId, string $contentType = self::contentTypes['listPromotionTiersFromCampaign'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling listPromotionTiersFromCampaign'
            );
        }


        $resourcePath = '/v1/promotions/{campaignId}/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePromotionStack
     *
     * Update Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksUpdateRequestBody $promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionStack'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsStacksUpdateResponseBody
     */
    public function updatePromotionStack($campaignId, $stackId, $promotionsStacksUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionStack'][0])
    {
        list($response) = $this->updatePromotionStackWithHttpInfo($campaignId, $stackId, $promotionsStacksUpdateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation updatePromotionStackWithHttpInfo
     *
     * Update Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksUpdateRequestBody $promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionStack'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsStacksUpdateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePromotionStackWithHttpInfo($campaignId, $stackId, $promotionsStacksUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionStack'][0])
    {
        $request = $this->updatePromotionStackRequest($campaignId, $stackId, $promotionsStacksUpdateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsStacksUpdateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsStacksUpdateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsStacksUpdateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsStacksUpdateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsStacksUpdateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePromotionStackAsync
     *
     * Update Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksUpdateRequestBody $promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromotionStackAsync($campaignId, $stackId, $promotionsStacksUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionStack'][0])
    {
        return $this->updatePromotionStackAsyncWithHttpInfo($campaignId, $stackId, $promotionsStacksUpdateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePromotionStackAsyncWithHttpInfo
     *
     * Update Promotion Stack
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksUpdateRequestBody $promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromotionStackAsyncWithHttpInfo($campaignId, $stackId, $promotionsStacksUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionStack'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsStacksUpdateResponseBody';
        $request = $this->updatePromotionStackRequest($campaignId, $stackId, $promotionsStacksUpdateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePromotionStack'
     *
     * @param  string $campaignId ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. (required)
     * @param  string $stackId Promotion stack ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsStacksUpdateRequestBody $promotionsStacksUpdateRequestBody Specify the promotion stack parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionStack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePromotionStackRequest($campaignId, $stackId, $promotionsStacksUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionStack'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling updatePromotionStack'
            );
        }

        // verify the required parameter 'stackId' is set
        if ($stackId === null || (is_array($stackId) && count($stackId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stackId when calling updatePromotionStack'
            );
        }



        $resourcePath = '/v1/promotions/{campaignId}/stacks/{stackId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }
        // path params
        if ($stackId !== null) {
            $resourcePath = str_replace(
                '{' . 'stackId' . '}',
                ObjectSerializer::toPathValue($stackId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($promotionsStacksUpdateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($promotionsStacksUpdateRequestBody));
            } else {
                $httpBody = $promotionsStacksUpdateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePromotionTier
     *
     * Update Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersUpdateRequestBody $promotionsTiersUpdateRequestBody Specify the promotion tier parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PromotionsTiersUpdateResponseBody
     */
    public function updatePromotionTier($promotionTierId, $promotionsTiersUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionTier'][0])
    {
        list($response) = $this->updatePromotionTierWithHttpInfo($promotionTierId, $promotionsTiersUpdateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation updatePromotionTierWithHttpInfo
     *
     * Update Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersUpdateRequestBody $promotionsTiersUpdateRequestBody Specify the promotion tier parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionTier'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PromotionsTiersUpdateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePromotionTierWithHttpInfo($promotionTierId, $promotionsTiersUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionTier'][0])
    {
        $request = $this->updatePromotionTierRequest($promotionTierId, $promotionsTiersUpdateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PromotionsTiersUpdateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PromotionsTiersUpdateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PromotionsTiersUpdateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PromotionsTiersUpdateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PromotionsTiersUpdateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePromotionTierAsync
     *
     * Update Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersUpdateRequestBody $promotionsTiersUpdateRequestBody Specify the promotion tier parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromotionTierAsync($promotionTierId, $promotionsTiersUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionTier'][0])
    {
        return $this->updatePromotionTierAsyncWithHttpInfo($promotionTierId, $promotionsTiersUpdateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePromotionTierAsyncWithHttpInfo
     *
     * Update Promotion Tier
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersUpdateRequestBody $promotionsTiersUpdateRequestBody Specify the promotion tier parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePromotionTierAsyncWithHttpInfo($promotionTierId, $promotionsTiersUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionTier'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PromotionsTiersUpdateResponseBody';
        $request = $this->updatePromotionTierRequest($promotionTierId, $promotionsTiersUpdateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePromotionTier'
     *
     * @param  string $promotionTierId Unique promotion tier ID. (required)
     * @param  \OpenAPI\Client\Model\PromotionsTiersUpdateRequestBody $promotionsTiersUpdateRequestBody Specify the promotion tier parameters that you would like to update. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePromotionTier'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePromotionTierRequest($promotionTierId, $promotionsTiersUpdateRequestBody = null, string $contentType = self::contentTypes['updatePromotionTier'][0])
    {

        // verify the required parameter 'promotionTierId' is set
        if ($promotionTierId === null || (is_array($promotionTierId) && count($promotionTierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotionTierId when calling updatePromotionTier'
            );
        }



        $resourcePath = '/v1/promotions/tiers/{promotionTierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($promotionTierId !== null) {
            $resourcePath = str_replace(
                '{' . 'promotionTierId' . '}',
                ObjectSerializer::toPathValue($promotionTierId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($promotionsTiersUpdateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($promotionsTiersUpdateRequestBody));
            } else {
                $httpBody = $promotionsTiersUpdateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
