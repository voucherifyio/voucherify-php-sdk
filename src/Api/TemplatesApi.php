<?php
/**
 * TemplatesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TemplatesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TemplatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addTierFromTemplate' => [
            'application/json',
        ],
        'createCampaignFromTemplate' => [
            'application/json',
        ],
        'createCampaignTemplate' => [
            'application/json',
        ],
        'deleteCampaignTemplate' => [
            'application/json',
        ],
        'getCampaignTemplate' => [
            'application/json',
        ],
        'listCampaignTemplates' => [
            'application/json',
        ],
        'updateCampaignTemplate' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addTierFromTemplate
     *
     * Add Promotion Tier From Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateRequestBody $templatesCampaignsTierSetupCreateRequestBody Only name and campaign_id are required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTierFromTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateResponseBody
     */
    public function addTierFromTemplate($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody = null, string $contentType = self::contentTypes['addTierFromTemplate'][0])
    {
        list($response) = $this->addTierFromTemplateWithHttpInfo($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation addTierFromTemplateWithHttpInfo
     *
     * Add Promotion Tier From Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateRequestBody $templatesCampaignsTierSetupCreateRequestBody Only name and campaign_id are required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTierFromTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTierFromTemplateWithHttpInfo($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody = null, string $contentType = self::contentTypes['addTierFromTemplate'][0])
    {
        $request = $this->addTierFromTemplateRequest($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addTierFromTemplateAsync
     *
     * Add Promotion Tier From Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateRequestBody $templatesCampaignsTierSetupCreateRequestBody Only name and campaign_id are required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTierFromTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTierFromTemplateAsync($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody = null, string $contentType = self::contentTypes['addTierFromTemplate'][0])
    {
        return $this->addTierFromTemplateAsyncWithHttpInfo($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTierFromTemplateAsyncWithHttpInfo
     *
     * Add Promotion Tier From Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateRequestBody $templatesCampaignsTierSetupCreateRequestBody Only name and campaign_id are required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTierFromTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTierFromTemplateAsyncWithHttpInfo($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody = null, string $contentType = self::contentTypes['addTierFromTemplate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateResponseBody';
        $request = $this->addTierFromTemplateRequest($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTierFromTemplate'
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsTierSetupCreateRequestBody $templatesCampaignsTierSetupCreateRequestBody Only name and campaign_id are required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTierFromTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTierFromTemplateRequest($campaignTemplateId, $templatesCampaignsTierSetupCreateRequestBody = null, string $contentType = self::contentTypes['addTierFromTemplate'][0])
    {

        // verify the required parameter 'campaignTemplateId' is set
        if ($campaignTemplateId === null || (is_array($campaignTemplateId) && count($campaignTemplateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignTemplateId when calling addTierFromTemplate'
            );
        }



        $resourcePath = '/v1/templates/campaigns/{campaignTemplateId}/tier-setup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignTemplateId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignTemplateId' . '}',
                ObjectSerializer::toPathValue($campaignTemplateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templatesCampaignsTierSetupCreateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templatesCampaignsTierSetupCreateRequestBody));
            } else {
                $httpBody = $templatesCampaignsTierSetupCreateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCampaignFromTemplate
     *
     * Create Campaign From Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateRequestBody $templatesCampaignsCampaignSetupCreateRequestBody Only name is required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignFromTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateResponseBody
     */
    public function createCampaignFromTemplate($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignFromTemplate'][0])
    {
        list($response) = $this->createCampaignFromTemplateWithHttpInfo($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation createCampaignFromTemplateWithHttpInfo
     *
     * Create Campaign From Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateRequestBody $templatesCampaignsCampaignSetupCreateRequestBody Only name is required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignFromTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCampaignFromTemplateWithHttpInfo($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignFromTemplate'][0])
    {
        $request = $this->createCampaignFromTemplateRequest($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCampaignFromTemplateAsync
     *
     * Create Campaign From Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateRequestBody $templatesCampaignsCampaignSetupCreateRequestBody Only name is required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignFromTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignFromTemplateAsync($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignFromTemplate'][0])
    {
        return $this->createCampaignFromTemplateAsyncWithHttpInfo($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCampaignFromTemplateAsyncWithHttpInfo
     *
     * Create Campaign From Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateRequestBody $templatesCampaignsCampaignSetupCreateRequestBody Only name is required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignFromTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignFromTemplateAsyncWithHttpInfo($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignFromTemplate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateResponseBody';
        $request = $this->createCampaignFromTemplateRequest($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCampaignFromTemplate'
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCampaignSetupCreateRequestBody $templatesCampaignsCampaignSetupCreateRequestBody Only name is required. The rest of the fields will overwrite the template configuration. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignFromTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCampaignFromTemplateRequest($campaignTemplateId, $templatesCampaignsCampaignSetupCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignFromTemplate'][0])
    {

        // verify the required parameter 'campaignTemplateId' is set
        if ($campaignTemplateId === null || (is_array($campaignTemplateId) && count($campaignTemplateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignTemplateId when calling createCampaignFromTemplate'
            );
        }



        $resourcePath = '/v1/templates/campaigns/{campaignTemplateId}/campaign-setup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignTemplateId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignTemplateId' . '}',
                ObjectSerializer::toPathValue($campaignTemplateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templatesCampaignsCampaignSetupCreateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templatesCampaignsCampaignSetupCreateRequestBody));
            } else {
                $httpBody = $templatesCampaignsCampaignSetupCreateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCampaignTemplate
     *
     * Create Campaign Template
     *
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCreateRequestBody $templatesCampaignsCreateRequestBody Provide details for a campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesCampaignsCreateTemplateResponseBody
     */
    public function createCampaignTemplate($templatesCampaignsCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignTemplate'][0])
    {
        list($response) = $this->createCampaignTemplateWithHttpInfo($templatesCampaignsCreateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation createCampaignTemplateWithHttpInfo
     *
     * Create Campaign Template
     *
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCreateRequestBody $templatesCampaignsCreateRequestBody Provide details for a campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesCampaignsCreateTemplateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCampaignTemplateWithHttpInfo($templatesCampaignsCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignTemplate'][0])
    {
        $request = $this->createCampaignTemplateRequest($templatesCampaignsCreateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TemplatesCampaignsCreateTemplateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TemplatesCampaignsCreateTemplateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TemplatesCampaignsCreateTemplateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsCreateTemplateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesCampaignsCreateTemplateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCampaignTemplateAsync
     *
     * Create Campaign Template
     *
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCreateRequestBody $templatesCampaignsCreateRequestBody Provide details for a campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignTemplateAsync($templatesCampaignsCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignTemplate'][0])
    {
        return $this->createCampaignTemplateAsyncWithHttpInfo($templatesCampaignsCreateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCampaignTemplateAsyncWithHttpInfo
     *
     * Create Campaign Template
     *
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCreateRequestBody $templatesCampaignsCreateRequestBody Provide details for a campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCampaignTemplateAsyncWithHttpInfo($templatesCampaignsCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignTemplate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsCreateTemplateResponseBody';
        $request = $this->createCampaignTemplateRequest($templatesCampaignsCreateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCampaignTemplate'
     *
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsCreateRequestBody $templatesCampaignsCreateRequestBody Provide details for a campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCampaignTemplateRequest($templatesCampaignsCreateRequestBody = null, string $contentType = self::contentTypes['createCampaignTemplate'][0])
    {



        $resourcePath = '/v1/templates/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templatesCampaignsCreateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templatesCampaignsCreateRequestBody));
            } else {
                $httpBody = $templatesCampaignsCreateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCampaignTemplate
     *
     * Delete Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCampaignTemplate($campaignTemplateId, string $contentType = self::contentTypes['deleteCampaignTemplate'][0])
    {
        $this->deleteCampaignTemplateWithHttpInfo($campaignTemplateId, $contentType);
    }

    /**
     * Operation deleteCampaignTemplateWithHttpInfo
     *
     * Delete Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignTemplateWithHttpInfo($campaignTemplateId, string $contentType = self::contentTypes['deleteCampaignTemplate'][0])
    {
        $request = $this->deleteCampaignTemplateRequest($campaignTemplateId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignTemplateAsync
     *
     * Delete Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignTemplateAsync($campaignTemplateId, string $contentType = self::contentTypes['deleteCampaignTemplate'][0])
    {
        return $this->deleteCampaignTemplateAsyncWithHttpInfo($campaignTemplateId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignTemplateAsyncWithHttpInfo
     *
     * Delete Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignTemplateAsyncWithHttpInfo($campaignTemplateId, string $contentType = self::contentTypes['deleteCampaignTemplate'][0])
    {
        $returnType = '';
        $request = $this->deleteCampaignTemplateRequest($campaignTemplateId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaignTemplate'
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignTemplateRequest($campaignTemplateId, string $contentType = self::contentTypes['deleteCampaignTemplate'][0])
    {

        // verify the required parameter 'campaignTemplateId' is set
        if ($campaignTemplateId === null || (is_array($campaignTemplateId) && count($campaignTemplateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignTemplateId when calling deleteCampaignTemplate'
            );
        }


        $resourcePath = '/v1/templates/campaigns/{campaignTemplateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignTemplateId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignTemplateId' . '}',
                ObjectSerializer::toPathValue($campaignTemplateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignTemplate
     *
     * Get Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesCampaignsGetResponseBody
     */
    public function getCampaignTemplate($campaignTemplateId, string $contentType = self::contentTypes['getCampaignTemplate'][0])
    {
        list($response) = $this->getCampaignTemplateWithHttpInfo($campaignTemplateId, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignTemplateWithHttpInfo
     *
     * Get Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesCampaignsGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignTemplateWithHttpInfo($campaignTemplateId, string $contentType = self::contentTypes['getCampaignTemplate'][0])
    {
        $request = $this->getCampaignTemplateRequest($campaignTemplateId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TemplatesCampaignsGetResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TemplatesCampaignsGetResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TemplatesCampaignsGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsGetResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesCampaignsGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignTemplateAsync
     *
     * Get Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignTemplateAsync($campaignTemplateId, string $contentType = self::contentTypes['getCampaignTemplate'][0])
    {
        return $this->getCampaignTemplateAsyncWithHttpInfo($campaignTemplateId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignTemplateAsyncWithHttpInfo
     *
     * Get Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignTemplateAsyncWithHttpInfo($campaignTemplateId, string $contentType = self::contentTypes['getCampaignTemplate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsGetResponseBody';
        $request = $this->getCampaignTemplateRequest($campaignTemplateId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignTemplate'
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignTemplateRequest($campaignTemplateId, string $contentType = self::contentTypes['getCampaignTemplate'][0])
    {

        // verify the required parameter 'campaignTemplateId' is set
        if ($campaignTemplateId === null || (is_array($campaignTemplateId) && count($campaignTemplateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignTemplateId when calling getCampaignTemplate'
            );
        }


        $resourcePath = '/v1/templates/campaigns/{campaignTemplateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignTemplateId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignTemplateId' . '}',
                ObjectSerializer::toPathValue($campaignTemplateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCampaignTemplates
     *
     * List Campaign Templates
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)
     * @param  ParameterTemplatesList $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  bool $includeTotal If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)
     * @param  ParameterFiltersListTemplates $filters Filters for listing templates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCampaignTemplates'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesCampaignsListResponseBody
     */
    public function listCampaignTemplates($limit = null, $startingAfterId = null, $order = null, $includeTotal = null, $filters = null, string $contentType = self::contentTypes['listCampaignTemplates'][0])
    {
        list($response) = $this->listCampaignTemplatesWithHttpInfo($limit, $startingAfterId, $order, $includeTotal, $filters, $contentType);
        return $response;
    }

    /**
     * Operation listCampaignTemplatesWithHttpInfo
     *
     * List Campaign Templates
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)
     * @param  ParameterTemplatesList $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  bool $includeTotal If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)
     * @param  ParameterFiltersListTemplates $filters Filters for listing templates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCampaignTemplates'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesCampaignsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCampaignTemplatesWithHttpInfo($limit = null, $startingAfterId = null, $order = null, $includeTotal = null, $filters = null, string $contentType = self::contentTypes['listCampaignTemplates'][0])
    {
        $request = $this->listCampaignTemplatesRequest($limit, $startingAfterId, $order, $includeTotal, $filters, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TemplatesCampaignsListResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TemplatesCampaignsListResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TemplatesCampaignsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsListResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesCampaignsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCampaignTemplatesAsync
     *
     * List Campaign Templates
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)
     * @param  ParameterTemplatesList $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  bool $includeTotal If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)
     * @param  ParameterFiltersListTemplates $filters Filters for listing templates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCampaignTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCampaignTemplatesAsync($limit = null, $startingAfterId = null, $order = null, $includeTotal = null, $filters = null, string $contentType = self::contentTypes['listCampaignTemplates'][0])
    {
        return $this->listCampaignTemplatesAsyncWithHttpInfo($limit, $startingAfterId, $order, $includeTotal, $filters, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCampaignTemplatesAsyncWithHttpInfo
     *
     * List Campaign Templates
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)
     * @param  ParameterTemplatesList $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  bool $includeTotal If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)
     * @param  ParameterFiltersListTemplates $filters Filters for listing templates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCampaignTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCampaignTemplatesAsyncWithHttpInfo($limit = null, $startingAfterId = null, $order = null, $includeTotal = null, $filters = null, string $contentType = self::contentTypes['listCampaignTemplates'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsListResponseBody';
        $request = $this->listCampaignTemplatesRequest($limit, $startingAfterId, $order, $includeTotal, $filters, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCampaignTemplates'
     *
     * @param  int $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  string $startingAfterId A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)
     * @param  ParameterTemplatesList $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  bool $includeTotal If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)
     * @param  ParameterFiltersListTemplates $filters Filters for listing templates. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCampaignTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCampaignTemplatesRequest($limit = null, $startingAfterId = null, $order = null, $includeTotal = null, $filters = null, string $contentType = self::contentTypes['listCampaignTemplates'][0])
    {

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TemplatesApi.listCampaignTemplates, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TemplatesApi.listCampaignTemplates, must be bigger than or equal to 1.');
        }
        





        $resourcePath = '/v1/templates/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingAfterId,
            'starting_after_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterTemplatesList', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeTotal,
            'include_total', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filters,
            'filters', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCampaignTemplate
     *
     * Update Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsUpdateRequestBody $templatesCampaignsUpdateRequestBody Provide the new name or description for the campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesCampaignsUpdateResponseBody
     */
    public function updateCampaignTemplate($campaignTemplateId, $templatesCampaignsUpdateRequestBody = null, string $contentType = self::contentTypes['updateCampaignTemplate'][0])
    {
        list($response) = $this->updateCampaignTemplateWithHttpInfo($campaignTemplateId, $templatesCampaignsUpdateRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation updateCampaignTemplateWithHttpInfo
     *
     * Update Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsUpdateRequestBody $templatesCampaignsUpdateRequestBody Provide the new name or description for the campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesCampaignsUpdateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCampaignTemplateWithHttpInfo($campaignTemplateId, $templatesCampaignsUpdateRequestBody = null, string $contentType = self::contentTypes['updateCampaignTemplate'][0])
    {
        $request = $this->updateCampaignTemplateRequest($campaignTemplateId, $templatesCampaignsUpdateRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TemplatesCampaignsUpdateResponseBody' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TemplatesCampaignsUpdateResponseBody' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TemplatesCampaignsUpdateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsUpdateResponseBody';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesCampaignsUpdateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCampaignTemplateAsync
     *
     * Update Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsUpdateRequestBody $templatesCampaignsUpdateRequestBody Provide the new name or description for the campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignTemplateAsync($campaignTemplateId, $templatesCampaignsUpdateRequestBody = null, string $contentType = self::contentTypes['updateCampaignTemplate'][0])
    {
        return $this->updateCampaignTemplateAsyncWithHttpInfo($campaignTemplateId, $templatesCampaignsUpdateRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCampaignTemplateAsyncWithHttpInfo
     *
     * Update Campaign Template
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsUpdateRequestBody $templatesCampaignsUpdateRequestBody Provide the new name or description for the campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignTemplateAsyncWithHttpInfo($campaignTemplateId, $templatesCampaignsUpdateRequestBody = null, string $contentType = self::contentTypes['updateCampaignTemplate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesCampaignsUpdateResponseBody';
        $request = $this->updateCampaignTemplateRequest($campaignTemplateId, $templatesCampaignsUpdateRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCampaignTemplate'
     *
     * @param  string $campaignTemplateId Pass the campaign template ID that was assigned by Voucherify. (required)
     * @param  \OpenAPI\Client\Model\TemplatesCampaignsUpdateRequestBody $templatesCampaignsUpdateRequestBody Provide the new name or description for the campaign template (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCampaignTemplateRequest($campaignTemplateId, $templatesCampaignsUpdateRequestBody = null, string $contentType = self::contentTypes['updateCampaignTemplate'][0])
    {

        // verify the required parameter 'campaignTemplateId' is set
        if ($campaignTemplateId === null || (is_array($campaignTemplateId) && count($campaignTemplateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignTemplateId when calling updateCampaignTemplate'
            );
        }



        $resourcePath = '/v1/templates/campaigns/{campaignTemplateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaignTemplateId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignTemplateId' . '}',
                ObjectSerializer::toPathValue($campaignTemplateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templatesCampaignsUpdateRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templatesCampaignsUpdateRequestBody));
            } else {
                $httpBody = $templatesCampaignsUpdateRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
